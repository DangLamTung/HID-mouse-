
joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ee0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08007ff0  08007ff0  00017ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008064  08008064  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  08008064  08008064  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008064  08008064  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008064  08008064  00018064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008068  08008068  00018068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800806c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e0  20000164  080081d0  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a44  080081d0  00020a44  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019cb5  00000000  00000000  0002018d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000368e  00000000  00000000  00039e42  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015c8  00000000  00000000  0003d4d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001440  00000000  00000000  0003ea98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000181f1  00000000  00000000  0003fed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012670  00000000  00000000  000580c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007db5b  00000000  00000000  0006a739  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e8294  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e0c  00000000  00000000  000e8310  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000164 	.word	0x20000164
 800012c:	00000000 	.word	0x00000000
 8000130:	08007fd8 	.word	0x08007fd8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000168 	.word	0x20000168
 800014c:	08007fd8 	.word	0x08007fd8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2uiz>:
 80009fc:	004a      	lsls	r2, r1, #1
 80009fe:	d211      	bcs.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d211      	bcs.n	8000a2a <__aeabi_d2uiz+0x2e>
 8000a06:	d50d      	bpl.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d40e      	bmi.n	8000a30 <__aeabi_d2uiz+0x34>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_d2uiz+0x3a>
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	4770      	bx	lr

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_fmul>:
 8000adc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ae0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ae4:	bf1e      	ittt	ne
 8000ae6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000aea:	ea92 0f0c 	teqne	r2, ip
 8000aee:	ea93 0f0c 	teqne	r3, ip
 8000af2:	d06f      	beq.n	8000bd4 <__aeabi_fmul+0xf8>
 8000af4:	441a      	add	r2, r3
 8000af6:	ea80 0c01 	eor.w	ip, r0, r1
 8000afa:	0240      	lsls	r0, r0, #9
 8000afc:	bf18      	it	ne
 8000afe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b02:	d01e      	beq.n	8000b42 <__aeabi_fmul+0x66>
 8000b04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b08:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b0c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b10:	fba0 3101 	umull	r3, r1, r0, r1
 8000b14:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b18:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b1c:	bf3e      	ittt	cc
 8000b1e:	0049      	lslcc	r1, r1, #1
 8000b20:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b24:	005b      	lslcc	r3, r3, #1
 8000b26:	ea40 0001 	orr.w	r0, r0, r1
 8000b2a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b2e:	2afd      	cmp	r2, #253	; 0xfd
 8000b30:	d81d      	bhi.n	8000b6e <__aeabi_fmul+0x92>
 8000b32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b3a:	bf08      	it	eq
 8000b3c:	f020 0001 	biceq.w	r0, r0, #1
 8000b40:	4770      	bx	lr
 8000b42:	f090 0f00 	teq	r0, #0
 8000b46:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b4a:	bf08      	it	eq
 8000b4c:	0249      	lsleq	r1, r1, #9
 8000b4e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b52:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b56:	3a7f      	subs	r2, #127	; 0x7f
 8000b58:	bfc2      	ittt	gt
 8000b5a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b5e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b62:	4770      	bxgt	lr
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	f04f 0300 	mov.w	r3, #0
 8000b6c:	3a01      	subs	r2, #1
 8000b6e:	dc5d      	bgt.n	8000c2c <__aeabi_fmul+0x150>
 8000b70:	f112 0f19 	cmn.w	r2, #25
 8000b74:	bfdc      	itt	le
 8000b76:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000b7a:	4770      	bxle	lr
 8000b7c:	f1c2 0200 	rsb	r2, r2, #0
 8000b80:	0041      	lsls	r1, r0, #1
 8000b82:	fa21 f102 	lsr.w	r1, r1, r2
 8000b86:	f1c2 0220 	rsb	r2, r2, #32
 8000b8a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b8e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000b92:	f140 0000 	adc.w	r0, r0, #0
 8000b96:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b9a:	bf08      	it	eq
 8000b9c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba0:	4770      	bx	lr
 8000ba2:	f092 0f00 	teq	r2, #0
 8000ba6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000baa:	bf02      	ittt	eq
 8000bac:	0040      	lsleq	r0, r0, #1
 8000bae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bb2:	3a01      	subeq	r2, #1
 8000bb4:	d0f9      	beq.n	8000baa <__aeabi_fmul+0xce>
 8000bb6:	ea40 000c 	orr.w	r0, r0, ip
 8000bba:	f093 0f00 	teq	r3, #0
 8000bbe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc2:	bf02      	ittt	eq
 8000bc4:	0049      	lsleq	r1, r1, #1
 8000bc6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000bca:	3b01      	subeq	r3, #1
 8000bcc:	d0f9      	beq.n	8000bc2 <__aeabi_fmul+0xe6>
 8000bce:	ea41 010c 	orr.w	r1, r1, ip
 8000bd2:	e78f      	b.n	8000af4 <__aeabi_fmul+0x18>
 8000bd4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bd8:	ea92 0f0c 	teq	r2, ip
 8000bdc:	bf18      	it	ne
 8000bde:	ea93 0f0c 	teqne	r3, ip
 8000be2:	d00a      	beq.n	8000bfa <__aeabi_fmul+0x11e>
 8000be4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000be8:	bf18      	it	ne
 8000bea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000bee:	d1d8      	bne.n	8000ba2 <__aeabi_fmul+0xc6>
 8000bf0:	ea80 0001 	eor.w	r0, r0, r1
 8000bf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f090 0f00 	teq	r0, #0
 8000bfe:	bf17      	itett	ne
 8000c00:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c04:	4608      	moveq	r0, r1
 8000c06:	f091 0f00 	teqne	r1, #0
 8000c0a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c0e:	d014      	beq.n	8000c3a <__aeabi_fmul+0x15e>
 8000c10:	ea92 0f0c 	teq	r2, ip
 8000c14:	d101      	bne.n	8000c1a <__aeabi_fmul+0x13e>
 8000c16:	0242      	lsls	r2, r0, #9
 8000c18:	d10f      	bne.n	8000c3a <__aeabi_fmul+0x15e>
 8000c1a:	ea93 0f0c 	teq	r3, ip
 8000c1e:	d103      	bne.n	8000c28 <__aeabi_fmul+0x14c>
 8000c20:	024b      	lsls	r3, r1, #9
 8000c22:	bf18      	it	ne
 8000c24:	4608      	movne	r0, r1
 8000c26:	d108      	bne.n	8000c3a <__aeabi_fmul+0x15e>
 8000c28:	ea80 0001 	eor.w	r0, r0, r1
 8000c2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bx	lr
 8000c3a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c3e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_fdiv>:
 8000c44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c52:	ea92 0f0c 	teqne	r2, ip
 8000c56:	ea93 0f0c 	teqne	r3, ip
 8000c5a:	d069      	beq.n	8000d30 <__aeabi_fdiv+0xec>
 8000c5c:	eba2 0203 	sub.w	r2, r2, r3
 8000c60:	ea80 0c01 	eor.w	ip, r0, r1
 8000c64:	0249      	lsls	r1, r1, #9
 8000c66:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000c6a:	d037      	beq.n	8000cdc <__aeabi_fdiv+0x98>
 8000c6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c70:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000c74:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000c78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c7c:	428b      	cmp	r3, r1
 8000c7e:	bf38      	it	cc
 8000c80:	005b      	lslcc	r3, r3, #1
 8000c82:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000c86:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	bf24      	itt	cs
 8000c8e:	1a5b      	subcs	r3, r3, r1
 8000c90:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c94:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c98:	bf24      	itt	cs
 8000c9a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c9e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ca2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ca6:	bf24      	itt	cs
 8000ca8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000cac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000cb0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000cb4:	bf24      	itt	cs
 8000cb6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000cba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000cbe:	011b      	lsls	r3, r3, #4
 8000cc0:	bf18      	it	ne
 8000cc2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000cc6:	d1e0      	bne.n	8000c8a <__aeabi_fdiv+0x46>
 8000cc8:	2afd      	cmp	r2, #253	; 0xfd
 8000cca:	f63f af50 	bhi.w	8000b6e <__aeabi_fmul+0x92>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cd4:	bf08      	it	eq
 8000cd6:	f020 0001 	biceq.w	r0, r0, #1
 8000cda:	4770      	bx	lr
 8000cdc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ce0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ce4:	327f      	adds	r2, #127	; 0x7f
 8000ce6:	bfc2      	ittt	gt
 8000ce8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cf0:	4770      	bxgt	lr
 8000cf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf6:	f04f 0300 	mov.w	r3, #0
 8000cfa:	3a01      	subs	r2, #1
 8000cfc:	e737      	b.n	8000b6e <__aeabi_fmul+0x92>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d06:	bf02      	ittt	eq
 8000d08:	0040      	lsleq	r0, r0, #1
 8000d0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d0e:	3a01      	subeq	r2, #1
 8000d10:	d0f9      	beq.n	8000d06 <__aeabi_fdiv+0xc2>
 8000d12:	ea40 000c 	orr.w	r0, r0, ip
 8000d16:	f093 0f00 	teq	r3, #0
 8000d1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d1e:	bf02      	ittt	eq
 8000d20:	0049      	lsleq	r1, r1, #1
 8000d22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d26:	3b01      	subeq	r3, #1
 8000d28:	d0f9      	beq.n	8000d1e <__aeabi_fdiv+0xda>
 8000d2a:	ea41 010c 	orr.w	r1, r1, ip
 8000d2e:	e795      	b.n	8000c5c <__aeabi_fdiv+0x18>
 8000d30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d34:	ea92 0f0c 	teq	r2, ip
 8000d38:	d108      	bne.n	8000d4c <__aeabi_fdiv+0x108>
 8000d3a:	0242      	lsls	r2, r0, #9
 8000d3c:	f47f af7d 	bne.w	8000c3a <__aeabi_fmul+0x15e>
 8000d40:	ea93 0f0c 	teq	r3, ip
 8000d44:	f47f af70 	bne.w	8000c28 <__aeabi_fmul+0x14c>
 8000d48:	4608      	mov	r0, r1
 8000d4a:	e776      	b.n	8000c3a <__aeabi_fmul+0x15e>
 8000d4c:	ea93 0f0c 	teq	r3, ip
 8000d50:	d104      	bne.n	8000d5c <__aeabi_fdiv+0x118>
 8000d52:	024b      	lsls	r3, r1, #9
 8000d54:	f43f af4c 	beq.w	8000bf0 <__aeabi_fmul+0x114>
 8000d58:	4608      	mov	r0, r1
 8000d5a:	e76e      	b.n	8000c3a <__aeabi_fmul+0x15e>
 8000d5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d60:	bf18      	it	ne
 8000d62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d66:	d1ca      	bne.n	8000cfe <__aeabi_fdiv+0xba>
 8000d68:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000d6c:	f47f af5c 	bne.w	8000c28 <__aeabi_fmul+0x14c>
 8000d70:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000d74:	f47f af3c 	bne.w	8000bf0 <__aeabi_fmul+0x114>
 8000d78:	e75f      	b.n	8000c3a <__aeabi_fmul+0x15e>
 8000d7a:	bf00      	nop

08000d7c <__aeabi_f2uiz>:
 8000d7c:	0042      	lsls	r2, r0, #1
 8000d7e:	d20e      	bcs.n	8000d9e <__aeabi_f2uiz+0x22>
 8000d80:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d84:	d30b      	bcc.n	8000d9e <__aeabi_f2uiz+0x22>
 8000d86:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d8a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d8e:	d409      	bmi.n	8000da4 <__aeabi_f2uiz+0x28>
 8000d90:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d98:	fa23 f002 	lsr.w	r0, r3, r2
 8000d9c:	4770      	bx	lr
 8000d9e:	f04f 0000 	mov.w	r0, #0
 8000da2:	4770      	bx	lr
 8000da4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000da8:	d101      	bne.n	8000dae <__aeabi_f2uiz+0x32>
 8000daa:	0242      	lsls	r2, r0, #9
 8000dac:	d102      	bne.n	8000db4 <__aeabi_f2uiz+0x38>
 8000dae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000db2:	4770      	bx	lr
 8000db4:	f04f 0000 	mov.w	r0, #0
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	0000      	movs	r0, r0
	...

08000dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc0:	b5b0      	push	{r4, r5, r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc6:	f000 ff09 	bl	8001bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dca:	f000 fa97 	bl	80012fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dce:	f000 fc49 	bl	8001664 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dd2:	f000 fc29 	bl	8001628 <MX_DMA_Init>
  MX_ADC1_Init();
 8000dd6:	f000 faef 	bl	80013b8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000dda:	f000 fb73 	bl	80014c4 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000dde:	f000 fb9f 	bl	8001520 <MX_SPI2_Init>
  MX_TIM4_Init();
 8000de2:	f000 fbd3 	bl	800158c <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000de6:	f006 fc9b 	bl	8007720 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1,a,6);
 8000dea:	2206      	movs	r2, #6
 8000dec:	49b8      	ldr	r1, [pc, #736]	; (80010d0 <main+0x310>)
 8000dee:	48b9      	ldr	r0, [pc, #740]	; (80010d4 <main+0x314>)
 8000df0:	f001 f850 	bl	8001e94 <HAL_ADC_Start_DMA>
  float temp1,temp2;
  for(int i = 0 ; i < 100; i++){
 8000df4:	2300      	movs	r3, #0
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	e05d      	b.n	8000eb6 <main+0xf6>
      temp1 += floor(a[1]/4096.0*255);
 8000dfa:	68f8      	ldr	r0, [r7, #12]
 8000dfc:	f7ff fb0c 	bl	8000418 <__aeabi_f2d>
 8000e00:	4604      	mov	r4, r0
 8000e02:	460d      	mov	r5, r1
 8000e04:	4bb2      	ldr	r3, [pc, #712]	; (80010d0 <main+0x310>)
 8000e06:	885b      	ldrh	r3, [r3, #2]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff faf3 	bl	80003f4 <__aeabi_i2d>
 8000e0e:	f04f 0200 	mov.w	r2, #0
 8000e12:	4bb1      	ldr	r3, [pc, #708]	; (80010d8 <main+0x318>)
 8000e14:	f7ff fc82 	bl	800071c <__aeabi_ddiv>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	4619      	mov	r1, r3
 8000e20:	a3a9      	add	r3, pc, #676	; (adr r3, 80010c8 <main+0x308>)
 8000e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e26:	f7ff fb4f 	bl	80004c8 <__aeabi_dmul>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	4610      	mov	r0, r2
 8000e30:	4619      	mov	r1, r3
 8000e32:	f007 f84d 	bl	8007ed0 <floor>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	4629      	mov	r1, r5
 8000e3e:	f7ff f98d 	bl	800015c <__adddf3>
 8000e42:	4603      	mov	r3, r0
 8000e44:	460c      	mov	r4, r1
 8000e46:	4618      	mov	r0, r3
 8000e48:	4621      	mov	r1, r4
 8000e4a:	f7ff fdf7 	bl	8000a3c <__aeabi_d2f>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	60fb      	str	r3, [r7, #12]
      temp2 += floor(a[2]/4096.0*255);
 8000e52:	68b8      	ldr	r0, [r7, #8]
 8000e54:	f7ff fae0 	bl	8000418 <__aeabi_f2d>
 8000e58:	4604      	mov	r4, r0
 8000e5a:	460d      	mov	r5, r1
 8000e5c:	4b9c      	ldr	r3, [pc, #624]	; (80010d0 <main+0x310>)
 8000e5e:	889b      	ldrh	r3, [r3, #4]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fac7 	bl	80003f4 <__aeabi_i2d>
 8000e66:	f04f 0200 	mov.w	r2, #0
 8000e6a:	4b9b      	ldr	r3, [pc, #620]	; (80010d8 <main+0x318>)
 8000e6c:	f7ff fc56 	bl	800071c <__aeabi_ddiv>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	4610      	mov	r0, r2
 8000e76:	4619      	mov	r1, r3
 8000e78:	a393      	add	r3, pc, #588	; (adr r3, 80010c8 <main+0x308>)
 8000e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7e:	f7ff fb23 	bl	80004c8 <__aeabi_dmul>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	4610      	mov	r0, r2
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f007 f821 	bl	8007ed0 <floor>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	460b      	mov	r3, r1
 8000e92:	4620      	mov	r0, r4
 8000e94:	4629      	mov	r1, r5
 8000e96:	f7ff f961 	bl	800015c <__adddf3>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	460c      	mov	r4, r1
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	4621      	mov	r1, r4
 8000ea2:	f7ff fdcb 	bl	8000a3c <__aeabi_d2f>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	60bb      	str	r3, [r7, #8]
      HAL_Delay(2);
 8000eaa:	2002      	movs	r0, #2
 8000eac:	f000 fef8 	bl	8001ca0 <HAL_Delay>
  for(int i = 0 ; i < 100; i++){
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b63      	cmp	r3, #99	; 0x63
 8000eba:	dd9e      	ble.n	8000dfa <main+0x3a>
  }
  temp1/=100;
 8000ebc:	4987      	ldr	r1, [pc, #540]	; (80010dc <main+0x31c>)
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	f7ff fec0 	bl	8000c44 <__aeabi_fdiv>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	60fb      	str	r3, [r7, #12]
  temp2/=100;
 8000ec8:	4984      	ldr	r1, [pc, #528]	; (80010dc <main+0x31c>)
 8000eca:	68b8      	ldr	r0, [r7, #8]
 8000ecc:	f7ff feba 	bl	8000c44 <__aeabi_fdiv>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	60bb      	str	r3, [r7, #8]

  calib1 = (uint8_t) temp1;
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	f7ff ff51 	bl	8000d7c <__aeabi_f2uiz>
 8000eda:	4603      	mov	r3, r0
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b80      	ldr	r3, [pc, #512]	; (80010e0 <main+0x320>)
 8000ee0:	701a      	strb	r2, [r3, #0]
  calib2 = (uint8_t) temp2;
 8000ee2:	68b8      	ldr	r0, [r7, #8]
 8000ee4:	f7ff ff4a 	bl	8000d7c <__aeabi_f2uiz>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	4b7d      	ldr	r3, [pc, #500]	; (80010e4 <main+0x324>)
 8000eee:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		click_report[0] = 0; //click
 8000ef0:	4b7d      	ldr	r3, [pc, #500]	; (80010e8 <main+0x328>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]


		if((floor(a[1]/4096.0*255) -  calib1) > 2){
 8000ef6:	4b76      	ldr	r3, [pc, #472]	; (80010d0 <main+0x310>)
 8000ef8:	885b      	ldrh	r3, [r3, #2]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fa7a 	bl	80003f4 <__aeabi_i2d>
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	4b74      	ldr	r3, [pc, #464]	; (80010d8 <main+0x318>)
 8000f06:	f7ff fc09 	bl	800071c <__aeabi_ddiv>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	460c      	mov	r4, r1
 8000f0e:	4618      	mov	r0, r3
 8000f10:	4621      	mov	r1, r4
 8000f12:	a36d      	add	r3, pc, #436	; (adr r3, 80010c8 <main+0x308>)
 8000f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f18:	f7ff fad6 	bl	80004c8 <__aeabi_dmul>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	460c      	mov	r4, r1
 8000f20:	4618      	mov	r0, r3
 8000f22:	4621      	mov	r1, r4
 8000f24:	f006 ffd4 	bl	8007ed0 <floor>
 8000f28:	4604      	mov	r4, r0
 8000f2a:	460d      	mov	r5, r1
 8000f2c:	4b6c      	ldr	r3, [pc, #432]	; (80010e0 <main+0x320>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fa5f 	bl	80003f4 <__aeabi_i2d>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	4629      	mov	r1, r5
 8000f3e:	f7ff f90b 	bl	8000158 <__aeabi_dsub>
 8000f42:	4603      	mov	r3, r0
 8000f44:	460c      	mov	r4, r1
 8000f46:	4618      	mov	r0, r3
 8000f48:	4621      	mov	r1, r4
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f52:	f7ff fd49 	bl	80009e8 <__aeabi_dcmpgt>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d03f      	beq.n	8000fdc <main+0x21c>
			 click_report[1] = (uint8_t)( 255 - ((a[1]/4096.0*255) - calib1)/2);
 8000f5c:	4b5c      	ldr	r3, [pc, #368]	; (80010d0 <main+0x310>)
 8000f5e:	885b      	ldrh	r3, [r3, #2]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fa47 	bl	80003f4 <__aeabi_i2d>
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	4b5b      	ldr	r3, [pc, #364]	; (80010d8 <main+0x318>)
 8000f6c:	f7ff fbd6 	bl	800071c <__aeabi_ddiv>
 8000f70:	4603      	mov	r3, r0
 8000f72:	460c      	mov	r4, r1
 8000f74:	4618      	mov	r0, r3
 8000f76:	4621      	mov	r1, r4
 8000f78:	a353      	add	r3, pc, #332	; (adr r3, 80010c8 <main+0x308>)
 8000f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7e:	f7ff faa3 	bl	80004c8 <__aeabi_dmul>
 8000f82:	4603      	mov	r3, r0
 8000f84:	460c      	mov	r4, r1
 8000f86:	4625      	mov	r5, r4
 8000f88:	461c      	mov	r4, r3
 8000f8a:	4b55      	ldr	r3, [pc, #340]	; (80010e0 <main+0x320>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fa30 	bl	80003f4 <__aeabi_i2d>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	4620      	mov	r0, r4
 8000f9a:	4629      	mov	r1, r5
 8000f9c:	f7ff f8dc 	bl	8000158 <__aeabi_dsub>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	460c      	mov	r4, r1
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	4621      	mov	r1, r4
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fb0:	f7ff fbb4 	bl	800071c <__aeabi_ddiv>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	460c      	mov	r4, r1
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4623      	mov	r3, r4
 8000fbc:	a142      	add	r1, pc, #264	; (adr r1, 80010c8 <main+0x308>)
 8000fbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fc2:	f7ff f8c9 	bl	8000158 <__aeabi_dsub>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	460c      	mov	r4, r1
 8000fca:	4618      	mov	r0, r3
 8000fcc:	4621      	mov	r1, r4
 8000fce:	f7ff fd15 	bl	80009fc <__aeabi_d2uiz>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4b44      	ldr	r3, [pc, #272]	; (80010e8 <main+0x328>)
 8000fd8:	705a      	strb	r2, [r3, #1]
 8000fda:	e08a      	b.n	80010f2 <main+0x332>

		}
		else{
			if((floor(a[1]/4096.0*255) -  calib1) < -2){
 8000fdc:	4b3c      	ldr	r3, [pc, #240]	; (80010d0 <main+0x310>)
 8000fde:	885b      	ldrh	r3, [r3, #2]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fa07 	bl	80003f4 <__aeabi_i2d>
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	4b3b      	ldr	r3, [pc, #236]	; (80010d8 <main+0x318>)
 8000fec:	f7ff fb96 	bl	800071c <__aeabi_ddiv>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	460c      	mov	r4, r1
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	4621      	mov	r1, r4
 8000ff8:	a333      	add	r3, pc, #204	; (adr r3, 80010c8 <main+0x308>)
 8000ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffe:	f7ff fa63 	bl	80004c8 <__aeabi_dmul>
 8001002:	4603      	mov	r3, r0
 8001004:	460c      	mov	r4, r1
 8001006:	4618      	mov	r0, r3
 8001008:	4621      	mov	r1, r4
 800100a:	f006 ff61 	bl	8007ed0 <floor>
 800100e:	4604      	mov	r4, r0
 8001010:	460d      	mov	r5, r1
 8001012:	4b33      	ldr	r3, [pc, #204]	; (80010e0 <main+0x320>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff f9ec 	bl	80003f4 <__aeabi_i2d>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4620      	mov	r0, r4
 8001022:	4629      	mov	r1, r5
 8001024:	f7ff f898 	bl	8000158 <__aeabi_dsub>
 8001028:	4603      	mov	r3, r0
 800102a:	460c      	mov	r4, r1
 800102c:	4618      	mov	r0, r3
 800102e:	4621      	mov	r1, r4
 8001030:	f04f 0200 	mov.w	r2, #0
 8001034:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001038:	f7ff fcb8 	bl	80009ac <__aeabi_dcmplt>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d054      	beq.n	80010ec <main+0x32c>
			      click_report[1] =(uint8_t)( 255 -  ((a[1]/4096.0*255) - calib1)/2);			//x
 8001042:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <main+0x310>)
 8001044:	885b      	ldrh	r3, [r3, #2]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff f9d4 	bl	80003f4 <__aeabi_i2d>
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <main+0x318>)
 8001052:	f7ff fb63 	bl	800071c <__aeabi_ddiv>
 8001056:	4603      	mov	r3, r0
 8001058:	460c      	mov	r4, r1
 800105a:	4618      	mov	r0, r3
 800105c:	4621      	mov	r1, r4
 800105e:	a31a      	add	r3, pc, #104	; (adr r3, 80010c8 <main+0x308>)
 8001060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001064:	f7ff fa30 	bl	80004c8 <__aeabi_dmul>
 8001068:	4603      	mov	r3, r0
 800106a:	460c      	mov	r4, r1
 800106c:	4625      	mov	r5, r4
 800106e:	461c      	mov	r4, r3
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <main+0x320>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff f9bd 	bl	80003f4 <__aeabi_i2d>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4620      	mov	r0, r4
 8001080:	4629      	mov	r1, r5
 8001082:	f7ff f869 	bl	8000158 <__aeabi_dsub>
 8001086:	4603      	mov	r3, r0
 8001088:	460c      	mov	r4, r1
 800108a:	4618      	mov	r0, r3
 800108c:	4621      	mov	r1, r4
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001096:	f7ff fb41 	bl	800071c <__aeabi_ddiv>
 800109a:	4603      	mov	r3, r0
 800109c:	460c      	mov	r4, r1
 800109e:	461a      	mov	r2, r3
 80010a0:	4623      	mov	r3, r4
 80010a2:	a109      	add	r1, pc, #36	; (adr r1, 80010c8 <main+0x308>)
 80010a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010a8:	f7ff f856 	bl	8000158 <__aeabi_dsub>
 80010ac:	4603      	mov	r3, r0
 80010ae:	460c      	mov	r4, r1
 80010b0:	4618      	mov	r0, r3
 80010b2:	4621      	mov	r1, r4
 80010b4:	f7ff fca2 	bl	80009fc <__aeabi_d2uiz>
 80010b8:	4603      	mov	r3, r0
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <main+0x328>)
 80010be:	705a      	strb	r2, [r3, #1]
 80010c0:	e017      	b.n	80010f2 <main+0x332>
 80010c2:	bf00      	nop
 80010c4:	f3af 8000 	nop.w
 80010c8:	00000000 	.word	0x00000000
 80010cc:	406fe000 	.word	0x406fe000
 80010d0:	20000304 	.word	0x20000304
 80010d4:	2000028c 	.word	0x2000028c
 80010d8:	40b00000 	.word	0x40b00000
 80010dc:	42c80000 	.word	0x42c80000
 80010e0:	20000300 	.word	0x20000300
 80010e4:	2000019c 	.word	0x2000019c
 80010e8:	20000180 	.word	0x20000180
			}
			else{
				click_report[1] = 0;
 80010ec:	4b7e      	ldr	r3, [pc, #504]	; (80012e8 <main+0x528>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	705a      	strb	r2, [r3, #1]
			}
		}
		if((floor(a[2]/4096.0*255) - calib2) > 2){
 80010f2:	4b7e      	ldr	r3, [pc, #504]	; (80012ec <main+0x52c>)
 80010f4:	889b      	ldrh	r3, [r3, #4]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f97c 	bl	80003f4 <__aeabi_i2d>
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	4b7b      	ldr	r3, [pc, #492]	; (80012f0 <main+0x530>)
 8001102:	f7ff fb0b 	bl	800071c <__aeabi_ddiv>
 8001106:	4603      	mov	r3, r0
 8001108:	460c      	mov	r4, r1
 800110a:	4618      	mov	r0, r3
 800110c:	4621      	mov	r1, r4
 800110e:	a374      	add	r3, pc, #464	; (adr r3, 80012e0 <main+0x520>)
 8001110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001114:	f7ff f9d8 	bl	80004c8 <__aeabi_dmul>
 8001118:	4603      	mov	r3, r0
 800111a:	460c      	mov	r4, r1
 800111c:	4618      	mov	r0, r3
 800111e:	4621      	mov	r1, r4
 8001120:	f006 fed6 	bl	8007ed0 <floor>
 8001124:	4604      	mov	r4, r0
 8001126:	460d      	mov	r5, r1
 8001128:	4b72      	ldr	r3, [pc, #456]	; (80012f4 <main+0x534>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f961 	bl	80003f4 <__aeabi_i2d>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4620      	mov	r0, r4
 8001138:	4629      	mov	r1, r5
 800113a:	f7ff f80d 	bl	8000158 <__aeabi_dsub>
 800113e:	4603      	mov	r3, r0
 8001140:	460c      	mov	r4, r1
 8001142:	4618      	mov	r0, r3
 8001144:	4621      	mov	r1, r4
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800114e:	f7ff fc4b 	bl	80009e8 <__aeabi_dcmpgt>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d03f      	beq.n	80011d8 <main+0x418>
			  click_report[2] = (uint8_t)( 255 - ((a[2]/4096.0*255) - calib2)/2);
 8001158:	4b64      	ldr	r3, [pc, #400]	; (80012ec <main+0x52c>)
 800115a:	889b      	ldrh	r3, [r3, #4]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f949 	bl	80003f4 <__aeabi_i2d>
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	4b62      	ldr	r3, [pc, #392]	; (80012f0 <main+0x530>)
 8001168:	f7ff fad8 	bl	800071c <__aeabi_ddiv>
 800116c:	4603      	mov	r3, r0
 800116e:	460c      	mov	r4, r1
 8001170:	4618      	mov	r0, r3
 8001172:	4621      	mov	r1, r4
 8001174:	a35a      	add	r3, pc, #360	; (adr r3, 80012e0 <main+0x520>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f7ff f9a5 	bl	80004c8 <__aeabi_dmul>
 800117e:	4603      	mov	r3, r0
 8001180:	460c      	mov	r4, r1
 8001182:	4625      	mov	r5, r4
 8001184:	461c      	mov	r4, r3
 8001186:	4b5b      	ldr	r3, [pc, #364]	; (80012f4 <main+0x534>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f932 	bl	80003f4 <__aeabi_i2d>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4620      	mov	r0, r4
 8001196:	4629      	mov	r1, r5
 8001198:	f7fe ffde 	bl	8000158 <__aeabi_dsub>
 800119c:	4603      	mov	r3, r0
 800119e:	460c      	mov	r4, r1
 80011a0:	4618      	mov	r0, r3
 80011a2:	4621      	mov	r1, r4
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ac:	f7ff fab6 	bl	800071c <__aeabi_ddiv>
 80011b0:	4603      	mov	r3, r0
 80011b2:	460c      	mov	r4, r1
 80011b4:	461a      	mov	r2, r3
 80011b6:	4623      	mov	r3, r4
 80011b8:	a149      	add	r1, pc, #292	; (adr r1, 80012e0 <main+0x520>)
 80011ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011be:	f7fe ffcb 	bl	8000158 <__aeabi_dsub>
 80011c2:	4603      	mov	r3, r0
 80011c4:	460c      	mov	r4, r1
 80011c6:	4618      	mov	r0, r3
 80011c8:	4621      	mov	r1, r4
 80011ca:	f7ff fc17 	bl	80009fc <__aeabi_d2uiz>
 80011ce:	4603      	mov	r3, r0
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4b45      	ldr	r3, [pc, #276]	; (80012e8 <main+0x528>)
 80011d4:	709a      	strb	r2, [r3, #2]
 80011d6:	e075      	b.n	80012c4 <main+0x504>

				}
				else{
					if((floor(a[2]/4096.0*255) -  calib2) < -2){
 80011d8:	4b44      	ldr	r3, [pc, #272]	; (80012ec <main+0x52c>)
 80011da:	889b      	ldrh	r3, [r3, #4]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff f909 	bl	80003f4 <__aeabi_i2d>
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	4b42      	ldr	r3, [pc, #264]	; (80012f0 <main+0x530>)
 80011e8:	f7ff fa98 	bl	800071c <__aeabi_ddiv>
 80011ec:	4603      	mov	r3, r0
 80011ee:	460c      	mov	r4, r1
 80011f0:	4618      	mov	r0, r3
 80011f2:	4621      	mov	r1, r4
 80011f4:	a33a      	add	r3, pc, #232	; (adr r3, 80012e0 <main+0x520>)
 80011f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fa:	f7ff f965 	bl	80004c8 <__aeabi_dmul>
 80011fe:	4603      	mov	r3, r0
 8001200:	460c      	mov	r4, r1
 8001202:	4618      	mov	r0, r3
 8001204:	4621      	mov	r1, r4
 8001206:	f006 fe63 	bl	8007ed0 <floor>
 800120a:	4604      	mov	r4, r0
 800120c:	460d      	mov	r5, r1
 800120e:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <main+0x534>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f8ee 	bl	80003f4 <__aeabi_i2d>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4620      	mov	r0, r4
 800121e:	4629      	mov	r1, r5
 8001220:	f7fe ff9a 	bl	8000158 <__aeabi_dsub>
 8001224:	4603      	mov	r3, r0
 8001226:	460c      	mov	r4, r1
 8001228:	4618      	mov	r0, r3
 800122a:	4621      	mov	r1, r4
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001234:	f7ff fbba 	bl	80009ac <__aeabi_dcmplt>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d03f      	beq.n	80012be <main+0x4fe>
						 click_report[2] = (uint8_t)( 255 -  ((a[2]/4096.0*255) - calib2)/2);			//x
 800123e:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <main+0x52c>)
 8001240:	889b      	ldrh	r3, [r3, #4]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f8d6 	bl	80003f4 <__aeabi_i2d>
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <main+0x530>)
 800124e:	f7ff fa65 	bl	800071c <__aeabi_ddiv>
 8001252:	4603      	mov	r3, r0
 8001254:	460c      	mov	r4, r1
 8001256:	4618      	mov	r0, r3
 8001258:	4621      	mov	r1, r4
 800125a:	a321      	add	r3, pc, #132	; (adr r3, 80012e0 <main+0x520>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff f932 	bl	80004c8 <__aeabi_dmul>
 8001264:	4603      	mov	r3, r0
 8001266:	460c      	mov	r4, r1
 8001268:	4625      	mov	r5, r4
 800126a:	461c      	mov	r4, r3
 800126c:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <main+0x534>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f8bf 	bl	80003f4 <__aeabi_i2d>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4620      	mov	r0, r4
 800127c:	4629      	mov	r1, r5
 800127e:	f7fe ff6b 	bl	8000158 <__aeabi_dsub>
 8001282:	4603      	mov	r3, r0
 8001284:	460c      	mov	r4, r1
 8001286:	4618      	mov	r0, r3
 8001288:	4621      	mov	r1, r4
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001292:	f7ff fa43 	bl	800071c <__aeabi_ddiv>
 8001296:	4603      	mov	r3, r0
 8001298:	460c      	mov	r4, r1
 800129a:	461a      	mov	r2, r3
 800129c:	4623      	mov	r3, r4
 800129e:	a110      	add	r1, pc, #64	; (adr r1, 80012e0 <main+0x520>)
 80012a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012a4:	f7fe ff58 	bl	8000158 <__aeabi_dsub>
 80012a8:	4603      	mov	r3, r0
 80012aa:	460c      	mov	r4, r1
 80012ac:	4618      	mov	r0, r3
 80012ae:	4621      	mov	r1, r4
 80012b0:	f7ff fba4 	bl	80009fc <__aeabi_d2uiz>
 80012b4:	4603      	mov	r3, r0
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <main+0x528>)
 80012ba:	709a      	strb	r2, [r3, #2]
 80012bc:	e002      	b.n	80012c4 <main+0x504>
					}
								else{
									click_report[2] = 0;
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <main+0x528>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	709a      	strb	r2, [r3, #2]
								}
				}
		click_report[3] = 0;			//wheel
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <main+0x528>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	70da      	strb	r2, [r3, #3]
		click_report[4] = 0;			//motion wakeup
 80012ca:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <main+0x528>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	711a      	strb	r2, [r3, #4]

//		HAL_Delay();

		USBD_HID_SendReport(&hUsbDeviceFS,click_report,5);
 80012d0:	2205      	movs	r2, #5
 80012d2:	4905      	ldr	r1, [pc, #20]	; (80012e8 <main+0x528>)
 80012d4:	4808      	ldr	r0, [pc, #32]	; (80012f8 <main+0x538>)
 80012d6:	f005 f941 	bl	800655c <USBD_HID_SendReport>
		click_report[0] = 0; //click
 80012da:	e609      	b.n	8000ef0 <main+0x130>
 80012dc:	f3af 8000 	nop.w
 80012e0:	00000000 	.word	0x00000000
 80012e4:	406fe000 	.word	0x406fe000
 80012e8:	20000180 	.word	0x20000180
 80012ec:	20000304 	.word	0x20000304
 80012f0:	40b00000 	.word	0x40b00000
 80012f4:	2000019c 	.word	0x2000019c
 80012f8:	20000314 	.word	0x20000314

080012fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b094      	sub	sp, #80	; 0x50
 8001300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001302:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001306:	2228      	movs	r2, #40	; 0x28
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f006 fdd8 	bl	8007ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800132c:	2301      	movs	r3, #1
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001330:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133a:	2301      	movs	r3, #1
 800133c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133e:	2302      	movs	r3, #2
 8001340:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001342:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001346:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001348:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800134c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001352:	4618      	mov	r0, r3
 8001354:	f002 fdde 	bl	8003f14 <HAL_RCC_OscConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800135e:	f000 fa05 	bl	800176c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001362:	230f      	movs	r3, #15
 8001364:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001366:	2302      	movs	r3, #2
 8001368:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800136e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001372:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2102      	movs	r1, #2
 800137e:	4618      	mov	r0, r3
 8001380:	f003 f848 	bl	8004414 <HAL_RCC_ClockConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800138a:	f000 f9ef 	bl	800176c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800138e:	2312      	movs	r3, #18
 8001390:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001392:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001396:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	4618      	mov	r0, r3
 80013a0:	f003 f9c0 	bl	8004724 <HAL_RCCEx_PeriphCLKConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80013aa:	f000 f9df 	bl	800176c <Error_Handler>
  }
}
 80013ae:	bf00      	nop
 80013b0:	3750      	adds	r7, #80	; 0x50
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80013c8:	4b3c      	ldr	r3, [pc, #240]	; (80014bc <MX_ADC1_Init+0x104>)
 80013ca:	4a3d      	ldr	r2, [pc, #244]	; (80014c0 <MX_ADC1_Init+0x108>)
 80013cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013ce:	4b3b      	ldr	r3, [pc, #236]	; (80014bc <MX_ADC1_Init+0x104>)
 80013d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013d6:	4b39      	ldr	r3, [pc, #228]	; (80014bc <MX_ADC1_Init+0x104>)
 80013d8:	2201      	movs	r2, #1
 80013da:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013dc:	4b37      	ldr	r3, [pc, #220]	; (80014bc <MX_ADC1_Init+0x104>)
 80013de:	2200      	movs	r2, #0
 80013e0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e2:	4b36      	ldr	r3, [pc, #216]	; (80014bc <MX_ADC1_Init+0x104>)
 80013e4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80013e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ea:	4b34      	ldr	r3, [pc, #208]	; (80014bc <MX_ADC1_Init+0x104>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 80013f0:	4b32      	ldr	r3, [pc, #200]	; (80014bc <MX_ADC1_Init+0x104>)
 80013f2:	2206      	movs	r2, #6
 80013f4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013f6:	4831      	ldr	r0, [pc, #196]	; (80014bc <MX_ADC1_Init+0x104>)
 80013f8:	f000 fc74 	bl	8001ce4 <HAL_ADC_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001402:	f000 f9b3 	bl	800176c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800140a:	2301      	movs	r3, #1
 800140c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800140e:	2307      	movs	r3, #7
 8001410:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	4619      	mov	r1, r3
 8001416:	4829      	ldr	r0, [pc, #164]	; (80014bc <MX_ADC1_Init+0x104>)
 8001418:	f000 ff02 	bl	8002220 <HAL_ADC_ConfigChannel>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001422:	f000 f9a3 	bl	800176c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001426:	2301      	movs	r3, #1
 8001428:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800142a:	2302      	movs	r3, #2
 800142c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	4619      	mov	r1, r3
 8001432:	4822      	ldr	r0, [pc, #136]	; (80014bc <MX_ADC1_Init+0x104>)
 8001434:	f000 fef4 	bl	8002220 <HAL_ADC_ConfigChannel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800143e:	f000 f995 	bl	800176c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001442:	2302      	movs	r3, #2
 8001444:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001446:	2303      	movs	r3, #3
 8001448:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	4619      	mov	r1, r3
 800144e:	481b      	ldr	r0, [pc, #108]	; (80014bc <MX_ADC1_Init+0x104>)
 8001450:	f000 fee6 	bl	8002220 <HAL_ADC_ConfigChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800145a:	f000 f987 	bl	800176c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800145e:	2309      	movs	r3, #9
 8001460:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001462:	2304      	movs	r3, #4
 8001464:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	4619      	mov	r1, r3
 800146a:	4814      	ldr	r0, [pc, #80]	; (80014bc <MX_ADC1_Init+0x104>)
 800146c:	f000 fed8 	bl	8002220 <HAL_ADC_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001476:	f000 f979 	bl	800176c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800147a:	2304      	movs	r3, #4
 800147c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800147e:	2305      	movs	r3, #5
 8001480:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	4619      	mov	r1, r3
 8001486:	480d      	ldr	r0, [pc, #52]	; (80014bc <MX_ADC1_Init+0x104>)
 8001488:	f000 feca 	bl	8002220 <HAL_ADC_ConfigChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001492:	f000 f96b 	bl	800176c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001496:	2305      	movs	r3, #5
 8001498:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800149a:	2306      	movs	r3, #6
 800149c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	4619      	mov	r1, r3
 80014a2:	4806      	ldr	r0, [pc, #24]	; (80014bc <MX_ADC1_Init+0x104>)
 80014a4:	f000 febc 	bl	8002220 <HAL_ADC_ConfigChannel>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80014ae:	f000 f95d 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2000028c 	.word	0x2000028c
 80014c0:	40012400 	.word	0x40012400

080014c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <MX_I2C1_Init+0x50>)
 80014ca:	4a13      	ldr	r2, [pc, #76]	; (8001518 <MX_I2C1_Init+0x54>)
 80014cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_I2C1_Init+0x50>)
 80014d0:	4a12      	ldr	r2, [pc, #72]	; (800151c <MX_I2C1_Init+0x58>)
 80014d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_I2C1_Init+0x50>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_I2C1_Init+0x50>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_I2C1_Init+0x50>)
 80014e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <MX_I2C1_Init+0x50>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_I2C1_Init+0x50>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <MX_I2C1_Init+0x50>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_I2C1_Init+0x50>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <MX_I2C1_Init+0x50>)
 8001502:	f001 fd11 	bl	8002f28 <HAL_I2C_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800150c:	f000 f92e 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000238 	.word	0x20000238
 8001518:	40005400 	.word	0x40005400
 800151c:	000186a0 	.word	0x000186a0

08001520 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001524:	4b17      	ldr	r3, [pc, #92]	; (8001584 <MX_SPI2_Init+0x64>)
 8001526:	4a18      	ldr	r2, [pc, #96]	; (8001588 <MX_SPI2_Init+0x68>)
 8001528:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800152a:	4b16      	ldr	r3, [pc, #88]	; (8001584 <MX_SPI2_Init+0x64>)
 800152c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001530:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <MX_SPI2_Init+0x64>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <MX_SPI2_Init+0x64>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <MX_SPI2_Init+0x64>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <MX_SPI2_Init+0x64>)
 8001546:	2200      	movs	r2, #0
 8001548:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <MX_SPI2_Init+0x64>)
 800154c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001550:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <MX_SPI2_Init+0x64>)
 8001554:	2208      	movs	r2, #8
 8001556:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <MX_SPI2_Init+0x64>)
 800155a:	2200      	movs	r2, #0
 800155c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <MX_SPI2_Init+0x64>)
 8001560:	2200      	movs	r2, #0
 8001562:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001564:	4b07      	ldr	r3, [pc, #28]	; (8001584 <MX_SPI2_Init+0x64>)
 8001566:	2200      	movs	r2, #0
 8001568:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <MX_SPI2_Init+0x64>)
 800156c:	220a      	movs	r2, #10
 800156e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001570:	4804      	ldr	r0, [pc, #16]	; (8001584 <MX_SPI2_Init+0x64>)
 8001572:	f003 f98d 	bl	8004890 <HAL_SPI_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800157c:	f000 f8f6 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200001a0 	.word	0x200001a0
 8001588:	40003800 	.word	0x40003800

0800158c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001592:	f107 0308 	add.w	r3, r7, #8
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a0:	463b      	mov	r3, r7
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <MX_TIM4_Init+0x94>)
 80015aa:	4a1e      	ldr	r2, [pc, #120]	; (8001624 <MX_TIM4_Init+0x98>)
 80015ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80015ae:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <MX_TIM4_Init+0x94>)
 80015b0:	2247      	movs	r2, #71	; 0x47
 80015b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b4:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <MX_TIM4_Init+0x94>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <MX_TIM4_Init+0x94>)
 80015bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <MX_TIM4_Init+0x94>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <MX_TIM4_Init+0x94>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015ce:	4814      	ldr	r0, [pc, #80]	; (8001620 <MX_TIM4_Init+0x94>)
 80015d0:	f003 f9bf 	bl	8004952 <HAL_TIM_Base_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80015da:	f000 f8c7 	bl	800176c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	4619      	mov	r1, r3
 80015ea:	480d      	ldr	r0, [pc, #52]	; (8001620 <MX_TIM4_Init+0x94>)
 80015ec:	f003 fae4 	bl	8004bb8 <HAL_TIM_ConfigClockSource>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80015f6:	f000 f8b9 	bl	800176c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fa:	2300      	movs	r3, #0
 80015fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001602:	463b      	mov	r3, r7
 8001604:	4619      	mov	r1, r3
 8001606:	4806      	ldr	r0, [pc, #24]	; (8001620 <MX_TIM4_Init+0x94>)
 8001608:	f003 fcb2 	bl	8004f70 <HAL_TIMEx_MasterConfigSynchronization>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001612:	f000 f8ab 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200001f8 	.word	0x200001f8
 8001624:	40000800 	.word	0x40000800

08001628 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_DMA_Init+0x38>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <MX_DMA_Init+0x38>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6153      	str	r3, [r2, #20]
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <MX_DMA_Init+0x38>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	200b      	movs	r0, #11
 800164c:	f001 f8b3 	bl	80027b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001650:	200b      	movs	r0, #11
 8001652:	f001 f8cc 	bl	80027ee <HAL_NVIC_EnableIRQ>

}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000

08001664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166a:	f107 0310 	add.w	r3, r7, #16
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001678:	4b38      	ldr	r3, [pc, #224]	; (800175c <MX_GPIO_Init+0xf8>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	4a37      	ldr	r2, [pc, #220]	; (800175c <MX_GPIO_Init+0xf8>)
 800167e:	f043 0310 	orr.w	r3, r3, #16
 8001682:	6193      	str	r3, [r2, #24]
 8001684:	4b35      	ldr	r3, [pc, #212]	; (800175c <MX_GPIO_Init+0xf8>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001690:	4b32      	ldr	r3, [pc, #200]	; (800175c <MX_GPIO_Init+0xf8>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	4a31      	ldr	r2, [pc, #196]	; (800175c <MX_GPIO_Init+0xf8>)
 8001696:	f043 0320 	orr.w	r3, r3, #32
 800169a:	6193      	str	r3, [r2, #24]
 800169c:	4b2f      	ldr	r3, [pc, #188]	; (800175c <MX_GPIO_Init+0xf8>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	f003 0320 	and.w	r3, r3, #32
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a8:	4b2c      	ldr	r3, [pc, #176]	; (800175c <MX_GPIO_Init+0xf8>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	4a2b      	ldr	r2, [pc, #172]	; (800175c <MX_GPIO_Init+0xf8>)
 80016ae:	f043 0304 	orr.w	r3, r3, #4
 80016b2:	6193      	str	r3, [r2, #24]
 80016b4:	4b29      	ldr	r3, [pc, #164]	; (800175c <MX_GPIO_Init+0xf8>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c0:	4b26      	ldr	r3, [pc, #152]	; (800175c <MX_GPIO_Init+0xf8>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	4a25      	ldr	r2, [pc, #148]	; (800175c <MX_GPIO_Init+0xf8>)
 80016c6:	f043 0308 	orr.w	r3, r3, #8
 80016ca:	6193      	str	r3, [r2, #24]
 80016cc:	4b23      	ldr	r3, [pc, #140]	; (800175c <MX_GPIO_Init+0xf8>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016de:	4820      	ldr	r0, [pc, #128]	; (8001760 <MX_GPIO_Init+0xfc>)
 80016e0:	f001 fbe8 	bl	8002eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80016e4:	2200      	movs	r2, #0
 80016e6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80016ea:	481e      	ldr	r0, [pc, #120]	; (8001764 <MX_GPIO_Init+0x100>)
 80016ec:	f001 fbe2 	bl	8002eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f6:	2301      	movs	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2302      	movs	r3, #2
 8001700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001702:	f107 0310 	add.w	r3, r7, #16
 8001706:	4619      	mov	r1, r3
 8001708:	4815      	ldr	r0, [pc, #84]	; (8001760 <MX_GPIO_Init+0xfc>)
 800170a:	f001 fa79 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800170e:	23c0      	movs	r3, #192	; 0xc0
 8001710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <MX_GPIO_Init+0x104>)
 8001714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001716:	2301      	movs	r3, #1
 8001718:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171a:	f107 0310 	add.w	r3, r7, #16
 800171e:	4619      	mov	r1, r3
 8001720:	4810      	ldr	r0, [pc, #64]	; (8001764 <MX_GPIO_Init+0x100>)
 8001722:	f001 fa6d 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001726:	f44f 7340 	mov.w	r3, #768	; 0x300
 800172a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172c:	2301      	movs	r3, #1
 800172e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001734:	2301      	movs	r3, #1
 8001736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	4619      	mov	r1, r3
 800173e:	4809      	ldr	r0, [pc, #36]	; (8001764 <MX_GPIO_Init+0x100>)
 8001740:	f001 fa5e 	bl	8002c00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001744:	2200      	movs	r2, #0
 8001746:	2100      	movs	r1, #0
 8001748:	2017      	movs	r0, #23
 800174a:	f001 f834 	bl	80027b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800174e:	2017      	movs	r0, #23
 8001750:	f001 f84d 	bl	80027ee <HAL_NVIC_EnableIRQ>

}
 8001754:	bf00      	nop
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40021000 	.word	0x40021000
 8001760:	40011000 	.word	0x40011000
 8001764:	40010800 	.word	0x40010800
 8001768:	10110000 	.word	0x10110000

0800176c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_MspInit+0x5c>)
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <HAL_MspInit+0x5c>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6193      	str	r3, [r2, #24]
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_MspInit+0x5c>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_MspInit+0x5c>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <HAL_MspInit+0x5c>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a0:	61d3      	str	r3, [r2, #28]
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_MspInit+0x5c>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_MspInit+0x60>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <HAL_MspInit+0x60>)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ca:	bf00      	nop
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010000 	.word	0x40010000

080017dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0318 	add.w	r3, r7, #24
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a37      	ldr	r2, [pc, #220]	; (80018d4 <HAL_ADC_MspInit+0xf8>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d167      	bne.n	80018cc <HAL_ADC_MspInit+0xf0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017fc:	4b36      	ldr	r3, [pc, #216]	; (80018d8 <HAL_ADC_MspInit+0xfc>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a35      	ldr	r2, [pc, #212]	; (80018d8 <HAL_ADC_MspInit+0xfc>)
 8001802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001806:	6193      	str	r3, [r2, #24]
 8001808:	4b33      	ldr	r3, [pc, #204]	; (80018d8 <HAL_ADC_MspInit+0xfc>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001814:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <HAL_ADC_MspInit+0xfc>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a2f      	ldr	r2, [pc, #188]	; (80018d8 <HAL_ADC_MspInit+0xfc>)
 800181a:	f043 0304 	orr.w	r3, r3, #4
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <HAL_ADC_MspInit+0xfc>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182c:	4b2a      	ldr	r3, [pc, #168]	; (80018d8 <HAL_ADC_MspInit+0xfc>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4a29      	ldr	r2, [pc, #164]	; (80018d8 <HAL_ADC_MspInit+0xfc>)
 8001832:	f043 0308 	orr.w	r3, r3, #8
 8001836:	6193      	str	r3, [r2, #24]
 8001838:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <HAL_ADC_MspInit+0xfc>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 8001844:	2337      	movs	r3, #55	; 0x37
 8001846:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001848:	2303      	movs	r3, #3
 800184a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184c:	f107 0318 	add.w	r3, r7, #24
 8001850:	4619      	mov	r1, r3
 8001852:	4822      	ldr	r0, [pc, #136]	; (80018dc <HAL_ADC_MspInit+0x100>)
 8001854:	f001 f9d4 	bl	8002c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001858:	2303      	movs	r3, #3
 800185a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800185c:	2303      	movs	r3, #3
 800185e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001860:	f107 0318 	add.w	r3, r7, #24
 8001864:	4619      	mov	r1, r3
 8001866:	481e      	ldr	r0, [pc, #120]	; (80018e0 <HAL_ADC_MspInit+0x104>)
 8001868:	f001 f9ca 	bl	8002c00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800186c:	4b1d      	ldr	r3, [pc, #116]	; (80018e4 <HAL_ADC_MspInit+0x108>)
 800186e:	4a1e      	ldr	r2, [pc, #120]	; (80018e8 <HAL_ADC_MspInit+0x10c>)
 8001870:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001872:	4b1c      	ldr	r3, [pc, #112]	; (80018e4 <HAL_ADC_MspInit+0x108>)
 8001874:	2200      	movs	r2, #0
 8001876:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001878:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <HAL_ADC_MspInit+0x108>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800187e:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_ADC_MspInit+0x108>)
 8001880:	2280      	movs	r2, #128	; 0x80
 8001882:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001884:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <HAL_ADC_MspInit+0x108>)
 8001886:	f44f 7280 	mov.w	r2, #256	; 0x100
 800188a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800188c:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <HAL_ADC_MspInit+0x108>)
 800188e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001892:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001894:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <HAL_ADC_MspInit+0x108>)
 8001896:	2220      	movs	r2, #32
 8001898:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_ADC_MspInit+0x108>)
 800189c:	2200      	movs	r2, #0
 800189e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018a0:	4810      	ldr	r0, [pc, #64]	; (80018e4 <HAL_ADC_MspInit+0x108>)
 80018a2:	f000 ffbf 	bl	8002824 <HAL_DMA_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80018ac:	f7ff ff5e 	bl	800176c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a0c      	ldr	r2, [pc, #48]	; (80018e4 <HAL_ADC_MspInit+0x108>)
 80018b4:	621a      	str	r2, [r3, #32]
 80018b6:	4a0b      	ldr	r2, [pc, #44]	; (80018e4 <HAL_ADC_MspInit+0x108>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	2012      	movs	r0, #18
 80018c2:	f000 ff78 	bl	80027b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80018c6:	2012      	movs	r0, #18
 80018c8:	f000 ff91 	bl	80027ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018cc:	bf00      	nop
 80018ce:	3728      	adds	r7, #40	; 0x28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40012400 	.word	0x40012400
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40010800 	.word	0x40010800
 80018e0:	40010c00 	.word	0x40010c00
 80018e4:	200002bc 	.word	0x200002bc
 80018e8:	40020008 	.word	0x40020008

080018ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a1d      	ldr	r2, [pc, #116]	; (800197c <HAL_I2C_MspInit+0x90>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d132      	bne.n	8001972 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190c:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <HAL_I2C_MspInit+0x94>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a1b      	ldr	r2, [pc, #108]	; (8001980 <HAL_I2C_MspInit+0x94>)
 8001912:	f043 0308 	orr.w	r3, r3, #8
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b19      	ldr	r3, [pc, #100]	; (8001980 <HAL_I2C_MspInit+0x94>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001924:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800192a:	2312      	movs	r3, #18
 800192c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800192e:	2303      	movs	r3, #3
 8001930:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4619      	mov	r1, r3
 8001938:	4812      	ldr	r0, [pc, #72]	; (8001984 <HAL_I2C_MspInit+0x98>)
 800193a:	f001 f961 	bl	8002c00 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800193e:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_I2C_MspInit+0x9c>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	f043 0302 	orr.w	r3, r3, #2
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
 8001954:	4a0c      	ldr	r2, [pc, #48]	; (8001988 <HAL_I2C_MspInit+0x9c>)
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_I2C_MspInit+0x94>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	4a08      	ldr	r2, [pc, #32]	; (8001980 <HAL_I2C_MspInit+0x94>)
 8001960:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001964:	61d3      	str	r3, [r2, #28]
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_I2C_MspInit+0x94>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001972:	bf00      	nop
 8001974:	3728      	adds	r7, #40	; 0x28
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40005400 	.word	0x40005400
 8001980:	40021000 	.word	0x40021000
 8001984:	40010c00 	.word	0x40010c00
 8001988:	40010000 	.word	0x40010000

0800198c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 0310 	add.w	r3, r7, #16
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a1c      	ldr	r2, [pc, #112]	; (8001a18 <HAL_SPI_MspInit+0x8c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d131      	bne.n	8001a10 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <HAL_SPI_MspInit+0x90>)
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	4a1a      	ldr	r2, [pc, #104]	; (8001a1c <HAL_SPI_MspInit+0x90>)
 80019b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b6:	61d3      	str	r3, [r2, #28]
 80019b8:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <HAL_SPI_MspInit+0x90>)
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c4:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <HAL_SPI_MspInit+0x90>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <HAL_SPI_MspInit+0x90>)
 80019ca:	f043 0308 	orr.w	r3, r3, #8
 80019ce:	6193      	str	r3, [r2, #24]
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_SPI_MspInit+0x90>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80019dc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80019e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e6:	2303      	movs	r3, #3
 80019e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ea:	f107 0310 	add.w	r3, r7, #16
 80019ee:	4619      	mov	r1, r3
 80019f0:	480b      	ldr	r0, [pc, #44]	; (8001a20 <HAL_SPI_MspInit+0x94>)
 80019f2:	f001 f905 	bl	8002c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80019f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a04:	f107 0310 	add.w	r3, r7, #16
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4805      	ldr	r0, [pc, #20]	; (8001a20 <HAL_SPI_MspInit+0x94>)
 8001a0c:	f001 f8f8 	bl	8002c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a10:	bf00      	nop
 8001a12:	3720      	adds	r7, #32
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40003800 	.word	0x40003800
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40010c00 	.word	0x40010c00

08001a24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0d      	ldr	r2, [pc, #52]	; (8001a68 <HAL_TIM_Base_MspInit+0x44>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d113      	bne.n	8001a5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a36:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <HAL_TIM_Base_MspInit+0x48>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	4a0c      	ldr	r2, [pc, #48]	; (8001a6c <HAL_TIM_Base_MspInit+0x48>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	61d3      	str	r3, [r2, #28]
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <HAL_TIM_Base_MspInit+0x48>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2100      	movs	r1, #0
 8001a52:	201e      	movs	r0, #30
 8001a54:	f000 feaf 	bl	80027b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a58:	201e      	movs	r0, #30
 8001a5a:	f000 fec8 	bl	80027ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40000800 	.word	0x40000800
 8001a6c:	40021000 	.word	0x40021000

08001a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <HardFault_Handler+0x4>

08001a82 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <MemManage_Handler+0x4>

08001a88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <BusFault_Handler+0x4>

08001a8e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <UsageFault_Handler+0x4>

08001a94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001abc:	f000 f8d4 	bl	8001c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <DMA1_Channel1_IRQHandler+0x10>)
 8001aca:	f000 ff65 	bl	8002998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200002bc 	.word	0x200002bc

08001ad8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <ADC1_2_IRQHandler+0x10>)
 8001ade:	f000 fab7 	bl	8002050 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2000028c 	.word	0x2000028c

08001aec <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001af0:	4802      	ldr	r0, [pc, #8]	; (8001afc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001af2:	f001 fc48 	bl	8003386 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200007d8 	.word	0x200007d8

08001b00 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001b04:	2040      	movs	r0, #64	; 0x40
 8001b06:	f001 f9ed 	bl	8002ee4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001b0a:	2080      	movs	r0, #128	; 0x80
 8001b0c:	f001 f9ea 	bl	8002ee4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <TIM4_IRQHandler+0x10>)
 8001b1a:	f002 ff45 	bl	80049a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200001f8 	.word	0x200001f8

08001b28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001b2c:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <SystemInit+0x5c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a14      	ldr	r2, [pc, #80]	; (8001b84 <SystemInit+0x5c>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <SystemInit+0x5c>)
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	4911      	ldr	r1, [pc, #68]	; (8001b84 <SystemInit+0x5c>)
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <SystemInit+0x60>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <SystemInit+0x5c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0e      	ldr	r2, [pc, #56]	; (8001b84 <SystemInit+0x5c>)
 8001b4a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b52:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <SystemInit+0x5c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <SystemInit+0x5c>)
 8001b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b5e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <SystemInit+0x5c>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <SystemInit+0x5c>)
 8001b66:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001b6a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <SystemInit+0x5c>)
 8001b6e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001b72:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <SystemInit+0x64>)
 8001b76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b7a:	609a      	str	r2, [r3, #8]
#endif 
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	40021000 	.word	0x40021000
 8001b88:	f8ff0000 	.word	0xf8ff0000
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b90:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b92:	e003      	b.n	8001b9c <LoopCopyDataInit>

08001b94 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b96:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b98:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b9a:	3104      	adds	r1, #4

08001b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b9c:	480a      	ldr	r0, [pc, #40]	; (8001bc8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001ba0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001ba2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001ba4:	d3f6      	bcc.n	8001b94 <CopyDataInit>
  ldr r2, =_sbss
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001ba8:	e002      	b.n	8001bb0 <LoopFillZerobss>

08001baa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001bac:	f842 3b04 	str.w	r3, [r2], #4

08001bb0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001bb2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001bb4:	d3f9      	bcc.n	8001baa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bb6:	f7ff ffb7 	bl	8001b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bba:	f006 f95d 	bl	8007e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bbe:	f7ff f8ff 	bl	8000dc0 <main>
  bx lr
 8001bc2:	4770      	bx	lr
  ldr r3, =_sidata
 8001bc4:	0800806c 	.word	0x0800806c
  ldr r0, =_sdata
 8001bc8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001bcc:	20000164 	.word	0x20000164
  ldr r2, =_sbss
 8001bd0:	20000164 	.word	0x20000164
  ldr r3, = _ebss
 8001bd4:	20000a44 	.word	0x20000a44

08001bd8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bd8:	e7fe      	b.n	8001bd8 <CAN1_RX1_IRQHandler>
	...

08001bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_Init+0x28>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a07      	ldr	r2, [pc, #28]	; (8001c04 <HAL_Init+0x28>)
 8001be6:	f043 0310 	orr.w	r3, r3, #16
 8001bea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bec:	2003      	movs	r0, #3
 8001bee:	f000 fdd7 	bl	80027a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f000 f808 	bl	8001c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf8:	f7ff fdbe 	bl	8001778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40022000 	.word	0x40022000

08001c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_InitTick+0x54>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_InitTick+0x58>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 fdef 	bl	800280a <HAL_SYSTICK_Config>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00e      	b.n	8001c54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b0f      	cmp	r3, #15
 8001c3a:	d80a      	bhi.n	8001c52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c44:	f000 fdb7 	bl	80027b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c48:	4a06      	ldr	r2, [pc, #24]	; (8001c64 <HAL_InitTick+0x5c>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e000      	b.n	8001c54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	20000008 	.word	0x20000008
 8001c64:	20000004 	.word	0x20000004

08001c68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_IncTick+0x1c>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <HAL_IncTick+0x20>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	4a03      	ldr	r2, [pc, #12]	; (8001c88 <HAL_IncTick+0x20>)
 8001c7a:	6013      	str	r3, [r2, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	20000008 	.word	0x20000008
 8001c88:	20000310 	.word	0x20000310

08001c8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c90:	4b02      	ldr	r3, [pc, #8]	; (8001c9c <HAL_GetTick+0x10>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	20000310 	.word	0x20000310

08001ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca8:	f7ff fff0 	bl	8001c8c <HAL_GetTick>
 8001cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cb8:	d005      	beq.n	8001cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_Delay+0x40>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cc6:	bf00      	nop
 8001cc8:	f7ff ffe0 	bl	8001c8c <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d8f7      	bhi.n	8001cc8 <HAL_Delay+0x28>
  {
  }
}
 8001cd8:	bf00      	nop
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000008 	.word	0x20000008

08001ce4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e0be      	b.n	8001e84 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d109      	bne.n	8001d28 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff fd5a 	bl	80017dc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 fbc3 	bl	80024b4 <ADC_ConversionStop_Disable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f040 8099 	bne.w	8001e72 <HAL_ADC_Init+0x18e>
 8001d40:	7dfb      	ldrb	r3, [r7, #23]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f040 8095 	bne.w	8001e72 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d50:	f023 0302 	bic.w	r3, r3, #2
 8001d54:	f043 0202 	orr.w	r2, r3, #2
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d64:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	7b1b      	ldrb	r3, [r3, #12]
 8001d6a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d6c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d7c:	d003      	beq.n	8001d86 <HAL_ADC_Init+0xa2>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d102      	bne.n	8001d8c <HAL_ADC_Init+0xa8>
 8001d86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d8a:	e000      	b.n	8001d8e <HAL_ADC_Init+0xaa>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7d1b      	ldrb	r3, [r3, #20]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d119      	bne.n	8001dd0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	7b1b      	ldrb	r3, [r3, #12]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d109      	bne.n	8001db8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	3b01      	subs	r3, #1
 8001daa:	035a      	lsls	r2, r3, #13
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	e00b      	b.n	8001dd0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	f043 0220 	orr.w	r2, r3, #32
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	f043 0201 	orr.w	r2, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	4b28      	ldr	r3, [pc, #160]	; (8001e8c <HAL_ADC_Init+0x1a8>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	68b9      	ldr	r1, [r7, #8]
 8001df4:	430b      	orrs	r3, r1
 8001df6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e00:	d003      	beq.n	8001e0a <HAL_ADC_Init+0x126>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d104      	bne.n	8001e14 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	051b      	lsls	r3, r3, #20
 8001e12:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <HAL_ADC_Init+0x1ac>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d10b      	bne.n	8001e50 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e42:	f023 0303 	bic.w	r3, r3, #3
 8001e46:	f043 0201 	orr.w	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e4e:	e018      	b.n	8001e82 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e54:	f023 0312 	bic.w	r3, r3, #18
 8001e58:	f043 0210 	orr.w	r2, r3, #16
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	f043 0201 	orr.w	r2, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e70:	e007      	b.n	8001e82 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	f043 0210 	orr.w	r2, r3, #16
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	ffe1f7fd 	.word	0xffe1f7fd
 8001e90:	ff1f0efe 	.word	0xff1f0efe

08001e94 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a64      	ldr	r2, [pc, #400]	; (800203c <HAL_ADC_Start_DMA+0x1a8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d004      	beq.n	8001eb8 <HAL_ADC_Start_DMA+0x24>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a63      	ldr	r2, [pc, #396]	; (8002040 <HAL_ADC_Start_DMA+0x1ac>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d106      	bne.n	8001ec6 <HAL_ADC_Start_DMA+0x32>
 8001eb8:	4b60      	ldr	r3, [pc, #384]	; (800203c <HAL_ADC_Start_DMA+0x1a8>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f040 80b3 	bne.w	800202c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d101      	bne.n	8001ed4 <HAL_ADC_Start_DMA+0x40>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e0ae      	b.n	8002032 <HAL_ADC_Start_DMA+0x19e>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 fa97 	bl	8002410 <ADC_Enable>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ee6:	7dfb      	ldrb	r3, [r7, #23]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f040 809a 	bne.w	8002022 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ef6:	f023 0301 	bic.w	r3, r3, #1
 8001efa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a4e      	ldr	r2, [pc, #312]	; (8002040 <HAL_ADC_Start_DMA+0x1ac>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d105      	bne.n	8001f18 <HAL_ADC_Start_DMA+0x84>
 8001f0c:	4b4b      	ldr	r3, [pc, #300]	; (800203c <HAL_ADC_Start_DMA+0x1a8>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d115      	bne.n	8001f44 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d026      	beq.n	8001f80 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f42:	e01d      	b.n	8001f80 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f48:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a39      	ldr	r2, [pc, #228]	; (800203c <HAL_ADC_Start_DMA+0x1a8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d004      	beq.n	8001f64 <HAL_ADC_Start_DMA+0xd0>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a38      	ldr	r2, [pc, #224]	; (8002040 <HAL_ADC_Start_DMA+0x1ac>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d10d      	bne.n	8001f80 <HAL_ADC_Start_DMA+0xec>
 8001f64:	4b35      	ldr	r3, [pc, #212]	; (800203c <HAL_ADC_Start_DMA+0x1a8>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d007      	beq.n	8001f80 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d006      	beq.n	8001f9a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f90:	f023 0206 	bic.w	r2, r3, #6
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f98:	e002      	b.n	8001fa0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4a25      	ldr	r2, [pc, #148]	; (8002044 <HAL_ADC_Start_DMA+0x1b0>)
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4a24      	ldr	r2, [pc, #144]	; (8002048 <HAL_ADC_Start_DMA+0x1b4>)
 8001fb6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	4a23      	ldr	r2, [pc, #140]	; (800204c <HAL_ADC_Start_DMA+0x1b8>)
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f06f 0202 	mvn.w	r2, #2
 8001fc8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fd8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6a18      	ldr	r0, [r3, #32]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	334c      	adds	r3, #76	; 0x4c
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f000 fc75 	bl	80028d8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ff8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ffc:	d108      	bne.n	8002010 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800200c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800200e:	e00f      	b.n	8002030 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800201e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002020:	e006      	b.n	8002030 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800202a:	e001      	b.n	8002030 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002030:	7dfb      	ldrb	r3, [r7, #23]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40012400 	.word	0x40012400
 8002040:	40012800 	.word	0x40012800
 8002044:	08002529 	.word	0x08002529
 8002048:	080025a5 	.word	0x080025a5
 800204c:	080025c1 	.word	0x080025c1

08002050 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	2b20      	cmp	r3, #32
 8002064:	d140      	bne.n	80020e8 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b02      	cmp	r3, #2
 8002072:	d139      	bne.n	80020e8 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	2b00      	cmp	r3, #0
 800207e:	d105      	bne.n	800208c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002096:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800209a:	d11d      	bne.n	80020d8 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d119      	bne.n	80020d8 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0220 	bic.w	r2, r2, #32
 80020b2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d105      	bne.n	80020d8 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	f043 0201 	orr.w	r2, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f87c 	bl	80021d6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f06f 0212 	mvn.w	r2, #18
 80020e6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f2:	2b80      	cmp	r3, #128	; 0x80
 80020f4:	d14f      	bne.n	8002196 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b04      	cmp	r3, #4
 8002102:	d148      	bne.n	8002196 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	f003 0310 	and.w	r3, r3, #16
 800210c:	2b00      	cmp	r3, #0
 800210e:	d105      	bne.n	800211c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002114:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002126:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800212a:	d012      	beq.n	8002152 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002136:	2b00      	cmp	r3, #0
 8002138:	d125      	bne.n	8002186 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002144:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002148:	d11d      	bne.n	8002186 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800214e:	2b00      	cmp	r3, #0
 8002150:	d119      	bne.n	8002186 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002160:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002176:	2b00      	cmp	r3, #0
 8002178:	d105      	bne.n	8002186 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217e:	f043 0201 	orr.w	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 fa34 	bl	80025f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f06f 020c 	mvn.w	r2, #12
 8002194:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a0:	2b40      	cmp	r3, #64	; 0x40
 80021a2:	d114      	bne.n	80021ce <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d10d      	bne.n	80021ce <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f81b 	bl	80021fa <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f06f 0201 	mvn.w	r2, #1
 80021cc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
	...

08002220 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002238:	2b01      	cmp	r3, #1
 800223a:	d101      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x20>
 800223c:	2302      	movs	r3, #2
 800223e:	e0dc      	b.n	80023fa <HAL_ADC_ConfigChannel+0x1da>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b06      	cmp	r3, #6
 800224e:	d81c      	bhi.n	800228a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	3b05      	subs	r3, #5
 8002262:	221f      	movs	r2, #31
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	4019      	ands	r1, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	3b05      	subs	r3, #5
 800227c:	fa00 f203 	lsl.w	r2, r0, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	635a      	str	r2, [r3, #52]	; 0x34
 8002288:	e03c      	b.n	8002304 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b0c      	cmp	r3, #12
 8002290:	d81c      	bhi.n	80022cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	3b23      	subs	r3, #35	; 0x23
 80022a4:	221f      	movs	r2, #31
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	4019      	ands	r1, r3
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	3b23      	subs	r3, #35	; 0x23
 80022be:	fa00 f203 	lsl.w	r2, r0, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30
 80022ca:	e01b      	b.n	8002304 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	3b41      	subs	r3, #65	; 0x41
 80022de:	221f      	movs	r2, #31
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	4019      	ands	r1, r3
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	3b41      	subs	r3, #65	; 0x41
 80022f8:	fa00 f203 	lsl.w	r2, r0, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b09      	cmp	r3, #9
 800230a:	d91c      	bls.n	8002346 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68d9      	ldr	r1, [r3, #12]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	4613      	mov	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4413      	add	r3, r2
 800231c:	3b1e      	subs	r3, #30
 800231e:	2207      	movs	r2, #7
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	4019      	ands	r1, r3
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	6898      	ldr	r0, [r3, #8]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	3b1e      	subs	r3, #30
 8002338:	fa00 f203 	lsl.w	r2, r0, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	e019      	b.n	800237a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6919      	ldr	r1, [r3, #16]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4613      	mov	r3, r2
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4413      	add	r3, r2
 8002356:	2207      	movs	r2, #7
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	4019      	ands	r1, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	6898      	ldr	r0, [r3, #8]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4613      	mov	r3, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	4413      	add	r3, r2
 800236e:	fa00 f203 	lsl.w	r2, r0, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b10      	cmp	r3, #16
 8002380:	d003      	beq.n	800238a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002386:	2b11      	cmp	r3, #17
 8002388:	d132      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a1d      	ldr	r2, [pc, #116]	; (8002404 <HAL_ADC_ConfigChannel+0x1e4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d125      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d126      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80023b0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b10      	cmp	r3, #16
 80023b8:	d11a      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023ba:	4b13      	ldr	r3, [pc, #76]	; (8002408 <HAL_ADC_ConfigChannel+0x1e8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a13      	ldr	r2, [pc, #76]	; (800240c <HAL_ADC_ConfigChannel+0x1ec>)
 80023c0:	fba2 2303 	umull	r2, r3, r2, r3
 80023c4:	0c9a      	lsrs	r2, r3, #18
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023d0:	e002      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f9      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x1b2>
 80023de:	e007      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e4:	f043 0220 	orr.w	r2, r3, #32
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr
 8002404:	40012400 	.word	0x40012400
 8002408:	20000000 	.word	0x20000000
 800240c:	431bde83 	.word	0x431bde83

08002410 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b01      	cmp	r3, #1
 800242c:	d039      	beq.n	80024a2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0201 	orr.w	r2, r2, #1
 800243c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800243e:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <ADC_Enable+0x9c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a1b      	ldr	r2, [pc, #108]	; (80024b0 <ADC_Enable+0xa0>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	0c9b      	lsrs	r3, r3, #18
 800244a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800244c:	e002      	b.n	8002454 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	3b01      	subs	r3, #1
 8002452:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f9      	bne.n	800244e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800245a:	f7ff fc17 	bl	8001c8c <HAL_GetTick>
 800245e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002460:	e018      	b.n	8002494 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002462:	f7ff fc13 	bl	8001c8c <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d911      	bls.n	8002494 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	f043 0210 	orr.w	r2, r3, #16
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002480:	f043 0201 	orr.w	r2, r3, #1
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e007      	b.n	80024a4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d1df      	bne.n	8002462 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20000000 	.word	0x20000000
 80024b0:	431bde83 	.word	0x431bde83

080024b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d127      	bne.n	800251e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0201 	bic.w	r2, r2, #1
 80024dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024de:	f7ff fbd5 	bl	8001c8c <HAL_GetTick>
 80024e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024e4:	e014      	b.n	8002510 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024e6:	f7ff fbd1 	bl	8001c8c <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d90d      	bls.n	8002510 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f8:	f043 0210 	orr.w	r2, r3, #16
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	f043 0201 	orr.w	r2, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e007      	b.n	8002520 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b01      	cmp	r3, #1
 800251c:	d0e3      	beq.n	80024e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800253e:	2b00      	cmp	r3, #0
 8002540:	d127      	bne.n	8002592 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002546:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002558:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800255c:	d115      	bne.n	800258a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002562:	2b00      	cmp	r3, #0
 8002564:	d111      	bne.n	800258a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d105      	bne.n	800258a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002582:	f043 0201 	orr.w	r2, r3, #1
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f7ff fe23 	bl	80021d6 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002590:	e004      	b.n	800259c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	4798      	blx	r3
}
 800259c:	bf00      	nop
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f7ff fe18 	bl	80021e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025b8:	bf00      	nop
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	f043 0204 	orr.w	r2, r3, #4
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f7ff fe10 	bl	800220c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025ec:	bf00      	nop
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
	...

08002608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002624:	4013      	ands	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800263a:	4a04      	ldr	r2, [pc, #16]	; (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	60d3      	str	r3, [r2, #12]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <__NVIC_GetPriorityGrouping+0x18>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	f003 0307 	and.w	r3, r3, #7
}
 800265e:	4618      	mov	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	2b00      	cmp	r3, #0
 800267c:	db0b      	blt.n	8002696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	f003 021f 	and.w	r2, r3, #31
 8002684:	4906      	ldr	r1, [pc, #24]	; (80026a0 <__NVIC_EnableIRQ+0x34>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	2001      	movs	r0, #1
 800268e:	fa00 f202 	lsl.w	r2, r0, r2
 8002692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	e000e100 	.word	0xe000e100

080026a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	6039      	str	r1, [r7, #0]
 80026ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	db0a      	blt.n	80026ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	490c      	ldr	r1, [pc, #48]	; (80026f0 <__NVIC_SetPriority+0x4c>)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	0112      	lsls	r2, r2, #4
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	440b      	add	r3, r1
 80026c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026cc:	e00a      	b.n	80026e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	4908      	ldr	r1, [pc, #32]	; (80026f4 <__NVIC_SetPriority+0x50>)
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	3b04      	subs	r3, #4
 80026dc:	0112      	lsls	r2, r2, #4
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	440b      	add	r3, r1
 80026e2:	761a      	strb	r2, [r3, #24]
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	e000e100 	.word	0xe000e100
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b089      	sub	sp, #36	; 0x24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f1c3 0307 	rsb	r3, r3, #7
 8002712:	2b04      	cmp	r3, #4
 8002714:	bf28      	it	cs
 8002716:	2304      	movcs	r3, #4
 8002718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3304      	adds	r3, #4
 800271e:	2b06      	cmp	r3, #6
 8002720:	d902      	bls.n	8002728 <NVIC_EncodePriority+0x30>
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3b03      	subs	r3, #3
 8002726:	e000      	b.n	800272a <NVIC_EncodePriority+0x32>
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43da      	mvns	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	401a      	ands	r2, r3
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002740:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fa01 f303 	lsl.w	r3, r1, r3
 800274a:	43d9      	mvns	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002750:	4313      	orrs	r3, r2
         );
}
 8002752:	4618      	mov	r0, r3
 8002754:	3724      	adds	r7, #36	; 0x24
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3b01      	subs	r3, #1
 8002768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800276c:	d301      	bcc.n	8002772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800276e:	2301      	movs	r3, #1
 8002770:	e00f      	b.n	8002792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002772:	4a0a      	ldr	r2, [pc, #40]	; (800279c <SysTick_Config+0x40>)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800277a:	210f      	movs	r1, #15
 800277c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002780:	f7ff ff90 	bl	80026a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <SysTick_Config+0x40>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800278a:	4b04      	ldr	r3, [pc, #16]	; (800279c <SysTick_Config+0x40>)
 800278c:	2207      	movs	r2, #7
 800278e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	e000e010 	.word	0xe000e010

080027a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff ff2d 	bl	8002608 <__NVIC_SetPriorityGrouping>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b086      	sub	sp, #24
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	4603      	mov	r3, r0
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
 80027c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027c8:	f7ff ff42 	bl	8002650 <__NVIC_GetPriorityGrouping>
 80027cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	6978      	ldr	r0, [r7, #20]
 80027d4:	f7ff ff90 	bl	80026f8 <NVIC_EncodePriority>
 80027d8:	4602      	mov	r2, r0
 80027da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff5f 	bl	80026a4 <__NVIC_SetPriority>
}
 80027e6:	bf00      	nop
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4603      	mov	r3, r0
 80027f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff35 	bl	800266c <__NVIC_EnableIRQ>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff ffa2 	bl	800275c <SysTick_Config>
 8002818:	4603      	mov	r3, r0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e043      	b.n	80028c2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	4b22      	ldr	r3, [pc, #136]	; (80028cc <HAL_DMA_Init+0xa8>)
 8002842:	4413      	add	r3, r2
 8002844:	4a22      	ldr	r2, [pc, #136]	; (80028d0 <HAL_DMA_Init+0xac>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	091b      	lsrs	r3, r3, #4
 800284c:	009a      	lsls	r2, r3, #2
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a1f      	ldr	r2, [pc, #124]	; (80028d4 <HAL_DMA_Init+0xb0>)
 8002856:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800286e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002872:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800287c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002888:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002894:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	bffdfff8 	.word	0xbffdfff8
 80028d0:	cccccccd 	.word	0xcccccccd
 80028d4:	40020000 	.word	0x40020000

080028d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_DMA_Start_IT+0x20>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e04a      	b.n	800298e <HAL_DMA_Start_IT+0xb6>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002906:	2b01      	cmp	r3, #1
 8002908:	d13a      	bne.n	8002980 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2202      	movs	r2, #2
 800290e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0201 	bic.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 f938 	bl	8002ba4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 020e 	orr.w	r2, r2, #14
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	e00f      	b.n	800296e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0204 	bic.w	r2, r2, #4
 800295c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f042 020a 	orr.w	r2, r2, #10
 800296c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f042 0201 	orr.w	r2, r2, #1
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	e005      	b.n	800298c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002988:	2302      	movs	r3, #2
 800298a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800298c:	7dfb      	ldrb	r3, [r7, #23]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	2204      	movs	r2, #4
 80029b6:	409a      	lsls	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d04f      	beq.n	8002a60 <HAL_DMA_IRQHandler+0xc8>
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d04a      	beq.n	8002a60 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0320 	and.w	r3, r3, #32
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d107      	bne.n	80029e8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0204 	bic.w	r2, r2, #4
 80029e6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a66      	ldr	r2, [pc, #408]	; (8002b88 <HAL_DMA_IRQHandler+0x1f0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d029      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xae>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a65      	ldr	r2, [pc, #404]	; (8002b8c <HAL_DMA_IRQHandler+0x1f4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d022      	beq.n	8002a42 <HAL_DMA_IRQHandler+0xaa>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a63      	ldr	r2, [pc, #396]	; (8002b90 <HAL_DMA_IRQHandler+0x1f8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d01a      	beq.n	8002a3c <HAL_DMA_IRQHandler+0xa4>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a62      	ldr	r2, [pc, #392]	; (8002b94 <HAL_DMA_IRQHandler+0x1fc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d012      	beq.n	8002a36 <HAL_DMA_IRQHandler+0x9e>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a60      	ldr	r2, [pc, #384]	; (8002b98 <HAL_DMA_IRQHandler+0x200>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00a      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x98>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a5f      	ldr	r2, [pc, #380]	; (8002b9c <HAL_DMA_IRQHandler+0x204>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d102      	bne.n	8002a2a <HAL_DMA_IRQHandler+0x92>
 8002a24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a28:	e00e      	b.n	8002a48 <HAL_DMA_IRQHandler+0xb0>
 8002a2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a2e:	e00b      	b.n	8002a48 <HAL_DMA_IRQHandler+0xb0>
 8002a30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a34:	e008      	b.n	8002a48 <HAL_DMA_IRQHandler+0xb0>
 8002a36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a3a:	e005      	b.n	8002a48 <HAL_DMA_IRQHandler+0xb0>
 8002a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a40:	e002      	b.n	8002a48 <HAL_DMA_IRQHandler+0xb0>
 8002a42:	2340      	movs	r3, #64	; 0x40
 8002a44:	e000      	b.n	8002a48 <HAL_DMA_IRQHandler+0xb0>
 8002a46:	2304      	movs	r3, #4
 8002a48:	4a55      	ldr	r2, [pc, #340]	; (8002ba0 <HAL_DMA_IRQHandler+0x208>)
 8002a4a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 8094 	beq.w	8002b7e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002a5e:	e08e      	b.n	8002b7e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	2202      	movs	r2, #2
 8002a66:	409a      	lsls	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d056      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x186>
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d051      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0320 	and.w	r3, r3, #32
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10b      	bne.n	8002aa0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 020a 	bic.w	r2, r2, #10
 8002a96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a38      	ldr	r2, [pc, #224]	; (8002b88 <HAL_DMA_IRQHandler+0x1f0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d029      	beq.n	8002afe <HAL_DMA_IRQHandler+0x166>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a37      	ldr	r2, [pc, #220]	; (8002b8c <HAL_DMA_IRQHandler+0x1f4>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d022      	beq.n	8002afa <HAL_DMA_IRQHandler+0x162>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a35      	ldr	r2, [pc, #212]	; (8002b90 <HAL_DMA_IRQHandler+0x1f8>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d01a      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x15c>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a34      	ldr	r2, [pc, #208]	; (8002b94 <HAL_DMA_IRQHandler+0x1fc>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d012      	beq.n	8002aee <HAL_DMA_IRQHandler+0x156>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a32      	ldr	r2, [pc, #200]	; (8002b98 <HAL_DMA_IRQHandler+0x200>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x150>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a31      	ldr	r2, [pc, #196]	; (8002b9c <HAL_DMA_IRQHandler+0x204>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d102      	bne.n	8002ae2 <HAL_DMA_IRQHandler+0x14a>
 8002adc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ae0:	e00e      	b.n	8002b00 <HAL_DMA_IRQHandler+0x168>
 8002ae2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ae6:	e00b      	b.n	8002b00 <HAL_DMA_IRQHandler+0x168>
 8002ae8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aec:	e008      	b.n	8002b00 <HAL_DMA_IRQHandler+0x168>
 8002aee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002af2:	e005      	b.n	8002b00 <HAL_DMA_IRQHandler+0x168>
 8002af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002af8:	e002      	b.n	8002b00 <HAL_DMA_IRQHandler+0x168>
 8002afa:	2320      	movs	r3, #32
 8002afc:	e000      	b.n	8002b00 <HAL_DMA_IRQHandler+0x168>
 8002afe:	2302      	movs	r3, #2
 8002b00:	4a27      	ldr	r2, [pc, #156]	; (8002ba0 <HAL_DMA_IRQHandler+0x208>)
 8002b02:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d034      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b1c:	e02f      	b.n	8002b7e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	2208      	movs	r2, #8
 8002b24:	409a      	lsls	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d028      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x1e8>
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d023      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 020e 	bic.w	r2, r2, #14
 8002b46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b50:	2101      	movs	r1, #1
 8002b52:	fa01 f202 	lsl.w	r2, r1, r2
 8002b56:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d004      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	4798      	blx	r3
    }
  }
  return;
 8002b7e:	bf00      	nop
 8002b80:	bf00      	nop
}
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40020008 	.word	0x40020008
 8002b8c:	4002001c 	.word	0x4002001c
 8002b90:	40020030 	.word	0x40020030
 8002b94:	40020044 	.word	0x40020044
 8002b98:	40020058 	.word	0x40020058
 8002b9c:	4002006c 	.word	0x4002006c
 8002ba0:	40020000 	.word	0x40020000

08002ba4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bba:	2101      	movs	r1, #1
 8002bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b10      	cmp	r3, #16
 8002bd0:	d108      	bne.n	8002be4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002be2:	e007      	b.n	8002bf4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	60da      	str	r2, [r3, #12]
}
 8002bf4:	bf00      	nop
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr
	...

08002c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b08b      	sub	sp, #44	; 0x2c
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c12:	e127      	b.n	8002e64 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c14:	2201      	movs	r2, #1
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	f040 8116 	bne.w	8002e5e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b12      	cmp	r3, #18
 8002c38:	d034      	beq.n	8002ca4 <HAL_GPIO_Init+0xa4>
 8002c3a:	2b12      	cmp	r3, #18
 8002c3c:	d80d      	bhi.n	8002c5a <HAL_GPIO_Init+0x5a>
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d02b      	beq.n	8002c9a <HAL_GPIO_Init+0x9a>
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d804      	bhi.n	8002c50 <HAL_GPIO_Init+0x50>
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d031      	beq.n	8002cae <HAL_GPIO_Init+0xae>
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d01c      	beq.n	8002c88 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c4e:	e048      	b.n	8002ce2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d043      	beq.n	8002cdc <HAL_GPIO_Init+0xdc>
 8002c54:	2b11      	cmp	r3, #17
 8002c56:	d01b      	beq.n	8002c90 <HAL_GPIO_Init+0x90>
          break;
 8002c58:	e043      	b.n	8002ce2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c5a:	4a89      	ldr	r2, [pc, #548]	; (8002e80 <HAL_GPIO_Init+0x280>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d026      	beq.n	8002cae <HAL_GPIO_Init+0xae>
 8002c60:	4a87      	ldr	r2, [pc, #540]	; (8002e80 <HAL_GPIO_Init+0x280>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d806      	bhi.n	8002c74 <HAL_GPIO_Init+0x74>
 8002c66:	4a87      	ldr	r2, [pc, #540]	; (8002e84 <HAL_GPIO_Init+0x284>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d020      	beq.n	8002cae <HAL_GPIO_Init+0xae>
 8002c6c:	4a86      	ldr	r2, [pc, #536]	; (8002e88 <HAL_GPIO_Init+0x288>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d01d      	beq.n	8002cae <HAL_GPIO_Init+0xae>
          break;
 8002c72:	e036      	b.n	8002ce2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c74:	4a85      	ldr	r2, [pc, #532]	; (8002e8c <HAL_GPIO_Init+0x28c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d019      	beq.n	8002cae <HAL_GPIO_Init+0xae>
 8002c7a:	4a85      	ldr	r2, [pc, #532]	; (8002e90 <HAL_GPIO_Init+0x290>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d016      	beq.n	8002cae <HAL_GPIO_Init+0xae>
 8002c80:	4a84      	ldr	r2, [pc, #528]	; (8002e94 <HAL_GPIO_Init+0x294>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d013      	beq.n	8002cae <HAL_GPIO_Init+0xae>
          break;
 8002c86:	e02c      	b.n	8002ce2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	623b      	str	r3, [r7, #32]
          break;
 8002c8e:	e028      	b.n	8002ce2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	3304      	adds	r3, #4
 8002c96:	623b      	str	r3, [r7, #32]
          break;
 8002c98:	e023      	b.n	8002ce2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	3308      	adds	r3, #8
 8002ca0:	623b      	str	r3, [r7, #32]
          break;
 8002ca2:	e01e      	b.n	8002ce2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	330c      	adds	r3, #12
 8002caa:	623b      	str	r3, [r7, #32]
          break;
 8002cac:	e019      	b.n	8002ce2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d102      	bne.n	8002cbc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cb6:	2304      	movs	r3, #4
 8002cb8:	623b      	str	r3, [r7, #32]
          break;
 8002cba:	e012      	b.n	8002ce2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d105      	bne.n	8002cd0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cc4:	2308      	movs	r3, #8
 8002cc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	611a      	str	r2, [r3, #16]
          break;
 8002cce:	e008      	b.n	8002ce2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cd0:	2308      	movs	r3, #8
 8002cd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	615a      	str	r2, [r3, #20]
          break;
 8002cda:	e002      	b.n	8002ce2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	623b      	str	r3, [r7, #32]
          break;
 8002ce0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	2bff      	cmp	r3, #255	; 0xff
 8002ce6:	d801      	bhi.n	8002cec <HAL_GPIO_Init+0xec>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	e001      	b.n	8002cf0 <HAL_GPIO_Init+0xf0>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3304      	adds	r3, #4
 8002cf0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	2bff      	cmp	r3, #255	; 0xff
 8002cf6:	d802      	bhi.n	8002cfe <HAL_GPIO_Init+0xfe>
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	e002      	b.n	8002d04 <HAL_GPIO_Init+0x104>
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	3b08      	subs	r3, #8
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	210f      	movs	r1, #15
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d12:	43db      	mvns	r3, r3
 8002d14:	401a      	ands	r2, r3
 8002d16:	6a39      	ldr	r1, [r7, #32]
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 8096 	beq.w	8002e5e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d32:	4b59      	ldr	r3, [pc, #356]	; (8002e98 <HAL_GPIO_Init+0x298>)
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	4a58      	ldr	r2, [pc, #352]	; (8002e98 <HAL_GPIO_Init+0x298>)
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	6193      	str	r3, [r2, #24]
 8002d3e:	4b56      	ldr	r3, [pc, #344]	; (8002e98 <HAL_GPIO_Init+0x298>)
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	60bb      	str	r3, [r7, #8]
 8002d48:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d4a:	4a54      	ldr	r2, [pc, #336]	; (8002e9c <HAL_GPIO_Init+0x29c>)
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	089b      	lsrs	r3, r3, #2
 8002d50:	3302      	adds	r3, #2
 8002d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d56:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	220f      	movs	r2, #15
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4b      	ldr	r2, [pc, #300]	; (8002ea0 <HAL_GPIO_Init+0x2a0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d013      	beq.n	8002d9e <HAL_GPIO_Init+0x19e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a4a      	ldr	r2, [pc, #296]	; (8002ea4 <HAL_GPIO_Init+0x2a4>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00d      	beq.n	8002d9a <HAL_GPIO_Init+0x19a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a49      	ldr	r2, [pc, #292]	; (8002ea8 <HAL_GPIO_Init+0x2a8>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d007      	beq.n	8002d96 <HAL_GPIO_Init+0x196>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a48      	ldr	r2, [pc, #288]	; (8002eac <HAL_GPIO_Init+0x2ac>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d101      	bne.n	8002d92 <HAL_GPIO_Init+0x192>
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e006      	b.n	8002da0 <HAL_GPIO_Init+0x1a0>
 8002d92:	2304      	movs	r3, #4
 8002d94:	e004      	b.n	8002da0 <HAL_GPIO_Init+0x1a0>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e002      	b.n	8002da0 <HAL_GPIO_Init+0x1a0>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <HAL_GPIO_Init+0x1a0>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da2:	f002 0203 	and.w	r2, r2, #3
 8002da6:	0092      	lsls	r2, r2, #2
 8002da8:	4093      	lsls	r3, r2
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002db0:	493a      	ldr	r1, [pc, #232]	; (8002e9c <HAL_GPIO_Init+0x29c>)
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	089b      	lsrs	r3, r3, #2
 8002db6:	3302      	adds	r3, #2
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d006      	beq.n	8002dd8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002dca:	4b39      	ldr	r3, [pc, #228]	; (8002eb0 <HAL_GPIO_Init+0x2b0>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	4938      	ldr	r1, [pc, #224]	; (8002eb0 <HAL_GPIO_Init+0x2b0>)
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]
 8002dd6:	e006      	b.n	8002de6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002dd8:	4b35      	ldr	r3, [pc, #212]	; (8002eb0 <HAL_GPIO_Init+0x2b0>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	43db      	mvns	r3, r3
 8002de0:	4933      	ldr	r1, [pc, #204]	; (8002eb0 <HAL_GPIO_Init+0x2b0>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d006      	beq.n	8002e00 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002df2:	4b2f      	ldr	r3, [pc, #188]	; (8002eb0 <HAL_GPIO_Init+0x2b0>)
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	492e      	ldr	r1, [pc, #184]	; (8002eb0 <HAL_GPIO_Init+0x2b0>)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	604b      	str	r3, [r1, #4]
 8002dfe:	e006      	b.n	8002e0e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e00:	4b2b      	ldr	r3, [pc, #172]	; (8002eb0 <HAL_GPIO_Init+0x2b0>)
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	4929      	ldr	r1, [pc, #164]	; (8002eb0 <HAL_GPIO_Init+0x2b0>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d006      	beq.n	8002e28 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e1a:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <HAL_GPIO_Init+0x2b0>)
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	4924      	ldr	r1, [pc, #144]	; (8002eb0 <HAL_GPIO_Init+0x2b0>)
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	608b      	str	r3, [r1, #8]
 8002e26:	e006      	b.n	8002e36 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e28:	4b21      	ldr	r3, [pc, #132]	; (8002eb0 <HAL_GPIO_Init+0x2b0>)
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	491f      	ldr	r1, [pc, #124]	; (8002eb0 <HAL_GPIO_Init+0x2b0>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d006      	beq.n	8002e50 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e42:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <HAL_GPIO_Init+0x2b0>)
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	491a      	ldr	r1, [pc, #104]	; (8002eb0 <HAL_GPIO_Init+0x2b0>)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60cb      	str	r3, [r1, #12]
 8002e4e:	e006      	b.n	8002e5e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e50:	4b17      	ldr	r3, [pc, #92]	; (8002eb0 <HAL_GPIO_Init+0x2b0>)
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	4915      	ldr	r1, [pc, #84]	; (8002eb0 <HAL_GPIO_Init+0x2b0>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	3301      	adds	r3, #1
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f47f aed0 	bne.w	8002c14 <HAL_GPIO_Init+0x14>
  }
}
 8002e74:	bf00      	nop
 8002e76:	372c      	adds	r7, #44	; 0x2c
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	10210000 	.word	0x10210000
 8002e84:	10110000 	.word	0x10110000
 8002e88:	10120000 	.word	0x10120000
 8002e8c:	10310000 	.word	0x10310000
 8002e90:	10320000 	.word	0x10320000
 8002e94:	10220000 	.word	0x10220000
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40010000 	.word	0x40010000
 8002ea0:	40010800 	.word	0x40010800
 8002ea4:	40010c00 	.word	0x40010c00
 8002ea8:	40011000 	.word	0x40011000
 8002eac:	40011400 	.word	0x40011400
 8002eb0:	40010400 	.word	0x40010400

08002eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	807b      	strh	r3, [r7, #2]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ec4:	787b      	ldrb	r3, [r7, #1]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eca:	887a      	ldrh	r2, [r7, #2]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ed0:	e003      	b.n	8002eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ed2:	887b      	ldrh	r3, [r7, #2]
 8002ed4:	041a      	lsls	r2, r3, #16
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	611a      	str	r2, [r3, #16]
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002eee:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d006      	beq.n	8002f08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002efa:	4a05      	ldr	r2, [pc, #20]	; (8002f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002efc:	88fb      	ldrh	r3, [r7, #6]
 8002efe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 f806 	bl	8002f14 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f08:	bf00      	nop
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40010400 	.word	0x40010400

08002f14 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e10f      	b.n	800315a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fe fccc 	bl	80018ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2224      	movs	r2, #36	; 0x24
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0201 	bic.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f6c:	f001 fba8 	bl	80046c0 <HAL_RCC_GetPCLK1Freq>
 8002f70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	4a7b      	ldr	r2, [pc, #492]	; (8003164 <HAL_I2C_Init+0x23c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d807      	bhi.n	8002f8c <HAL_I2C_Init+0x64>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4a7a      	ldr	r2, [pc, #488]	; (8003168 <HAL_I2C_Init+0x240>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	bf94      	ite	ls
 8002f84:	2301      	movls	r3, #1
 8002f86:	2300      	movhi	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	e006      	b.n	8002f9a <HAL_I2C_Init+0x72>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4a77      	ldr	r2, [pc, #476]	; (800316c <HAL_I2C_Init+0x244>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	bf94      	ite	ls
 8002f94:	2301      	movls	r3, #1
 8002f96:	2300      	movhi	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e0db      	b.n	800315a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4a72      	ldr	r2, [pc, #456]	; (8003170 <HAL_I2C_Init+0x248>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	0c9b      	lsrs	r3, r3, #18
 8002fac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4a64      	ldr	r2, [pc, #400]	; (8003164 <HAL_I2C_Init+0x23c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d802      	bhi.n	8002fdc <HAL_I2C_Init+0xb4>
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	e009      	b.n	8002ff0 <HAL_I2C_Init+0xc8>
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fe2:	fb02 f303 	mul.w	r3, r2, r3
 8002fe6:	4a63      	ldr	r2, [pc, #396]	; (8003174 <HAL_I2C_Init+0x24c>)
 8002fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fec:	099b      	lsrs	r3, r3, #6
 8002fee:	3301      	adds	r3, #1
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6812      	ldr	r2, [r2, #0]
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003002:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	4956      	ldr	r1, [pc, #344]	; (8003164 <HAL_I2C_Init+0x23c>)
 800300c:	428b      	cmp	r3, r1
 800300e:	d80d      	bhi.n	800302c <HAL_I2C_Init+0x104>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1e59      	subs	r1, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	fbb1 f3f3 	udiv	r3, r1, r3
 800301e:	3301      	adds	r3, #1
 8003020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003024:	2b04      	cmp	r3, #4
 8003026:	bf38      	it	cc
 8003028:	2304      	movcc	r3, #4
 800302a:	e04f      	b.n	80030cc <HAL_I2C_Init+0x1a4>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d111      	bne.n	8003058 <HAL_I2C_Init+0x130>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	1e58      	subs	r0, r3, #1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6859      	ldr	r1, [r3, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	440b      	add	r3, r1
 8003042:	fbb0 f3f3 	udiv	r3, r0, r3
 8003046:	3301      	adds	r3, #1
 8003048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800304c:	2b00      	cmp	r3, #0
 800304e:	bf0c      	ite	eq
 8003050:	2301      	moveq	r3, #1
 8003052:	2300      	movne	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	e012      	b.n	800307e <HAL_I2C_Init+0x156>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	1e58      	subs	r0, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6859      	ldr	r1, [r3, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	0099      	lsls	r1, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	fbb0 f3f3 	udiv	r3, r0, r3
 800306e:	3301      	adds	r3, #1
 8003070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003074:	2b00      	cmp	r3, #0
 8003076:	bf0c      	ite	eq
 8003078:	2301      	moveq	r3, #1
 800307a:	2300      	movne	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_I2C_Init+0x15e>
 8003082:	2301      	movs	r3, #1
 8003084:	e022      	b.n	80030cc <HAL_I2C_Init+0x1a4>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10e      	bne.n	80030ac <HAL_I2C_Init+0x184>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1e58      	subs	r0, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6859      	ldr	r1, [r3, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	440b      	add	r3, r1
 800309c:	fbb0 f3f3 	udiv	r3, r0, r3
 80030a0:	3301      	adds	r3, #1
 80030a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030aa:	e00f      	b.n	80030cc <HAL_I2C_Init+0x1a4>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1e58      	subs	r0, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6859      	ldr	r1, [r3, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	0099      	lsls	r1, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c2:	3301      	adds	r3, #1
 80030c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	6809      	ldr	r1, [r1, #0]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69da      	ldr	r2, [r3, #28]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6911      	ldr	r1, [r2, #16]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	68d2      	ldr	r2, [r2, #12]
 8003106:	4311      	orrs	r1, r2
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6812      	ldr	r2, [r2, #0]
 800310c:	430b      	orrs	r3, r1
 800310e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695a      	ldr	r2, [r3, #20]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	000186a0 	.word	0x000186a0
 8003168:	001e847f 	.word	0x001e847f
 800316c:	003d08ff 	.word	0x003d08ff
 8003170:	431bde83 	.word	0x431bde83
 8003174:	10624dd3 	.word	0x10624dd3

08003178 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800317a:	b08b      	sub	sp, #44	; 0x2c
 800317c:	af06      	add	r7, sp, #24
 800317e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e0d3      	b.n	8003332 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f004 fbf2 	bl	8007988 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2203      	movs	r2, #3
 80031a8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f001 ff5a 	bl	800506a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	687e      	ldr	r6, [r7, #4]
 80031be:	466d      	mov	r5, sp
 80031c0:	f106 0410 	add.w	r4, r6, #16
 80031c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	602b      	str	r3, [r5, #0]
 80031cc:	1d33      	adds	r3, r6, #4
 80031ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031d0:	6838      	ldr	r0, [r7, #0]
 80031d2:	f001 ff23 	bl	800501c <USB_CoreInit>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0a4      	b.n	8003332 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2100      	movs	r1, #0
 80031ee:	4618      	mov	r0, r3
 80031f0:	f001 ff57 	bl	80050a2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f4:	2300      	movs	r3, #0
 80031f6:	73fb      	strb	r3, [r7, #15]
 80031f8:	e035      	b.n	8003266 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	015b      	lsls	r3, r3, #5
 8003200:	4413      	add	r3, r2
 8003202:	3329      	adds	r3, #41	; 0x29
 8003204:	2201      	movs	r2, #1
 8003206:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	015b      	lsls	r3, r3, #5
 800320e:	4413      	add	r3, r2
 8003210:	3328      	adds	r3, #40	; 0x28
 8003212:	7bfa      	ldrb	r2, [r7, #15]
 8003214:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003216:	7bfb      	ldrb	r3, [r7, #15]
 8003218:	7bfa      	ldrb	r2, [r7, #15]
 800321a:	b291      	uxth	r1, r2
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	015b      	lsls	r3, r3, #5
 8003220:	4413      	add	r3, r2
 8003222:	3336      	adds	r3, #54	; 0x36
 8003224:	460a      	mov	r2, r1
 8003226:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	015b      	lsls	r3, r3, #5
 800322e:	4413      	add	r3, r2
 8003230:	332b      	adds	r3, #43	; 0x2b
 8003232:	2200      	movs	r2, #0
 8003234:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	015b      	lsls	r3, r3, #5
 800323c:	4413      	add	r3, r2
 800323e:	3338      	adds	r3, #56	; 0x38
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	015b      	lsls	r3, r3, #5
 800324a:	4413      	add	r3, r2
 800324c:	333c      	adds	r3, #60	; 0x3c
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003252:	7bfb      	ldrb	r3, [r7, #15]
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	3302      	adds	r3, #2
 8003258:	015b      	lsls	r3, r3, #5
 800325a:	4413      	add	r3, r2
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	3301      	adds	r3, #1
 8003264:	73fb      	strb	r3, [r7, #15]
 8003266:	7bfa      	ldrb	r2, [r7, #15]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	429a      	cmp	r2, r3
 800326e:	d3c4      	bcc.n	80031fa <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003270:	2300      	movs	r3, #0
 8003272:	73fb      	strb	r3, [r7, #15]
 8003274:	e031      	b.n	80032da <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003276:	7bfb      	ldrb	r3, [r7, #15]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	015b      	lsls	r3, r3, #5
 800327c:	4413      	add	r3, r2
 800327e:	f203 1329 	addw	r3, r3, #297	; 0x129
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003286:	7bfb      	ldrb	r3, [r7, #15]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	015b      	lsls	r3, r3, #5
 800328c:	4413      	add	r3, r2
 800328e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003292:	7bfa      	ldrb	r2, [r7, #15]
 8003294:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	015b      	lsls	r3, r3, #5
 800329c:	4413      	add	r3, r2
 800329e:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80032a2:	2200      	movs	r2, #0
 80032a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	015b      	lsls	r3, r3, #5
 80032ac:	4413      	add	r3, r2
 80032ae:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	015b      	lsls	r3, r3, #5
 80032bc:	4413      	add	r3, r2
 80032be:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	330a      	adds	r3, #10
 80032cc:	015b      	lsls	r3, r3, #5
 80032ce:	4413      	add	r3, r2
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	3301      	adds	r3, #1
 80032d8:	73fb      	strb	r3, [r7, #15]
 80032da:	7bfa      	ldrb	r2, [r7, #15]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d3c8      	bcc.n	8003276 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	603b      	str	r3, [r7, #0]
 80032ea:	687e      	ldr	r6, [r7, #4]
 80032ec:	466d      	mov	r5, sp
 80032ee:	f106 0410 	add.w	r4, r6, #16
 80032f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032f6:	6823      	ldr	r3, [r4, #0]
 80032f8:	602b      	str	r3, [r5, #0]
 80032fa:	1d33      	adds	r3, r6, #4
 80032fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032fe:	6838      	ldr	r0, [r7, #0]
 8003300:	f001 fedb 	bl	80050ba <USB_DevInit>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d005      	beq.n	8003316 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2202      	movs	r2, #2
 800330e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e00d      	b.n	8003332 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f002 ff19 	bl	8006162 <USB_DevDisconnect>

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800333a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_PCD_Start+0x16>
 800334c:	2302      	movs	r3, #2
 800334e:	e016      	b.n	800337e <HAL_PCD_Start+0x44>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003358:	2101      	movs	r1, #1
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f004 fd55 	bl	8007e0a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f002 fef2 	bl	800614e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f001 fe64 	bl	800503c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f002 feef 	bl	8006176 <USB_ReadInterrupts>
 8003398:	4603      	mov	r3, r0
 800339a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800339e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033a2:	d102      	bne.n	80033aa <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 fadf 	bl	8003968 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f002 fee1 	bl	8006176 <USB_ReadInterrupts>
 80033b4:	4603      	mov	r3, r0
 80033b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033be:	d112      	bne.n	80033e6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d2:	b292      	uxth	r2, r2
 80033d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f004 fb4a 	bl	8007a72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80033de:	2100      	movs	r1, #0
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f8de 	bl	80035a2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f002 fec3 	bl	8006176 <USB_ReadInterrupts>
 80033f0:	4603      	mov	r3, r0
 80033f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033fa:	d10b      	bne.n	8003414 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003404:	b29a      	uxth	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800340e:	b292      	uxth	r2, r2
 8003410:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f002 feac 	bl	8006176 <USB_ReadInterrupts>
 800341e:	4603      	mov	r3, r0
 8003420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003428:	d10b      	bne.n	8003442 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003432:	b29a      	uxth	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800343c:	b292      	uxth	r2, r2
 800343e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f002 fe95 	bl	8006176 <USB_ReadInterrupts>
 800344c:	4603      	mov	r3, r0
 800344e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003456:	d126      	bne.n	80034a6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003460:	b29a      	uxth	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0204 	bic.w	r2, r2, #4
 800346a:	b292      	uxth	r2, r2
 800346c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003478:	b29a      	uxth	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0208 	bic.w	r2, r2, #8
 8003482:	b292      	uxth	r2, r2
 8003484:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f004 fb2b 	bl	8007ae4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003496:	b29a      	uxth	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034a0:	b292      	uxth	r2, r2
 80034a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f002 fe63 	bl	8006176 <USB_ReadInterrupts>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ba:	d13d      	bne.n	8003538 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0208 	orr.w	r2, r2, #8
 80034ce:	b292      	uxth	r2, r2
 80034d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034dc:	b29a      	uxth	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034e6:	b292      	uxth	r2, r2
 80034e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0204 	orr.w	r2, r2, #4
 80034fe:	b292      	uxth	r2, r2
 8003500:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f002 fe34 	bl	8006176 <USB_ReadInterrupts>
 800350e:	4603      	mov	r3, r0
 8003510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003518:	d10b      	bne.n	8003532 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003522:	b29a      	uxth	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800352c:	b292      	uxth	r2, r2
 800352e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f004 fabc 	bl	8007ab0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f002 fe1a 	bl	8006176 <USB_ReadInterrupts>
 8003542:	4603      	mov	r3, r0
 8003544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800354c:	d10e      	bne.n	800356c <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003556:	b29a      	uxth	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003560:	b292      	uxth	r2, r2
 8003562:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f004 fa75 	bl	8007a56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f002 fe00 	bl	8006176 <USB_ReadInterrupts>
 8003576:	4603      	mov	r3, r0
 8003578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003580:	d10b      	bne.n	800359a <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800358a:	b29a      	uxth	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003594:	b292      	uxth	r2, r2
 8003596:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	460b      	mov	r3, r1
 80035ac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_PCD_SetAddress+0x1a>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e013      	b.n	80035e4 <HAL_PCD_SetAddress+0x42>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	78fa      	ldrb	r2, [r7, #3]
 80035c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	4611      	mov	r1, r2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f002 fda7 	bl	8006128 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	4608      	mov	r0, r1
 80035f6:	4611      	mov	r1, r2
 80035f8:	461a      	mov	r2, r3
 80035fa:	4603      	mov	r3, r0
 80035fc:	70fb      	strb	r3, [r7, #3]
 80035fe:	460b      	mov	r3, r1
 8003600:	803b      	strh	r3, [r7, #0]
 8003602:	4613      	mov	r3, r2
 8003604:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800360a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800360e:	2b00      	cmp	r3, #0
 8003610:	da0b      	bge.n	800362a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	015b      	lsls	r3, r3, #5
 800361a:	3328      	adds	r3, #40	; 0x28
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	4413      	add	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	705a      	strb	r2, [r3, #1]
 8003628:	e00b      	b.n	8003642 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800362a:	78fb      	ldrb	r3, [r7, #3]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	015b      	lsls	r3, r3, #5
 8003632:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	4413      	add	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	b2da      	uxtb	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800364e:	883a      	ldrh	r2, [r7, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	78ba      	ldrb	r2, [r7, #2]
 8003658:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	785b      	ldrb	r3, [r3, #1]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d004      	beq.n	800366c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800366c:	78bb      	ldrb	r3, [r7, #2]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d102      	bne.n	8003678 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <HAL_PCD_EP_Open+0x9a>
 8003682:	2302      	movs	r3, #2
 8003684:	e00e      	b.n	80036a4 <HAL_PCD_EP_Open+0xb8>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68f9      	ldr	r1, [r7, #12]
 8003694:	4618      	mov	r0, r3
 8003696:	f001 fd35 	bl	8005104 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80036a2:	7afb      	ldrb	r3, [r7, #11]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	da0b      	bge.n	80036d8 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	015b      	lsls	r3, r3, #5
 80036c8:	3328      	adds	r3, #40	; 0x28
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	4413      	add	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2201      	movs	r2, #1
 80036d4:	705a      	strb	r2, [r3, #1]
 80036d6:	e00b      	b.n	80036f0 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	015b      	lsls	r3, r3, #5
 80036e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	4413      	add	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003702:	2b01      	cmp	r3, #1
 8003704:	d101      	bne.n	800370a <HAL_PCD_EP_Close+0x5e>
 8003706:	2302      	movs	r3, #2
 8003708:	e00e      	b.n	8003728 <HAL_PCD_EP_Close+0x7c>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68f9      	ldr	r1, [r7, #12]
 8003718:	4618      	mov	r0, r3
 800371a:	f001 ffe1 	bl	80056e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	607a      	str	r2, [r7, #4]
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	460b      	mov	r3, r1
 800373e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003740:	7afb      	ldrb	r3, [r7, #11]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	015b      	lsls	r3, r3, #5
 8003748:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4413      	add	r3, r2
 8003750:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2200      	movs	r2, #0
 8003762:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2200      	movs	r2, #0
 8003768:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800376a:	7afb      	ldrb	r3, [r7, #11]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	b2da      	uxtb	r2, r3
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003776:	7afb      	ldrb	r3, [r7, #11]
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	2b00      	cmp	r3, #0
 800377e:	d106      	bne.n	800378e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6979      	ldr	r1, [r7, #20]
 8003786:	4618      	mov	r0, r3
 8003788:	f002 f940 	bl	8005a0c <USB_EPStartXfer>
 800378c:	e005      	b.n	800379a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6979      	ldr	r1, [r7, #20]
 8003794:	4618      	mov	r0, r3
 8003796:	f002 f939 	bl	8005a0c <USB_EPStartXfer>
  }

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	607a      	str	r2, [r7, #4]
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	460b      	mov	r3, r1
 80037b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037b4:	7afb      	ldrb	r3, [r7, #11]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	015b      	lsls	r3, r3, #5
 80037bc:	3328      	adds	r3, #40	; 0x28
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4413      	add	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	2200      	movs	r2, #0
 80037d4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2201      	movs	r2, #1
 80037da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037dc:	7afb      	ldrb	r3, [r7, #11]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037e8:	7afb      	ldrb	r3, [r7, #11]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6979      	ldr	r1, [r7, #20]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f002 f907 	bl	8005a0c <USB_EPStartXfer>
 80037fe:	e005      	b.n	800380c <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6979      	ldr	r1, [r7, #20]
 8003806:	4618      	mov	r0, r3
 8003808:	f002 f900 	bl	8005a0c <USB_EPStartXfer>
  }

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b084      	sub	sp, #16
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	460b      	mov	r3, r1
 8003820:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003822:	78fb      	ldrb	r3, [r7, #3]
 8003824:	f003 0207 	and.w	r2, r3, #7
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	429a      	cmp	r2, r3
 800382e:	d901      	bls.n	8003834 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e046      	b.n	80038c2 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003834:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003838:	2b00      	cmp	r3, #0
 800383a:	da0b      	bge.n	8003854 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	015b      	lsls	r3, r3, #5
 8003844:	3328      	adds	r3, #40	; 0x28
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	4413      	add	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2201      	movs	r2, #1
 8003850:	705a      	strb	r2, [r3, #1]
 8003852:	e009      	b.n	8003868 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	015b      	lsls	r3, r3, #5
 8003858:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	4413      	add	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2201      	movs	r2, #1
 800386c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	b2da      	uxtb	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_PCD_EP_SetStall+0x72>
 8003884:	2302      	movs	r3, #2
 8003886:	e01c      	b.n	80038c2 <HAL_PCD_EP_SetStall+0xac>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68f9      	ldr	r1, [r7, #12]
 8003896:	4618      	mov	r0, r3
 8003898:	f002 fb70 	bl	8005f7c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800389c:	78fb      	ldrb	r3, [r7, #3]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d108      	bne.n	80038b8 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80038b0:	4619      	mov	r1, r3
 80038b2:	4610      	mov	r0, r2
 80038b4:	f002 fc6e 	bl	8006194 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b084      	sub	sp, #16
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	460b      	mov	r3, r1
 80038d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80038d6:	78fb      	ldrb	r3, [r7, #3]
 80038d8:	f003 020f 	and.w	r2, r3, #15
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d901      	bls.n	80038e8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e03a      	b.n	800395e <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	da0b      	bge.n	8003908 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	015b      	lsls	r3, r3, #5
 80038f8:	3328      	adds	r3, #40	; 0x28
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	4413      	add	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2201      	movs	r2, #1
 8003904:	705a      	strb	r2, [r3, #1]
 8003906:	e00b      	b.n	8003920 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	015b      	lsls	r3, r3, #5
 8003910:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	4413      	add	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003926:	78fb      	ldrb	r3, [r7, #3]
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	b2da      	uxtb	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_PCD_EP_ClrStall+0x76>
 800393c:	2302      	movs	r3, #2
 800393e:	e00e      	b.n	800395e <HAL_PCD_EP_ClrStall+0x94>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68f9      	ldr	r1, [r7, #12]
 800394e:	4618      	mov	r0, r3
 8003950:	f002 fb56 	bl	8006000 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003968:	b590      	push	{r4, r7, lr}
 800396a:	b089      	sub	sp, #36	; 0x24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003970:	e282      	b.n	8003e78 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800397a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800397c:	8afb      	ldrh	r3, [r7, #22]
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f003 030f 	and.w	r3, r3, #15
 8003984:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8003986:	7d7b      	ldrb	r3, [r7, #21]
 8003988:	2b00      	cmp	r3, #0
 800398a:	f040 8142 	bne.w	8003c12 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800398e:	8afb      	ldrh	r3, [r7, #22]
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b00      	cmp	r3, #0
 8003996:	d151      	bne.n	8003a3c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80039a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a8:	b29c      	uxth	r4, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80039b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3328      	adds	r3, #40	; 0x28
 80039be:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	4413      	add	r3, r2
 80039d4:	3302      	adds	r3, #2
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	695a      	ldr	r2, [r3, #20]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	441a      	add	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80039fa:	2100      	movs	r1, #0
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f004 f813 	bl	8007a28 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 8234 	beq.w	8003e78 <PCD_EP_ISR_Handler+0x510>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f040 822f 	bne.w	8003e78 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	b292      	uxth	r2, r2
 8003a2e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003a3a:	e21d      	b.n	8003e78 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003a42:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003a4c:	8a7b      	ldrh	r3, [r7, #18]
 8003a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d033      	beq.n	8003abe <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	461a      	mov	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	4413      	add	r3, r2
 8003a6a:	3306      	adds	r3, #6
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6812      	ldr	r2, [r2, #0]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	f002 fbcc 	bl	8006232 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	b29c      	uxth	r4, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003ab2:	b292      	uxth	r2, r2
 8003ab4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f003 ff8c 	bl	80079d4 <HAL_PCD_SetupStageCallback>
 8003abc:	e1dc      	b.n	8003e78 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003abe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f280 81d8 	bge.w	8003e78 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	b29c      	uxth	r4, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003ae0:	b292      	uxth	r2, r2
 8003ae2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	461a      	mov	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4413      	add	r3, r2
 8003af8:	3306      	adds	r3, #6
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6812      	ldr	r2, [r2, #0]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d019      	beq.n	8003b4c <PCD_EP_ISR_Handler+0x1e4>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d015      	beq.n	8003b4c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6818      	ldr	r0, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6959      	ldr	r1, [r3, #20]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	f002 fb7e 	bl	8006232 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	441a      	add	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003b44:	2100      	movs	r1, #0
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f003 ff56 	bl	80079f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	461c      	mov	r4, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	441c      	add	r4, r3
 8003b5e:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8003b62:	461c      	mov	r4, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10e      	bne.n	8003b8a <PCD_EP_ISR_Handler+0x222>
 8003b6c:	8823      	ldrh	r3, [r4, #0]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	8023      	strh	r3, [r4, #0]
 8003b78:	8823      	ldrh	r3, [r4, #0]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	8023      	strh	r3, [r4, #0]
 8003b88:	e02d      	b.n	8003be6 <PCD_EP_ISR_Handler+0x27e>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	2b3e      	cmp	r3, #62	; 0x3e
 8003b90:	d812      	bhi.n	8003bb8 <PCD_EP_ISR_Handler+0x250>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	085b      	lsrs	r3, r3, #1
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <PCD_EP_ISR_Handler+0x244>
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	61bb      	str	r3, [r7, #24]
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	029b      	lsls	r3, r3, #10
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	8023      	strh	r3, [r4, #0]
 8003bb6:	e016      	b.n	8003be6 <PCD_EP_ISR_Handler+0x27e>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	095b      	lsrs	r3, r3, #5
 8003bbe:	61bb      	str	r3, [r7, #24]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d102      	bne.n	8003bd2 <PCD_EP_ISR_Handler+0x26a>
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	61bb      	str	r3, [r7, #24]
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	029b      	lsls	r3, r3, #10
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf6:	b29c      	uxth	r4, r3
 8003bf8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003bfc:	b29c      	uxth	r4, r3
 8003bfe:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003c02:	b29c      	uxth	r4, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	4ba2      	ldr	r3, [pc, #648]	; (8003e94 <PCD_EP_ISR_Handler+0x52c>)
 8003c0a:	4323      	orrs	r3, r4
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	8013      	strh	r3, [r2, #0]
 8003c10:	e132      	b.n	8003e78 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	7d7b      	ldrb	r3, [r7, #21]
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003c22:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f280 80d1 	bge.w	8003dce <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	461a      	mov	r2, r3
 8003c32:	7d7b      	ldrb	r3, [r7, #21]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c40:	4013      	ands	r3, r2
 8003c42:	b29c      	uxth	r4, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	7d7b      	ldrb	r3, [r7, #21]
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003c54:	b292      	uxth	r2, r2
 8003c56:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003c58:	7d7b      	ldrb	r3, [r7, #21]
 8003c5a:	015b      	lsls	r3, r3, #5
 8003c5c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	4413      	add	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	7b1b      	ldrb	r3, [r3, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d121      	bne.n	8003cb2 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	461a      	mov	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	4413      	add	r3, r2
 8003c82:	3306      	adds	r3, #6
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6812      	ldr	r2, [r2, #0]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c96:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003c98:	8bfb      	ldrh	r3, [r7, #30]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d072      	beq.n	8003d84 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6959      	ldr	r1, [r3, #20]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	88da      	ldrh	r2, [r3, #6]
 8003caa:	8bfb      	ldrh	r3, [r7, #30]
 8003cac:	f002 fac1 	bl	8006232 <USB_ReadPMA>
 8003cb0:	e068      	b.n	8003d84 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4413      	add	r3, r2
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d021      	beq.n	8003d10 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	4413      	add	r3, r2
 8003ce0:	3302      	adds	r3, #2
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cf4:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003cf6:	8bfb      	ldrh	r3, [r7, #30]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d02a      	beq.n	8003d52 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6818      	ldr	r0, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6959      	ldr	r1, [r3, #20]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	891a      	ldrh	r2, [r3, #8]
 8003d08:	8bfb      	ldrh	r3, [r7, #30]
 8003d0a:	f002 fa92 	bl	8006232 <USB_ReadPMA>
 8003d0e:	e020      	b.n	8003d52 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	4413      	add	r3, r2
 8003d24:	3306      	adds	r3, #6
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d38:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003d3a:	8bfb      	ldrh	r3, [r7, #30]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6818      	ldr	r0, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6959      	ldr	r1, [r3, #20]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	895a      	ldrh	r2, [r3, #10]
 8003d4c:	8bfb      	ldrh	r3, [r7, #30]
 8003d4e:	f002 fa70 	bl	8006232 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d6c:	b29c      	uxth	r4, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	441a      	add	r2, r3
 8003d7c:	4b46      	ldr	r3, [pc, #280]	; (8003e98 <PCD_EP_ISR_Handler+0x530>)
 8003d7e:	4323      	orrs	r3, r4
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	69da      	ldr	r2, [r3, #28]
 8003d88:	8bfb      	ldrh	r3, [r7, #30]
 8003d8a:	441a      	add	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	695a      	ldr	r2, [r3, #20]
 8003d94:	8bfb      	ldrh	r3, [r7, #30]
 8003d96:	441a      	add	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d004      	beq.n	8003dae <PCD_EP_ISR_Handler+0x446>
 8003da4:	8bfa      	ldrh	r2, [r7, #30]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d206      	bcs.n	8003dbc <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	4619      	mov	r1, r3
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f003 fe1f 	bl	80079f8 <HAL_PCD_DataOutStageCallback>
 8003dba:	e008      	b.n	8003dce <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	7819      	ldrb	r1, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	695a      	ldr	r2, [r3, #20]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7ff fcb1 	bl	8003730 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003dce:	8a7b      	ldrh	r3, [r7, #18]
 8003dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d04f      	beq.n	8003e78 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8003dd8:	7d7b      	ldrb	r3, [r7, #21]
 8003dda:	015b      	lsls	r3, r3, #5
 8003ddc:	3328      	adds	r3, #40	; 0x28
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	4413      	add	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	7d7b      	ldrb	r3, [r7, #21]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfc:	b29c      	uxth	r4, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	7d7b      	ldrb	r3, [r7, #21]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	441a      	add	r2, r3
 8003e0a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003e0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	461a      	mov	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	4413      	add	r3, r2
 8003e2a:	3302      	adds	r3, #2
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6812      	ldr	r2, [r2, #0]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	695a      	ldr	r2, [r3, #20]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	441a      	add	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d106      	bne.n	8003e66 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f003 fde2 	bl	8007a28 <HAL_PCD_DataInStageCallback>
 8003e64:	e008      	b.n	8003e78 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	7819      	ldrb	r1, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	695a      	ldr	r2, [r3, #20]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff fc96 	bl	80037a4 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	b21b      	sxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f6ff ad74 	blt.w	8003972 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3724      	adds	r7, #36	; 0x24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd90      	pop	{r4, r7, pc}
 8003e94:	ffff8080 	.word	0xffff8080
 8003e98:	ffff80c0 	.word	0xffff80c0

08003e9c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	607b      	str	r3, [r7, #4]
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	817b      	strh	r3, [r7, #10]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003eae:	897b      	ldrh	r3, [r7, #10]
 8003eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d008      	beq.n	8003ecc <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eba:	897b      	ldrh	r3, [r7, #10]
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	015b      	lsls	r3, r3, #5
 8003ec2:	3328      	adds	r3, #40	; 0x28
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]
 8003eca:	e006      	b.n	8003eda <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ecc:	897b      	ldrh	r3, [r7, #10]
 8003ece:	015b      	lsls	r3, r3, #5
 8003ed0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003eda:	893b      	ldrh	r3, [r7, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d107      	bne.n	8003ef0 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	80da      	strh	r2, [r3, #6]
 8003eee:	e00b      	b.n	8003f08 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	0c1b      	lsrs	r3, r3, #16
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	371c      	adds	r7, #28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr

08003f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e26c      	b.n	8004400 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 8087 	beq.w	8004042 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f34:	4b92      	ldr	r3, [pc, #584]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 030c 	and.w	r3, r3, #12
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d00c      	beq.n	8003f5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f40:	4b8f      	ldr	r3, [pc, #572]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 030c 	and.w	r3, r3, #12
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d112      	bne.n	8003f72 <HAL_RCC_OscConfig+0x5e>
 8003f4c:	4b8c      	ldr	r3, [pc, #560]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f58:	d10b      	bne.n	8003f72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f5a:	4b89      	ldr	r3, [pc, #548]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d06c      	beq.n	8004040 <HAL_RCC_OscConfig+0x12c>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d168      	bne.n	8004040 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e246      	b.n	8004400 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f7a:	d106      	bne.n	8003f8a <HAL_RCC_OscConfig+0x76>
 8003f7c:	4b80      	ldr	r3, [pc, #512]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a7f      	ldr	r2, [pc, #508]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	e02e      	b.n	8003fe8 <HAL_RCC_OscConfig+0xd4>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10c      	bne.n	8003fac <HAL_RCC_OscConfig+0x98>
 8003f92:	4b7b      	ldr	r3, [pc, #492]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a7a      	ldr	r2, [pc, #488]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	4b78      	ldr	r3, [pc, #480]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a77      	ldr	r2, [pc, #476]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	e01d      	b.n	8003fe8 <HAL_RCC_OscConfig+0xd4>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_RCC_OscConfig+0xbc>
 8003fb6:	4b72      	ldr	r3, [pc, #456]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a71      	ldr	r2, [pc, #452]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	4b6f      	ldr	r3, [pc, #444]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a6e      	ldr	r2, [pc, #440]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	e00b      	b.n	8003fe8 <HAL_RCC_OscConfig+0xd4>
 8003fd0:	4b6b      	ldr	r3, [pc, #428]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a6a      	ldr	r2, [pc, #424]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	4b68      	ldr	r3, [pc, #416]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a67      	ldr	r2, [pc, #412]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fe6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d013      	beq.n	8004018 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff0:	f7fd fe4c 	bl	8001c8c <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff8:	f7fd fe48 	bl	8001c8c <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b64      	cmp	r3, #100	; 0x64
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e1fa      	b.n	8004400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400a:	4b5d      	ldr	r3, [pc, #372]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0f0      	beq.n	8003ff8 <HAL_RCC_OscConfig+0xe4>
 8004016:	e014      	b.n	8004042 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004018:	f7fd fe38 	bl	8001c8c <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004020:	f7fd fe34 	bl	8001c8c <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b64      	cmp	r3, #100	; 0x64
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e1e6      	b.n	8004400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004032:	4b53      	ldr	r3, [pc, #332]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x10c>
 800403e:	e000      	b.n	8004042 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d063      	beq.n	8004116 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800404e:	4b4c      	ldr	r3, [pc, #304]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f003 030c 	and.w	r3, r3, #12
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00b      	beq.n	8004072 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800405a:	4b49      	ldr	r3, [pc, #292]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f003 030c 	and.w	r3, r3, #12
 8004062:	2b08      	cmp	r3, #8
 8004064:	d11c      	bne.n	80040a0 <HAL_RCC_OscConfig+0x18c>
 8004066:	4b46      	ldr	r3, [pc, #280]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d116      	bne.n	80040a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004072:	4b43      	ldr	r3, [pc, #268]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d005      	beq.n	800408a <HAL_RCC_OscConfig+0x176>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d001      	beq.n	800408a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e1ba      	b.n	8004400 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800408a:	4b3d      	ldr	r3, [pc, #244]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	4939      	ldr	r1, [pc, #228]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 800409a:	4313      	orrs	r3, r2
 800409c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409e:	e03a      	b.n	8004116 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d020      	beq.n	80040ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a8:	4b36      	ldr	r3, [pc, #216]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ae:	f7fd fded 	bl	8001c8c <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040b6:	f7fd fde9 	bl	8001c8c <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e19b      	b.n	8004400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c8:	4b2d      	ldr	r3, [pc, #180]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0f0      	beq.n	80040b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d4:	4b2a      	ldr	r3, [pc, #168]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	4927      	ldr	r1, [pc, #156]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	600b      	str	r3, [r1, #0]
 80040e8:	e015      	b.n	8004116 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ea:	4b26      	ldr	r3, [pc, #152]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f0:	f7fd fdcc 	bl	8001c8c <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f8:	f7fd fdc8 	bl	8001c8c <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e17a      	b.n	8004400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800410a:	4b1d      	ldr	r3, [pc, #116]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	2b00      	cmp	r3, #0
 8004120:	d03a      	beq.n	8004198 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d019      	beq.n	800415e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800412a:	4b17      	ldr	r3, [pc, #92]	; (8004188 <HAL_RCC_OscConfig+0x274>)
 800412c:	2201      	movs	r2, #1
 800412e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004130:	f7fd fdac 	bl	8001c8c <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004138:	f7fd fda8 	bl	8001c8c <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e15a      	b.n	8004400 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414a:	4b0d      	ldr	r3, [pc, #52]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0f0      	beq.n	8004138 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004156:	2001      	movs	r0, #1
 8004158:	f000 fac6 	bl	80046e8 <RCC_Delay>
 800415c:	e01c      	b.n	8004198 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800415e:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <HAL_RCC_OscConfig+0x274>)
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004164:	f7fd fd92 	bl	8001c8c <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800416a:	e00f      	b.n	800418c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800416c:	f7fd fd8e 	bl	8001c8c <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d908      	bls.n	800418c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e140      	b.n	8004400 <HAL_RCC_OscConfig+0x4ec>
 800417e:	bf00      	nop
 8004180:	40021000 	.word	0x40021000
 8004184:	42420000 	.word	0x42420000
 8004188:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800418c:	4b9e      	ldr	r3, [pc, #632]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e9      	bne.n	800416c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 80a6 	beq.w	80042f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041a6:	2300      	movs	r3, #0
 80041a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041aa:	4b97      	ldr	r3, [pc, #604]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10d      	bne.n	80041d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041b6:	4b94      	ldr	r3, [pc, #592]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	4a93      	ldr	r2, [pc, #588]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 80041bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c0:	61d3      	str	r3, [r2, #28]
 80041c2:	4b91      	ldr	r3, [pc, #580]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ca:	60bb      	str	r3, [r7, #8]
 80041cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ce:	2301      	movs	r3, #1
 80041d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d2:	4b8e      	ldr	r3, [pc, #568]	; (800440c <HAL_RCC_OscConfig+0x4f8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d118      	bne.n	8004210 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041de:	4b8b      	ldr	r3, [pc, #556]	; (800440c <HAL_RCC_OscConfig+0x4f8>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a8a      	ldr	r2, [pc, #552]	; (800440c <HAL_RCC_OscConfig+0x4f8>)
 80041e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ea:	f7fd fd4f 	bl	8001c8c <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f2:	f7fd fd4b 	bl	8001c8c <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b64      	cmp	r3, #100	; 0x64
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e0fd      	b.n	8004400 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004204:	4b81      	ldr	r3, [pc, #516]	; (800440c <HAL_RCC_OscConfig+0x4f8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0f0      	beq.n	80041f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d106      	bne.n	8004226 <HAL_RCC_OscConfig+0x312>
 8004218:	4b7b      	ldr	r3, [pc, #492]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	4a7a      	ldr	r2, [pc, #488]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	6213      	str	r3, [r2, #32]
 8004224:	e02d      	b.n	8004282 <HAL_RCC_OscConfig+0x36e>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10c      	bne.n	8004248 <HAL_RCC_OscConfig+0x334>
 800422e:	4b76      	ldr	r3, [pc, #472]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	4a75      	ldr	r2, [pc, #468]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 8004234:	f023 0301 	bic.w	r3, r3, #1
 8004238:	6213      	str	r3, [r2, #32]
 800423a:	4b73      	ldr	r3, [pc, #460]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	4a72      	ldr	r2, [pc, #456]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 8004240:	f023 0304 	bic.w	r3, r3, #4
 8004244:	6213      	str	r3, [r2, #32]
 8004246:	e01c      	b.n	8004282 <HAL_RCC_OscConfig+0x36e>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	2b05      	cmp	r3, #5
 800424e:	d10c      	bne.n	800426a <HAL_RCC_OscConfig+0x356>
 8004250:	4b6d      	ldr	r3, [pc, #436]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	4a6c      	ldr	r2, [pc, #432]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 8004256:	f043 0304 	orr.w	r3, r3, #4
 800425a:	6213      	str	r3, [r2, #32]
 800425c:	4b6a      	ldr	r3, [pc, #424]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	4a69      	ldr	r2, [pc, #420]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	6213      	str	r3, [r2, #32]
 8004268:	e00b      	b.n	8004282 <HAL_RCC_OscConfig+0x36e>
 800426a:	4b67      	ldr	r3, [pc, #412]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	4a66      	ldr	r2, [pc, #408]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 8004270:	f023 0301 	bic.w	r3, r3, #1
 8004274:	6213      	str	r3, [r2, #32]
 8004276:	4b64      	ldr	r3, [pc, #400]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	4a63      	ldr	r2, [pc, #396]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 800427c:	f023 0304 	bic.w	r3, r3, #4
 8004280:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d015      	beq.n	80042b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800428a:	f7fd fcff 	bl	8001c8c <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004290:	e00a      	b.n	80042a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004292:	f7fd fcfb 	bl	8001c8c <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e0ab      	b.n	8004400 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a8:	4b57      	ldr	r3, [pc, #348]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0ee      	beq.n	8004292 <HAL_RCC_OscConfig+0x37e>
 80042b4:	e014      	b.n	80042e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b6:	f7fd fce9 	bl	8001c8c <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042bc:	e00a      	b.n	80042d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042be:	f7fd fce5 	bl	8001c8c <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e095      	b.n	8004400 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d4:	4b4c      	ldr	r3, [pc, #304]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1ee      	bne.n	80042be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d105      	bne.n	80042f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e6:	4b48      	ldr	r3, [pc, #288]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	4a47      	ldr	r2, [pc, #284]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 80042ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 8081 	beq.w	80043fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042fc:	4b42      	ldr	r3, [pc, #264]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f003 030c 	and.w	r3, r3, #12
 8004304:	2b08      	cmp	r3, #8
 8004306:	d061      	beq.n	80043cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	2b02      	cmp	r3, #2
 800430e:	d146      	bne.n	800439e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004310:	4b3f      	ldr	r3, [pc, #252]	; (8004410 <HAL_RCC_OscConfig+0x4fc>)
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004316:	f7fd fcb9 	bl	8001c8c <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800431e:	f7fd fcb5 	bl	8001c8c <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e067      	b.n	8004400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004330:	4b35      	ldr	r3, [pc, #212]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1f0      	bne.n	800431e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004344:	d108      	bne.n	8004358 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004346:	4b30      	ldr	r3, [pc, #192]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	492d      	ldr	r1, [pc, #180]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 8004354:	4313      	orrs	r3, r2
 8004356:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004358:	4b2b      	ldr	r3, [pc, #172]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a19      	ldr	r1, [r3, #32]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	430b      	orrs	r3, r1
 800436a:	4927      	ldr	r1, [pc, #156]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 800436c:	4313      	orrs	r3, r2
 800436e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004370:	4b27      	ldr	r3, [pc, #156]	; (8004410 <HAL_RCC_OscConfig+0x4fc>)
 8004372:	2201      	movs	r2, #1
 8004374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004376:	f7fd fc89 	bl	8001c8c <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800437e:	f7fd fc85 	bl	8001c8c <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e037      	b.n	8004400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004390:	4b1d      	ldr	r3, [pc, #116]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0f0      	beq.n	800437e <HAL_RCC_OscConfig+0x46a>
 800439c:	e02f      	b.n	80043fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439e:	4b1c      	ldr	r3, [pc, #112]	; (8004410 <HAL_RCC_OscConfig+0x4fc>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a4:	f7fd fc72 	bl	8001c8c <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ac:	f7fd fc6e 	bl	8001c8c <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e020      	b.n	8004400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043be:	4b12      	ldr	r3, [pc, #72]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0x498>
 80043ca:	e018      	b.n	80043fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e013      	b.n	8004400 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_RCC_OscConfig+0x4f4>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d106      	bne.n	80043fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d001      	beq.n	80043fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40021000 	.word	0x40021000
 800440c:	40007000 	.word	0x40007000
 8004410:	42420060 	.word	0x42420060

08004414 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e0d0      	b.n	80045ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004428:	4b6a      	ldr	r3, [pc, #424]	; (80045d4 <HAL_RCC_ClockConfig+0x1c0>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d910      	bls.n	8004458 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004436:	4b67      	ldr	r3, [pc, #412]	; (80045d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f023 0207 	bic.w	r2, r3, #7
 800443e:	4965      	ldr	r1, [pc, #404]	; (80045d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	4313      	orrs	r3, r2
 8004444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004446:	4b63      	ldr	r3, [pc, #396]	; (80045d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	429a      	cmp	r2, r3
 8004452:	d001      	beq.n	8004458 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0b8      	b.n	80045ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d020      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	d005      	beq.n	800447c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004470:	4b59      	ldr	r3, [pc, #356]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	4a58      	ldr	r2, [pc, #352]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004476:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800447a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0308 	and.w	r3, r3, #8
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004488:	4b53      	ldr	r3, [pc, #332]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	4a52      	ldr	r2, [pc, #328]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 800448e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004492:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004494:	4b50      	ldr	r3, [pc, #320]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	494d      	ldr	r1, [pc, #308]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d040      	beq.n	8004534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d107      	bne.n	80044ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ba:	4b47      	ldr	r3, [pc, #284]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d115      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e07f      	b.n	80045ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d107      	bne.n	80044e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d2:	4b41      	ldr	r3, [pc, #260]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d109      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e073      	b.n	80045ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e2:	4b3d      	ldr	r3, [pc, #244]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e06b      	b.n	80045ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044f2:	4b39      	ldr	r3, [pc, #228]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f023 0203 	bic.w	r2, r3, #3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	4936      	ldr	r1, [pc, #216]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004500:	4313      	orrs	r3, r2
 8004502:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004504:	f7fd fbc2 	bl	8001c8c <HAL_GetTick>
 8004508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450a:	e00a      	b.n	8004522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800450c:	f7fd fbbe 	bl	8001c8c <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f241 3288 	movw	r2, #5000	; 0x1388
 800451a:	4293      	cmp	r3, r2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e053      	b.n	80045ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004522:	4b2d      	ldr	r3, [pc, #180]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f003 020c 	and.w	r2, r3, #12
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	429a      	cmp	r2, r3
 8004532:	d1eb      	bne.n	800450c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004534:	4b27      	ldr	r3, [pc, #156]	; (80045d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	429a      	cmp	r2, r3
 8004540:	d210      	bcs.n	8004564 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004542:	4b24      	ldr	r3, [pc, #144]	; (80045d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f023 0207 	bic.w	r2, r3, #7
 800454a:	4922      	ldr	r1, [pc, #136]	; (80045d4 <HAL_RCC_ClockConfig+0x1c0>)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	4313      	orrs	r3, r2
 8004550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004552:	4b20      	ldr	r3, [pc, #128]	; (80045d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d001      	beq.n	8004564 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e032      	b.n	80045ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	d008      	beq.n	8004582 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004570:	4b19      	ldr	r3, [pc, #100]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	4916      	ldr	r1, [pc, #88]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 800457e:	4313      	orrs	r3, r2
 8004580:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d009      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800458e:	4b12      	ldr	r3, [pc, #72]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	490e      	ldr	r1, [pc, #56]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045a2:	f000 f821 	bl	80045e8 <HAL_RCC_GetSysClockFreq>
 80045a6:	4601      	mov	r1, r0
 80045a8:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	091b      	lsrs	r3, r3, #4
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	4a0a      	ldr	r2, [pc, #40]	; (80045dc <HAL_RCC_ClockConfig+0x1c8>)
 80045b4:	5cd3      	ldrb	r3, [r2, r3]
 80045b6:	fa21 f303 	lsr.w	r3, r1, r3
 80045ba:	4a09      	ldr	r2, [pc, #36]	; (80045e0 <HAL_RCC_ClockConfig+0x1cc>)
 80045bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045be:	4b09      	ldr	r3, [pc, #36]	; (80045e4 <HAL_RCC_ClockConfig+0x1d0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fd fb20 	bl	8001c08 <HAL_InitTick>

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40022000 	.word	0x40022000
 80045d8:	40021000 	.word	0x40021000
 80045dc:	0800804c 	.word	0x0800804c
 80045e0:	20000000 	.word	0x20000000
 80045e4:	20000004 	.word	0x20000004

080045e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e8:	b490      	push	{r4, r7}
 80045ea:	b08a      	sub	sp, #40	; 0x28
 80045ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80045ee:	4b2a      	ldr	r3, [pc, #168]	; (8004698 <HAL_RCC_GetSysClockFreq+0xb0>)
 80045f0:	1d3c      	adds	r4, r7, #4
 80045f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80045f8:	4b28      	ldr	r3, [pc, #160]	; (800469c <HAL_RCC_GetSysClockFreq+0xb4>)
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	61fb      	str	r3, [r7, #28]
 8004602:	2300      	movs	r3, #0
 8004604:	61bb      	str	r3, [r7, #24]
 8004606:	2300      	movs	r3, #0
 8004608:	627b      	str	r3, [r7, #36]	; 0x24
 800460a:	2300      	movs	r3, #0
 800460c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004612:	4b23      	ldr	r3, [pc, #140]	; (80046a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	f003 030c 	and.w	r3, r3, #12
 800461e:	2b04      	cmp	r3, #4
 8004620:	d002      	beq.n	8004628 <HAL_RCC_GetSysClockFreq+0x40>
 8004622:	2b08      	cmp	r3, #8
 8004624:	d003      	beq.n	800462e <HAL_RCC_GetSysClockFreq+0x46>
 8004626:	e02d      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004628:	4b1e      	ldr	r3, [pc, #120]	; (80046a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800462a:	623b      	str	r3, [r7, #32]
      break;
 800462c:	e02d      	b.n	800468a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	0c9b      	lsrs	r3, r3, #18
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800463a:	4413      	add	r3, r2
 800463c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004640:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d013      	beq.n	8004674 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800464c:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	0c5b      	lsrs	r3, r3, #17
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800465a:	4413      	add	r3, r2
 800465c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004660:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	4a0f      	ldr	r2, [pc, #60]	; (80046a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004666:	fb02 f203 	mul.w	r2, r2, r3
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004670:	627b      	str	r3, [r7, #36]	; 0x24
 8004672:	e004      	b.n	800467e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	4a0c      	ldr	r2, [pc, #48]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004678:	fb02 f303 	mul.w	r3, r2, r3
 800467c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	623b      	str	r3, [r7, #32]
      break;
 8004682:	e002      	b.n	800468a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004684:	4b07      	ldr	r3, [pc, #28]	; (80046a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004686:	623b      	str	r3, [r7, #32]
      break;
 8004688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800468a:	6a3b      	ldr	r3, [r7, #32]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3728      	adds	r7, #40	; 0x28
 8004690:	46bd      	mov	sp, r7
 8004692:	bc90      	pop	{r4, r7}
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	08007ff0 	.word	0x08007ff0
 800469c:	08008000 	.word	0x08008000
 80046a0:	40021000 	.word	0x40021000
 80046a4:	007a1200 	.word	0x007a1200
 80046a8:	003d0900 	.word	0x003d0900

080046ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046b0:	4b02      	ldr	r3, [pc, #8]	; (80046bc <HAL_RCC_GetHCLKFreq+0x10>)
 80046b2:	681b      	ldr	r3, [r3, #0]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr
 80046bc:	20000000 	.word	0x20000000

080046c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046c4:	f7ff fff2 	bl	80046ac <HAL_RCC_GetHCLKFreq>
 80046c8:	4601      	mov	r1, r0
 80046ca:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	0a1b      	lsrs	r3, r3, #8
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	4a03      	ldr	r2, [pc, #12]	; (80046e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046d6:	5cd3      	ldrb	r3, [r2, r3]
 80046d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046dc:	4618      	mov	r0, r3
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40021000 	.word	0x40021000
 80046e4:	0800805c 	.word	0x0800805c

080046e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046f0:	4b0a      	ldr	r3, [pc, #40]	; (800471c <RCC_Delay+0x34>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a0a      	ldr	r2, [pc, #40]	; (8004720 <RCC_Delay+0x38>)
 80046f6:	fba2 2303 	umull	r2, r3, r2, r3
 80046fa:	0a5b      	lsrs	r3, r3, #9
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	fb02 f303 	mul.w	r3, r2, r3
 8004702:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004704:	bf00      	nop
  }
  while (Delay --);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1e5a      	subs	r2, r3, #1
 800470a:	60fa      	str	r2, [r7, #12]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1f9      	bne.n	8004704 <RCC_Delay+0x1c>
}
 8004710:	bf00      	nop
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	20000000 	.word	0x20000000
 8004720:	10624dd3 	.word	0x10624dd3

08004724 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d07d      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004740:	2300      	movs	r3, #0
 8004742:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004744:	4b4f      	ldr	r3, [pc, #316]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10d      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004750:	4b4c      	ldr	r3, [pc, #304]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	4a4b      	ldr	r2, [pc, #300]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800475a:	61d3      	str	r3, [r2, #28]
 800475c:	4b49      	ldr	r3, [pc, #292]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004764:	60bb      	str	r3, [r7, #8]
 8004766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004768:	2301      	movs	r3, #1
 800476a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476c:	4b46      	ldr	r3, [pc, #280]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004774:	2b00      	cmp	r3, #0
 8004776:	d118      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004778:	4b43      	ldr	r3, [pc, #268]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a42      	ldr	r2, [pc, #264]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800477e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004782:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004784:	f7fd fa82 	bl	8001c8c <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478a:	e008      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478c:	f7fd fa7e 	bl	8001c8c <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b64      	cmp	r3, #100	; 0x64
 8004798:	d901      	bls.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e06d      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479e:	4b3a      	ldr	r3, [pc, #232]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f0      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047aa:	4b36      	ldr	r3, [pc, #216]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d02e      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d027      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047c8:	4b2e      	ldr	r3, [pc, #184]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047d2:	4b2e      	ldr	r3, [pc, #184]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047d4:	2201      	movs	r2, #1
 80047d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047d8:	4b2c      	ldr	r3, [pc, #176]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047de:	4a29      	ldr	r2, [pc, #164]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d014      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ee:	f7fd fa4d 	bl	8001c8c <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f4:	e00a      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f6:	f7fd fa49 	bl	8001c8c <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	f241 3288 	movw	r2, #5000	; 0x1388
 8004804:	4293      	cmp	r3, r2
 8004806:	d901      	bls.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e036      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800480c:	4b1d      	ldr	r3, [pc, #116]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0ee      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004818:	4b1a      	ldr	r3, [pc, #104]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	4917      	ldr	r1, [pc, #92]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004826:	4313      	orrs	r3, r2
 8004828:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800482a:	7dfb      	ldrb	r3, [r7, #23]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d105      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004830:	4b14      	ldr	r3, [pc, #80]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	4a13      	ldr	r2, [pc, #76]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800483a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d008      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004848:	4b0e      	ldr	r3, [pc, #56]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	490b      	ldr	r1, [pc, #44]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004856:	4313      	orrs	r3, r2
 8004858:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0310 	and.w	r3, r3, #16
 8004862:	2b00      	cmp	r3, #0
 8004864:	d008      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004866:	4b07      	ldr	r3, [pc, #28]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	4904      	ldr	r1, [pc, #16]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004874:	4313      	orrs	r3, r2
 8004876:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3718      	adds	r7, #24
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40021000 	.word	0x40021000
 8004888:	40007000 	.word	0x40007000
 800488c:	42420440 	.word	0x42420440

08004890 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e053      	b.n	800494a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d106      	bne.n	80048c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7fd f865 	bl	800198c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2202      	movs	r2, #2
 80048c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	ea42 0103 	orr.w	r1, r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	0c1a      	lsrs	r2, r3, #16
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f002 0204 	and.w	r2, r2, #4
 8004928:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69da      	ldr	r2, [r3, #28]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004938:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b082      	sub	sp, #8
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e01d      	b.n	80049a0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d106      	bne.n	800497e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7fd f853 	bl	8001a24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2202      	movs	r2, #2
 8004982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3304      	adds	r3, #4
 800498e:	4619      	mov	r1, r3
 8004990:	4610      	mov	r0, r2
 8004992:	f000 f9f5 	bl	8004d80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d122      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d11b      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0202 	mvn.w	r2, #2
 80049d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f9ad 	bl	8004d4a <HAL_TIM_IC_CaptureCallback>
 80049f0:	e005      	b.n	80049fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f9a0 	bl	8004d38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 f9af 	bl	8004d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d122      	bne.n	8004a58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d11b      	bne.n	8004a58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0204 	mvn.w	r2, #4
 8004a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f983 	bl	8004d4a <HAL_TIM_IC_CaptureCallback>
 8004a44:	e005      	b.n	8004a52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f976 	bl	8004d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f985 	bl	8004d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d122      	bne.n	8004aac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f003 0308 	and.w	r3, r3, #8
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d11b      	bne.n	8004aac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f06f 0208 	mvn.w	r2, #8
 8004a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2204      	movs	r2, #4
 8004a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f959 	bl	8004d4a <HAL_TIM_IC_CaptureCallback>
 8004a98:	e005      	b.n	8004aa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f94c 	bl	8004d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f95b 	bl	8004d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0310 	and.w	r3, r3, #16
 8004ab6:	2b10      	cmp	r3, #16
 8004ab8:	d122      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d11b      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0210 	mvn.w	r2, #16
 8004ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2208      	movs	r2, #8
 8004ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f92f 	bl	8004d4a <HAL_TIM_IC_CaptureCallback>
 8004aec:	e005      	b.n	8004afa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f922 	bl	8004d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f931 	bl	8004d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d10e      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d107      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0201 	mvn.w	r2, #1
 8004b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f8fd 	bl	8004d26 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b36:	2b80      	cmp	r3, #128	; 0x80
 8004b38:	d10e      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b44:	2b80      	cmp	r3, #128	; 0x80
 8004b46:	d107      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fa59 	bl	800500a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b62:	2b40      	cmp	r3, #64	; 0x40
 8004b64:	d10e      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b70:	2b40      	cmp	r3, #64	; 0x40
 8004b72:	d107      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f8f5 	bl	8004d6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	d10e      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f003 0320 	and.w	r3, r3, #32
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	d107      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0220 	mvn.w	r2, #32
 8004ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fa24 	bl	8004ff8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bb0:	bf00      	nop
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d101      	bne.n	8004bd0 <HAL_TIM_ConfigClockSource+0x18>
 8004bcc:	2302      	movs	r3, #2
 8004bce:	e0a6      	b.n	8004d1e <HAL_TIM_ConfigClockSource+0x166>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bf6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b40      	cmp	r3, #64	; 0x40
 8004c06:	d067      	beq.n	8004cd8 <HAL_TIM_ConfigClockSource+0x120>
 8004c08:	2b40      	cmp	r3, #64	; 0x40
 8004c0a:	d80b      	bhi.n	8004c24 <HAL_TIM_ConfigClockSource+0x6c>
 8004c0c:	2b10      	cmp	r3, #16
 8004c0e:	d073      	beq.n	8004cf8 <HAL_TIM_ConfigClockSource+0x140>
 8004c10:	2b10      	cmp	r3, #16
 8004c12:	d802      	bhi.n	8004c1a <HAL_TIM_ConfigClockSource+0x62>
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d06f      	beq.n	8004cf8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004c18:	e078      	b.n	8004d0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c1a:	2b20      	cmp	r3, #32
 8004c1c:	d06c      	beq.n	8004cf8 <HAL_TIM_ConfigClockSource+0x140>
 8004c1e:	2b30      	cmp	r3, #48	; 0x30
 8004c20:	d06a      	beq.n	8004cf8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004c22:	e073      	b.n	8004d0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c24:	2b70      	cmp	r3, #112	; 0x70
 8004c26:	d00d      	beq.n	8004c44 <HAL_TIM_ConfigClockSource+0x8c>
 8004c28:	2b70      	cmp	r3, #112	; 0x70
 8004c2a:	d804      	bhi.n	8004c36 <HAL_TIM_ConfigClockSource+0x7e>
 8004c2c:	2b50      	cmp	r3, #80	; 0x50
 8004c2e:	d033      	beq.n	8004c98 <HAL_TIM_ConfigClockSource+0xe0>
 8004c30:	2b60      	cmp	r3, #96	; 0x60
 8004c32:	d041      	beq.n	8004cb8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004c34:	e06a      	b.n	8004d0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c3a:	d066      	beq.n	8004d0a <HAL_TIM_ConfigClockSource+0x152>
 8004c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c40:	d017      	beq.n	8004c72 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004c42:	e063      	b.n	8004d0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6818      	ldr	r0, [r3, #0]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	6899      	ldr	r1, [r3, #8]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f000 f96d 	bl	8004f32 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c66:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	609a      	str	r2, [r3, #8]
      break;
 8004c70:	e04c      	b.n	8004d0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6818      	ldr	r0, [r3, #0]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	6899      	ldr	r1, [r3, #8]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f000 f956 	bl	8004f32 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c94:	609a      	str	r2, [r3, #8]
      break;
 8004c96:	e039      	b.n	8004d0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6818      	ldr	r0, [r3, #0]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	6859      	ldr	r1, [r3, #4]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	f000 f8cd 	bl	8004e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2150      	movs	r1, #80	; 0x50
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 f924 	bl	8004efe <TIM_ITRx_SetConfig>
      break;
 8004cb6:	e029      	b.n	8004d0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6818      	ldr	r0, [r3, #0]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	6859      	ldr	r1, [r3, #4]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	f000 f8eb 	bl	8004ea0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2160      	movs	r1, #96	; 0x60
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 f914 	bl	8004efe <TIM_ITRx_SetConfig>
      break;
 8004cd6:	e019      	b.n	8004d0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6818      	ldr	r0, [r3, #0]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	6859      	ldr	r1, [r3, #4]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	f000 f8ad 	bl	8004e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2140      	movs	r1, #64	; 0x40
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 f904 	bl	8004efe <TIM_ITRx_SetConfig>
      break;
 8004cf6:	e009      	b.n	8004d0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4619      	mov	r1, r3
 8004d02:	4610      	mov	r0, r2
 8004d04:	f000 f8fb 	bl	8004efe <TIM_ITRx_SetConfig>
      break;
 8004d08:	e000      	b.n	8004d0c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004d0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bc80      	pop	{r7}
 8004d48:	4770      	bx	lr

08004d4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d52:	bf00      	nop
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bc80      	pop	{r7}
 8004d5a:	4770      	bx	lr

08004d5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bc80      	pop	{r7}
 8004d6c:	4770      	bx	lr

08004d6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bc80      	pop	{r7}
 8004d7e:	4770      	bx	lr

08004d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a29      	ldr	r2, [pc, #164]	; (8004e38 <TIM_Base_SetConfig+0xb8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d00b      	beq.n	8004db0 <TIM_Base_SetConfig+0x30>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9e:	d007      	beq.n	8004db0 <TIM_Base_SetConfig+0x30>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a26      	ldr	r2, [pc, #152]	; (8004e3c <TIM_Base_SetConfig+0xbc>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d003      	beq.n	8004db0 <TIM_Base_SetConfig+0x30>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a25      	ldr	r2, [pc, #148]	; (8004e40 <TIM_Base_SetConfig+0xc0>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d108      	bne.n	8004dc2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a1c      	ldr	r2, [pc, #112]	; (8004e38 <TIM_Base_SetConfig+0xb8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00b      	beq.n	8004de2 <TIM_Base_SetConfig+0x62>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd0:	d007      	beq.n	8004de2 <TIM_Base_SetConfig+0x62>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a19      	ldr	r2, [pc, #100]	; (8004e3c <TIM_Base_SetConfig+0xbc>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d003      	beq.n	8004de2 <TIM_Base_SetConfig+0x62>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a18      	ldr	r2, [pc, #96]	; (8004e40 <TIM_Base_SetConfig+0xc0>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d108      	bne.n	8004df4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a07      	ldr	r2, [pc, #28]	; (8004e38 <TIM_Base_SetConfig+0xb8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d103      	bne.n	8004e28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	615a      	str	r2, [r3, #20]
}
 8004e2e:	bf00      	nop
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bc80      	pop	{r7}
 8004e36:	4770      	bx	lr
 8004e38:	40012c00 	.word	0x40012c00
 8004e3c:	40000400 	.word	0x40000400
 8004e40:	40000800 	.word	0x40000800

08004e44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	f023 0201 	bic.w	r2, r3, #1
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	011b      	lsls	r3, r3, #4
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f023 030a 	bic.w	r3, r3, #10
 8004e80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	621a      	str	r2, [r3, #32]
}
 8004e96:	bf00      	nop
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr

08004ea0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	f023 0210 	bic.w	r2, r3, #16
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004eca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	031b      	lsls	r3, r3, #12
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004edc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	011b      	lsls	r3, r3, #4
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	621a      	str	r2, [r3, #32]
}
 8004ef4:	bf00      	nop
 8004ef6:	371c      	adds	r7, #28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bc80      	pop	{r7}
 8004efc:	4770      	bx	lr

08004efe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b085      	sub	sp, #20
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	f043 0307 	orr.w	r3, r3, #7
 8004f20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	609a      	str	r2, [r3, #8]
}
 8004f28:	bf00      	nop
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bc80      	pop	{r7}
 8004f30:	4770      	bx	lr

08004f32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b087      	sub	sp, #28
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	60f8      	str	r0, [r7, #12]
 8004f3a:	60b9      	str	r1, [r7, #8]
 8004f3c:	607a      	str	r2, [r7, #4]
 8004f3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	021a      	lsls	r2, r3, #8
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	431a      	orrs	r2, r3
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	609a      	str	r2, [r3, #8]
}
 8004f66:	bf00      	nop
 8004f68:	371c      	adds	r7, #28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr

08004f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e032      	b.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fc0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc80      	pop	{r7}
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	bc80      	pop	{r7}
 8005008:	4770      	bx	lr

0800500a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr

0800501c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800501c:	b084      	sub	sp, #16
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	f107 0014 	add.w	r0, r7, #20
 800502a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	bc80      	pop	{r7}
 8005038:	b004      	add	sp, #16
 800503a:	4770      	bx	lr

0800503c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005044:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005048:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005050:	b29a      	uxth	r2, r3
 8005052:	89fb      	ldrh	r3, [r7, #14]
 8005054:	4313      	orrs	r3, r2
 8005056:	b29a      	uxth	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	bc80      	pop	{r7}
 8005068:	4770      	bx	lr

0800506a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800506a:	b480      	push	{r7}
 800506c:	b085      	sub	sp, #20
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005072:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005076:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800507e:	b29b      	uxth	r3, r3
 8005080:	b21a      	sxth	r2, r3
 8005082:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005086:	43db      	mvns	r3, r3
 8005088:	b21b      	sxth	r3, r3
 800508a:	4013      	ands	r3, r2
 800508c:	b21b      	sxth	r3, r3
 800508e:	b29a      	uxth	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	bc80      	pop	{r7}
 80050a0:	4770      	bx	lr

080050a2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	460b      	mov	r3, r1
 80050ac:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bc80      	pop	{r7}
 80050b8:	4770      	bx	lr

080050ba <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80050ba:	b084      	sub	sp, #16
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	f107 0014 	add.w	r0, r7, #20
 80050c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff ffa5 	bl	800503c <USB_EnableGlobalInt>

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050fe:	b004      	add	sp, #16
 8005100:	4770      	bx	lr
	...

08005104 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005104:	b490      	push	{r4, r7}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	b29b      	uxth	r3, r3
 8005120:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005128:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	78db      	ldrb	r3, [r3, #3]
 800512e:	2b03      	cmp	r3, #3
 8005130:	d819      	bhi.n	8005166 <USB_ActivateEndpoint+0x62>
 8005132:	a201      	add	r2, pc, #4	; (adr r2, 8005138 <USB_ActivateEndpoint+0x34>)
 8005134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005138:	08005149 	.word	0x08005149
 800513c:	0800515d 	.word	0x0800515d
 8005140:	0800516d 	.word	0x0800516d
 8005144:	08005153 	.word	0x08005153
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005148:	89bb      	ldrh	r3, [r7, #12]
 800514a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800514e:	81bb      	strh	r3, [r7, #12]
      break;
 8005150:	e00d      	b.n	800516e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005152:	89bb      	ldrh	r3, [r7, #12]
 8005154:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005158:	81bb      	strh	r3, [r7, #12]
      break;
 800515a:	e008      	b.n	800516e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800515c:	89bb      	ldrh	r3, [r7, #12]
 800515e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005162:	81bb      	strh	r3, [r7, #12]
      break;
 8005164:	e003      	b.n	800516e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	73fb      	strb	r3, [r7, #15]
      break;
 800516a:	e000      	b.n	800516e <USB_ActivateEndpoint+0x6a>
      break;
 800516c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	441a      	add	r2, r3
 8005178:	89bb      	ldrh	r3, [r7, #12]
 800517a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800517e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800518a:	b29b      	uxth	r3, r3
 800518c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	b29b      	uxth	r3, r3
 800519c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	4313      	orrs	r3, r2
 80051ae:	b29c      	uxth	r4, r3
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	441a      	add	r2, r3
 80051ba:	4b8a      	ldr	r3, [pc, #552]	; (80053e4 <USB_ActivateEndpoint+0x2e0>)
 80051bc:	4323      	orrs	r3, r4
 80051be:	b29b      	uxth	r3, r3
 80051c0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	7b1b      	ldrb	r3, [r3, #12]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f040 8112 	bne.w	80053f0 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	785b      	ldrb	r3, [r3, #1]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d067      	beq.n	80052a4 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80051d4:	687c      	ldr	r4, [r7, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051dc:	b29b      	uxth	r3, r3
 80051de:	441c      	add	r4, r3
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	011b      	lsls	r3, r3, #4
 80051e6:	4423      	add	r3, r4
 80051e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ec:	461c      	mov	r4, r3
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	88db      	ldrh	r3, [r3, #6]
 80051f2:	085b      	lsrs	r3, r3, #1
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	b29c      	uxth	r4, r3
 800520a:	4623      	mov	r3, r4
 800520c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005210:	2b00      	cmp	r3, #0
 8005212:	d014      	beq.n	800523e <USB_ActivateEndpoint+0x13a>
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	b29b      	uxth	r3, r3
 8005222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522a:	b29c      	uxth	r4, r3
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	441a      	add	r2, r3
 8005236:	4b6c      	ldr	r3, [pc, #432]	; (80053e8 <USB_ActivateEndpoint+0x2e4>)
 8005238:	4323      	orrs	r3, r4
 800523a:	b29b      	uxth	r3, r3
 800523c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	78db      	ldrb	r3, [r3, #3]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d018      	beq.n	8005278 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	b29b      	uxth	r3, r3
 8005254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800525c:	b29c      	uxth	r4, r3
 800525e:	f084 0320 	eor.w	r3, r4, #32
 8005262:	b29c      	uxth	r4, r3
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	441a      	add	r2, r3
 800526e:	4b5d      	ldr	r3, [pc, #372]	; (80053e4 <USB_ActivateEndpoint+0x2e0>)
 8005270:	4323      	orrs	r3, r4
 8005272:	b29b      	uxth	r3, r3
 8005274:	8013      	strh	r3, [r2, #0]
 8005276:	e22b      	b.n	80056d0 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29b      	uxth	r3, r3
 8005286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800528a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800528e:	b29c      	uxth	r4, r3
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	441a      	add	r2, r3
 800529a:	4b52      	ldr	r3, [pc, #328]	; (80053e4 <USB_ActivateEndpoint+0x2e0>)
 800529c:	4323      	orrs	r3, r4
 800529e:	b29b      	uxth	r3, r3
 80052a0:	8013      	strh	r3, [r2, #0]
 80052a2:	e215      	b.n	80056d0 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80052a4:	687c      	ldr	r4, [r7, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	441c      	add	r4, r3
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	4423      	add	r3, r4
 80052b8:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80052bc:	461c      	mov	r4, r3
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	88db      	ldrh	r3, [r3, #6]
 80052c2:	085b      	lsrs	r3, r3, #1
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80052cc:	687c      	ldr	r4, [r7, #4]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	441c      	add	r4, r3
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	011b      	lsls	r3, r3, #4
 80052de:	4423      	add	r3, r4
 80052e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052e4:	461c      	mov	r4, r3
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10e      	bne.n	800530c <USB_ActivateEndpoint+0x208>
 80052ee:	8823      	ldrh	r3, [r4, #0]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	8023      	strh	r3, [r4, #0]
 80052fa:	8823      	ldrh	r3, [r4, #0]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005306:	b29b      	uxth	r3, r3
 8005308:	8023      	strh	r3, [r4, #0]
 800530a:	e02d      	b.n	8005368 <USB_ActivateEndpoint+0x264>
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	2b3e      	cmp	r3, #62	; 0x3e
 8005312:	d812      	bhi.n	800533a <USB_ActivateEndpoint+0x236>
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	085b      	lsrs	r3, r3, #1
 800531a:	60bb      	str	r3, [r7, #8]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <USB_ActivateEndpoint+0x22a>
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	3301      	adds	r3, #1
 800532c:	60bb      	str	r3, [r7, #8]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	b29b      	uxth	r3, r3
 8005332:	029b      	lsls	r3, r3, #10
 8005334:	b29b      	uxth	r3, r3
 8005336:	8023      	strh	r3, [r4, #0]
 8005338:	e016      	b.n	8005368 <USB_ActivateEndpoint+0x264>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	60bb      	str	r3, [r7, #8]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	f003 031f 	and.w	r3, r3, #31
 800534a:	2b00      	cmp	r3, #0
 800534c:	d102      	bne.n	8005354 <USB_ActivateEndpoint+0x250>
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	3b01      	subs	r3, #1
 8005352:	60bb      	str	r3, [r7, #8]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	b29b      	uxth	r3, r3
 8005358:	029b      	lsls	r3, r3, #10
 800535a:	b29b      	uxth	r3, r3
 800535c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005364:	b29b      	uxth	r3, r3
 8005366:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	b29c      	uxth	r4, r3
 8005376:	4623      	mov	r3, r4
 8005378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d014      	beq.n	80053aa <USB_ActivateEndpoint+0x2a6>
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	b29b      	uxth	r3, r3
 800538e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005396:	b29c      	uxth	r4, r3
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	441a      	add	r2, r3
 80053a2:	4b12      	ldr	r3, [pc, #72]	; (80053ec <USB_ActivateEndpoint+0x2e8>)
 80053a4:	4323      	orrs	r3, r4
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c0:	b29c      	uxth	r4, r3
 80053c2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80053c6:	b29c      	uxth	r4, r3
 80053c8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80053cc:	b29c      	uxth	r4, r3
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	441a      	add	r2, r3
 80053d8:	4b02      	ldr	r3, [pc, #8]	; (80053e4 <USB_ActivateEndpoint+0x2e0>)
 80053da:	4323      	orrs	r3, r4
 80053dc:	b29b      	uxth	r3, r3
 80053de:	8013      	strh	r3, [r2, #0]
 80053e0:	e176      	b.n	80056d0 <USB_ActivateEndpoint+0x5cc>
 80053e2:	bf00      	nop
 80053e4:	ffff8080 	.word	0xffff8080
 80053e8:	ffff80c0 	.word	0xffff80c0
 80053ec:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005406:	b29c      	uxth	r4, r3
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	441a      	add	r2, r3
 8005412:	4b96      	ldr	r3, [pc, #600]	; (800566c <USB_ActivateEndpoint+0x568>)
 8005414:	4323      	orrs	r3, r4
 8005416:	b29b      	uxth	r3, r3
 8005418:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800541a:	687c      	ldr	r4, [r7, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005422:	b29b      	uxth	r3, r3
 8005424:	441c      	add	r4, r3
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	4423      	add	r3, r4
 800542e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005432:	461c      	mov	r4, r3
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	891b      	ldrh	r3, [r3, #8]
 8005438:	085b      	lsrs	r3, r3, #1
 800543a:	b29b      	uxth	r3, r3
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	b29b      	uxth	r3, r3
 8005440:	8023      	strh	r3, [r4, #0]
 8005442:	687c      	ldr	r4, [r7, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800544a:	b29b      	uxth	r3, r3
 800544c:	441c      	add	r4, r3
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	011b      	lsls	r3, r3, #4
 8005454:	4423      	add	r3, r4
 8005456:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800545a:	461c      	mov	r4, r3
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	895b      	ldrh	r3, [r3, #10]
 8005460:	085b      	lsrs	r3, r3, #1
 8005462:	b29b      	uxth	r3, r3
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	b29b      	uxth	r3, r3
 8005468:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	785b      	ldrb	r3, [r3, #1]
 800546e:	2b00      	cmp	r3, #0
 8005470:	f040 8088 	bne.w	8005584 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	b29c      	uxth	r4, r3
 8005482:	4623      	mov	r3, r4
 8005484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d014      	beq.n	80054b6 <USB_ActivateEndpoint+0x3b2>
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	b29b      	uxth	r3, r3
 800549a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800549e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a2:	b29c      	uxth	r4, r3
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	441a      	add	r2, r3
 80054ae:	4b70      	ldr	r3, [pc, #448]	; (8005670 <USB_ActivateEndpoint+0x56c>)
 80054b0:	4323      	orrs	r3, r4
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	b29c      	uxth	r4, r3
 80054c4:	4623      	mov	r3, r4
 80054c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d014      	beq.n	80054f8 <USB_ActivateEndpoint+0x3f4>
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	b29b      	uxth	r3, r3
 80054dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e4:	b29c      	uxth	r4, r3
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	441a      	add	r2, r3
 80054f0:	4b60      	ldr	r3, [pc, #384]	; (8005674 <USB_ActivateEndpoint+0x570>)
 80054f2:	4323      	orrs	r3, r4
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	b29b      	uxth	r3, r3
 8005506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800550a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550e:	b29c      	uxth	r4, r3
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	441a      	add	r2, r3
 800551a:	4b56      	ldr	r3, [pc, #344]	; (8005674 <USB_ActivateEndpoint+0x570>)
 800551c:	4323      	orrs	r3, r4
 800551e:	b29b      	uxth	r3, r3
 8005520:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	b29b      	uxth	r3, r3
 8005530:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005538:	b29c      	uxth	r4, r3
 800553a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800553e:	b29c      	uxth	r4, r3
 8005540:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005544:	b29c      	uxth	r4, r3
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	441a      	add	r2, r3
 8005550:	4b49      	ldr	r3, [pc, #292]	; (8005678 <USB_ActivateEndpoint+0x574>)
 8005552:	4323      	orrs	r3, r4
 8005554:	b29b      	uxth	r3, r3
 8005556:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	b29b      	uxth	r3, r3
 8005566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800556e:	b29c      	uxth	r4, r3
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	441a      	add	r2, r3
 800557a:	4b3f      	ldr	r3, [pc, #252]	; (8005678 <USB_ActivateEndpoint+0x574>)
 800557c:	4323      	orrs	r3, r4
 800557e:	b29b      	uxth	r3, r3
 8005580:	8013      	strh	r3, [r2, #0]
 8005582:	e0a5      	b.n	80056d0 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	b29c      	uxth	r4, r3
 8005592:	4623      	mov	r3, r4
 8005594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d014      	beq.n	80055c6 <USB_ActivateEndpoint+0x4c2>
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b2:	b29c      	uxth	r4, r3
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	441a      	add	r2, r3
 80055be:	4b2c      	ldr	r3, [pc, #176]	; (8005670 <USB_ActivateEndpoint+0x56c>)
 80055c0:	4323      	orrs	r3, r4
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	b29c      	uxth	r4, r3
 80055d4:	4623      	mov	r3, r4
 80055d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d014      	beq.n	8005608 <USB_ActivateEndpoint+0x504>
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f4:	b29c      	uxth	r4, r3
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	441a      	add	r2, r3
 8005600:	4b1c      	ldr	r3, [pc, #112]	; (8005674 <USB_ActivateEndpoint+0x570>)
 8005602:	4323      	orrs	r3, r4
 8005604:	b29b      	uxth	r3, r3
 8005606:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	b29b      	uxth	r3, r3
 8005616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800561a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561e:	b29c      	uxth	r4, r3
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	441a      	add	r2, r3
 800562a:	4b11      	ldr	r3, [pc, #68]	; (8005670 <USB_ActivateEndpoint+0x56c>)
 800562c:	4323      	orrs	r3, r4
 800562e:	b29b      	uxth	r3, r3
 8005630:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	78db      	ldrb	r3, [r3, #3]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d020      	beq.n	800567c <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	b29b      	uxth	r3, r3
 8005648:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005650:	b29c      	uxth	r4, r3
 8005652:	f084 0320 	eor.w	r3, r4, #32
 8005656:	b29c      	uxth	r4, r3
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	441a      	add	r2, r3
 8005662:	4b05      	ldr	r3, [pc, #20]	; (8005678 <USB_ActivateEndpoint+0x574>)
 8005664:	4323      	orrs	r3, r4
 8005666:	b29b      	uxth	r3, r3
 8005668:	8013      	strh	r3, [r2, #0]
 800566a:	e01c      	b.n	80056a6 <USB_ActivateEndpoint+0x5a2>
 800566c:	ffff8180 	.word	0xffff8180
 8005670:	ffffc080 	.word	0xffffc080
 8005674:	ffff80c0 	.word	0xffff80c0
 8005678:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	b29b      	uxth	r3, r3
 800568a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800568e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005692:	b29c      	uxth	r4, r3
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	441a      	add	r2, r3
 800569e:	4b0f      	ldr	r3, [pc, #60]	; (80056dc <USB_ActivateEndpoint+0x5d8>)
 80056a0:	4323      	orrs	r3, r4
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056bc:	b29c      	uxth	r4, r3
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	441a      	add	r2, r3
 80056c8:	4b04      	ldr	r3, [pc, #16]	; (80056dc <USB_ActivateEndpoint+0x5d8>)
 80056ca:	4323      	orrs	r3, r4
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc90      	pop	{r4, r7}
 80056da:	4770      	bx	lr
 80056dc:	ffff8080 	.word	0xffff8080

080056e0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056e0:	b490      	push	{r4, r7}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	7b1b      	ldrb	r3, [r3, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d171      	bne.n	80057d6 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	785b      	ldrb	r3, [r3, #1]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d036      	beq.n	8005768 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	b29c      	uxth	r4, r3
 8005708:	4623      	mov	r3, r4
 800570a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570e:	2b00      	cmp	r3, #0
 8005710:	d014      	beq.n	800573c <USB_DeactivateEndpoint+0x5c>
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	b29b      	uxth	r3, r3
 8005720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005728:	b29c      	uxth	r4, r3
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	441a      	add	r2, r3
 8005734:	4b6b      	ldr	r3, [pc, #428]	; (80058e4 <USB_DeactivateEndpoint+0x204>)
 8005736:	4323      	orrs	r3, r4
 8005738:	b29b      	uxth	r3, r3
 800573a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	881b      	ldrh	r3, [r3, #0]
 8005748:	b29b      	uxth	r3, r3
 800574a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800574e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005752:	b29c      	uxth	r4, r3
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	441a      	add	r2, r3
 800575e:	4b62      	ldr	r3, [pc, #392]	; (80058e8 <USB_DeactivateEndpoint+0x208>)
 8005760:	4323      	orrs	r3, r4
 8005762:	b29b      	uxth	r3, r3
 8005764:	8013      	strh	r3, [r2, #0]
 8005766:	e144      	b.n	80059f2 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	b29c      	uxth	r4, r3
 8005776:	4623      	mov	r3, r4
 8005778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d014      	beq.n	80057aa <USB_DeactivateEndpoint+0xca>
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	b29b      	uxth	r3, r3
 800578e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005796:	b29c      	uxth	r4, r3
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	441a      	add	r2, r3
 80057a2:	4b52      	ldr	r3, [pc, #328]	; (80058ec <USB_DeactivateEndpoint+0x20c>)
 80057a4:	4323      	orrs	r3, r4
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c0:	b29c      	uxth	r4, r3
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	441a      	add	r2, r3
 80057cc:	4b46      	ldr	r3, [pc, #280]	; (80058e8 <USB_DeactivateEndpoint+0x208>)
 80057ce:	4323      	orrs	r3, r4
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	8013      	strh	r3, [r2, #0]
 80057d4:	e10d      	b.n	80059f2 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	785b      	ldrb	r3, [r3, #1]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f040 8088 	bne.w	80058f0 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b29c      	uxth	r4, r3
 80057ee:	4623      	mov	r3, r4
 80057f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d014      	beq.n	8005822 <USB_DeactivateEndpoint+0x142>
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	b29b      	uxth	r3, r3
 8005806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800580a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580e:	b29c      	uxth	r4, r3
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	441a      	add	r2, r3
 800581a:	4b34      	ldr	r3, [pc, #208]	; (80058ec <USB_DeactivateEndpoint+0x20c>)
 800581c:	4323      	orrs	r3, r4
 800581e:	b29b      	uxth	r3, r3
 8005820:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	b29c      	uxth	r4, r3
 8005830:	4623      	mov	r3, r4
 8005832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005836:	2b00      	cmp	r3, #0
 8005838:	d014      	beq.n	8005864 <USB_DeactivateEndpoint+0x184>
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4413      	add	r3, r2
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	b29b      	uxth	r3, r3
 8005848:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800584c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005850:	b29c      	uxth	r4, r3
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	441a      	add	r2, r3
 800585c:	4b21      	ldr	r3, [pc, #132]	; (80058e4 <USB_DeactivateEndpoint+0x204>)
 800585e:	4323      	orrs	r3, r4
 8005860:	b29b      	uxth	r3, r3
 8005862:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	b29b      	uxth	r3, r3
 8005872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587a:	b29c      	uxth	r4, r3
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	441a      	add	r2, r3
 8005886:	4b17      	ldr	r3, [pc, #92]	; (80058e4 <USB_DeactivateEndpoint+0x204>)
 8005888:	4323      	orrs	r3, r4
 800588a:	b29b      	uxth	r3, r3
 800588c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	b29b      	uxth	r3, r3
 800589c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a4:	b29c      	uxth	r4, r3
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	441a      	add	r2, r3
 80058b0:	4b0d      	ldr	r3, [pc, #52]	; (80058e8 <USB_DeactivateEndpoint+0x208>)
 80058b2:	4323      	orrs	r3, r4
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ce:	b29c      	uxth	r4, r3
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	441a      	add	r2, r3
 80058da:	4b03      	ldr	r3, [pc, #12]	; (80058e8 <USB_DeactivateEndpoint+0x208>)
 80058dc:	4323      	orrs	r3, r4
 80058de:	b29b      	uxth	r3, r3
 80058e0:	8013      	strh	r3, [r2, #0]
 80058e2:	e086      	b.n	80059f2 <USB_DeactivateEndpoint+0x312>
 80058e4:	ffff80c0 	.word	0xffff80c0
 80058e8:	ffff8080 	.word	0xffff8080
 80058ec:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	881b      	ldrh	r3, [r3, #0]
 80058fc:	b29c      	uxth	r4, r3
 80058fe:	4623      	mov	r3, r4
 8005900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d014      	beq.n	8005932 <USB_DeactivateEndpoint+0x252>
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	b29b      	uxth	r3, r3
 8005916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800591a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591e:	b29c      	uxth	r4, r3
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	441a      	add	r2, r3
 800592a:	4b35      	ldr	r3, [pc, #212]	; (8005a00 <USB_DeactivateEndpoint+0x320>)
 800592c:	4323      	orrs	r3, r4
 800592e:	b29b      	uxth	r3, r3
 8005930:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	b29c      	uxth	r4, r3
 8005940:	4623      	mov	r3, r4
 8005942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005946:	2b00      	cmp	r3, #0
 8005948:	d014      	beq.n	8005974 <USB_DeactivateEndpoint+0x294>
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	881b      	ldrh	r3, [r3, #0]
 8005956:	b29b      	uxth	r3, r3
 8005958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800595c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005960:	b29c      	uxth	r4, r3
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	441a      	add	r2, r3
 800596c:	4b25      	ldr	r3, [pc, #148]	; (8005a04 <USB_DeactivateEndpoint+0x324>)
 800596e:	4323      	orrs	r3, r4
 8005970:	b29b      	uxth	r3, r3
 8005972:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	b29b      	uxth	r3, r3
 8005982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598a:	b29c      	uxth	r4, r3
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	441a      	add	r2, r3
 8005996:	4b1a      	ldr	r3, [pc, #104]	; (8005a00 <USB_DeactivateEndpoint+0x320>)
 8005998:	4323      	orrs	r3, r4
 800599a:	b29b      	uxth	r3, r3
 800599c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b4:	b29c      	uxth	r4, r3
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	441a      	add	r2, r3
 80059c0:	4b11      	ldr	r3, [pc, #68]	; (8005a08 <USB_DeactivateEndpoint+0x328>)
 80059c2:	4323      	orrs	r3, r4
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059de:	b29c      	uxth	r4, r3
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	441a      	add	r2, r3
 80059ea:	4b07      	ldr	r3, [pc, #28]	; (8005a08 <USB_DeactivateEndpoint+0x328>)
 80059ec:	4323      	orrs	r3, r4
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bc90      	pop	{r4, r7}
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	ffffc080 	.word	0xffffc080
 8005a04:	ffff80c0 	.word	0xffff80c0
 8005a08:	ffff8080 	.word	0xffff8080

08005a0c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a0c:	b590      	push	{r4, r7, lr}
 8005a0e:	b08d      	sub	sp, #52	; 0x34
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	785b      	ldrb	r3, [r3, #1]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	f040 8160 	bne.w	8005ce0 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	699a      	ldr	r2, [r3, #24]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d909      	bls.n	8005a40 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	699a      	ldr	r2, [r3, #24]
 8005a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a38:	1ad2      	subs	r2, r2, r3
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	619a      	str	r2, [r3, #24]
 8005a3e:	e005      	b.n	8005a4c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	7b1b      	ldrb	r3, [r3, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d119      	bne.n	8005a88 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	6959      	ldr	r1, [r3, #20]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	88da      	ldrh	r2, [r3, #6]
 8005a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fba2 	bl	80061aa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a66:	687c      	ldr	r4, [r7, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	441c      	add	r4, r3
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	011b      	lsls	r3, r3, #4
 8005a78:	4423      	add	r3, r4
 8005a7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a7e:	461c      	mov	r4, r3
 8005a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	8023      	strh	r3, [r4, #0]
 8005a86:	e10f      	b.n	8005ca8 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d065      	beq.n	8005b6a <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a9e:	687c      	ldr	r4, [r7, #4]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	785b      	ldrb	r3, [r3, #1]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d148      	bne.n	8005b3a <USB_EPStartXfer+0x12e>
 8005aa8:	687c      	ldr	r4, [r7, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	441c      	add	r4, r3
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	011b      	lsls	r3, r3, #4
 8005aba:	4423      	add	r3, r4
 8005abc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ac0:	461c      	mov	r4, r3
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10e      	bne.n	8005ae6 <USB_EPStartXfer+0xda>
 8005ac8:	8823      	ldrh	r3, [r4, #0]
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	8023      	strh	r3, [r4, #0]
 8005ad4:	8823      	ldrh	r3, [r4, #0]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005adc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	8023      	strh	r3, [r4, #0]
 8005ae4:	e03d      	b.n	8005b62 <USB_EPStartXfer+0x156>
 8005ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae8:	2b3e      	cmp	r3, #62	; 0x3e
 8005aea:	d810      	bhi.n	8005b0e <USB_EPStartXfer+0x102>
 8005aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aee:	085b      	lsrs	r3, r3, #1
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
 8005af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <USB_EPStartXfer+0xf6>
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	3301      	adds	r3, #1
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	029b      	lsls	r3, r3, #10
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	8023      	strh	r3, [r4, #0]
 8005b0c:	e029      	b.n	8005b62 <USB_EPStartXfer+0x156>
 8005b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b10:	095b      	lsrs	r3, r3, #5
 8005b12:	627b      	str	r3, [r7, #36]	; 0x24
 8005b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b16:	f003 031f 	and.w	r3, r3, #31
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d102      	bne.n	8005b24 <USB_EPStartXfer+0x118>
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	3b01      	subs	r3, #1
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	029b      	lsls	r3, r3, #10
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	8023      	strh	r3, [r4, #0]
 8005b38:	e013      	b.n	8005b62 <USB_EPStartXfer+0x156>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	785b      	ldrb	r3, [r3, #1]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d10f      	bne.n	8005b62 <USB_EPStartXfer+0x156>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	441c      	add	r4, r3
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	011b      	lsls	r3, r3, #4
 8005b52:	4423      	add	r3, r4
 8005b54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	895b      	ldrh	r3, [r3, #10]
 8005b66:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005b68:	e063      	b.n	8005c32 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	785b      	ldrb	r3, [r3, #1]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d148      	bne.n	8005c04 <USB_EPStartXfer+0x1f8>
 8005b72:	687c      	ldr	r4, [r7, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	441c      	add	r4, r3
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	4423      	add	r3, r4
 8005b86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b8a:	461c      	mov	r4, r3
 8005b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10e      	bne.n	8005bb0 <USB_EPStartXfer+0x1a4>
 8005b92:	8823      	ldrh	r3, [r4, #0]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	8023      	strh	r3, [r4, #0]
 8005b9e:	8823      	ldrh	r3, [r4, #0]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	8023      	strh	r3, [r4, #0]
 8005bae:	e03d      	b.n	8005c2c <USB_EPStartXfer+0x220>
 8005bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb2:	2b3e      	cmp	r3, #62	; 0x3e
 8005bb4:	d810      	bhi.n	8005bd8 <USB_EPStartXfer+0x1cc>
 8005bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb8:	085b      	lsrs	r3, r3, #1
 8005bba:	623b      	str	r3, [r7, #32]
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d002      	beq.n	8005bcc <USB_EPStartXfer+0x1c0>
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	623b      	str	r3, [r7, #32]
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	029b      	lsls	r3, r3, #10
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	8023      	strh	r3, [r4, #0]
 8005bd6:	e029      	b.n	8005c2c <USB_EPStartXfer+0x220>
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	095b      	lsrs	r3, r3, #5
 8005bdc:	623b      	str	r3, [r7, #32]
 8005bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be0:	f003 031f 	and.w	r3, r3, #31
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d102      	bne.n	8005bee <USB_EPStartXfer+0x1e2>
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	3b01      	subs	r3, #1
 8005bec:	623b      	str	r3, [r7, #32]
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	029b      	lsls	r3, r3, #10
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	8023      	strh	r3, [r4, #0]
 8005c02:	e013      	b.n	8005c2c <USB_EPStartXfer+0x220>
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	785b      	ldrb	r3, [r3, #1]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d10f      	bne.n	8005c2c <USB_EPStartXfer+0x220>
 8005c0c:	687c      	ldr	r4, [r7, #4]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	441c      	add	r4, r3
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	011b      	lsls	r3, r3, #4
 8005c1e:	4423      	add	r3, r4
 8005c20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c24:	461c      	mov	r4, r3
 8005c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	891b      	ldrh	r3, [r3, #8]
 8005c30:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	6959      	ldr	r1, [r3, #20]
 8005c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fab4 	bl	80061aa <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	785b      	ldrb	r3, [r3, #1]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d115      	bne.n	8005c76 <USB_EPStartXfer+0x26a>
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c60:	b29c      	uxth	r4, r3
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	441a      	add	r2, r3
 8005c6c:	4b9a      	ldr	r3, [pc, #616]	; (8005ed8 <USB_EPStartXfer+0x4cc>)
 8005c6e:	4323      	orrs	r3, r4
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	8013      	strh	r3, [r2, #0]
 8005c74:	e018      	b.n	8005ca8 <USB_EPStartXfer+0x29c>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	785b      	ldrb	r3, [r3, #1]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d114      	bne.n	8005ca8 <USB_EPStartXfer+0x29c>
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c94:	b29c      	uxth	r4, r3
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	441a      	add	r2, r3
 8005ca0:	4b8e      	ldr	r3, [pc, #568]	; (8005edc <USB_EPStartXfer+0x4d0>)
 8005ca2:	4323      	orrs	r3, r4
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	881b      	ldrh	r3, [r3, #0]
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cbe:	b29c      	uxth	r4, r3
 8005cc0:	f084 0310 	eor.w	r3, r4, #16
 8005cc4:	b29c      	uxth	r4, r3
 8005cc6:	f084 0320 	eor.w	r3, r4, #32
 8005cca:	b29c      	uxth	r4, r3
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	441a      	add	r2, r3
 8005cd6:	4b82      	ldr	r3, [pc, #520]	; (8005ee0 <USB_EPStartXfer+0x4d4>)
 8005cd8:	4323      	orrs	r3, r4
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	8013      	strh	r3, [r2, #0]
 8005cde:	e146      	b.n	8005f6e <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	699a      	ldr	r2, [r3, #24]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d909      	bls.n	8005d00 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	699a      	ldr	r2, [r3, #24]
 8005cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf8:	1ad2      	subs	r2, r2, r3
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	619a      	str	r2, [r3, #24]
 8005cfe:	e005      	b.n	8005d0c <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	7b1b      	ldrb	r3, [r3, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d148      	bne.n	8005da6 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005d14:	687c      	ldr	r4, [r7, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	441c      	add	r4, r3
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	011b      	lsls	r3, r3, #4
 8005d26:	4423      	add	r3, r4
 8005d28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d2c:	461c      	mov	r4, r3
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10e      	bne.n	8005d52 <USB_EPStartXfer+0x346>
 8005d34:	8823      	ldrh	r3, [r4, #0]
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	8023      	strh	r3, [r4, #0]
 8005d40:	8823      	ldrh	r3, [r4, #0]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	8023      	strh	r3, [r4, #0]
 8005d50:	e0f2      	b.n	8005f38 <USB_EPStartXfer+0x52c>
 8005d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d54:	2b3e      	cmp	r3, #62	; 0x3e
 8005d56:	d810      	bhi.n	8005d7a <USB_EPStartXfer+0x36e>
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	085b      	lsrs	r3, r3, #1
 8005d5c:	61fb      	str	r3, [r7, #28]
 8005d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d002      	beq.n	8005d6e <USB_EPStartXfer+0x362>
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	61fb      	str	r3, [r7, #28]
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	029b      	lsls	r3, r3, #10
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	8023      	strh	r3, [r4, #0]
 8005d78:	e0de      	b.n	8005f38 <USB_EPStartXfer+0x52c>
 8005d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7c:	095b      	lsrs	r3, r3, #5
 8005d7e:	61fb      	str	r3, [r7, #28]
 8005d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d82:	f003 031f 	and.w	r3, r3, #31
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d102      	bne.n	8005d90 <USB_EPStartXfer+0x384>
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	61fb      	str	r3, [r7, #28]
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	029b      	lsls	r3, r3, #10
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	8023      	strh	r3, [r4, #0]
 8005da4:	e0c8      	b.n	8005f38 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	785b      	ldrb	r3, [r3, #1]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d148      	bne.n	8005e40 <USB_EPStartXfer+0x434>
 8005dae:	687c      	ldr	r4, [r7, #4]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	441c      	add	r4, r3
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	4423      	add	r3, r4
 8005dc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dc6:	461c      	mov	r4, r3
 8005dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10e      	bne.n	8005dec <USB_EPStartXfer+0x3e0>
 8005dce:	8823      	ldrh	r3, [r4, #0]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	8023      	strh	r3, [r4, #0]
 8005dda:	8823      	ldrh	r3, [r4, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	8023      	strh	r3, [r4, #0]
 8005dea:	e03d      	b.n	8005e68 <USB_EPStartXfer+0x45c>
 8005dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dee:	2b3e      	cmp	r3, #62	; 0x3e
 8005df0:	d810      	bhi.n	8005e14 <USB_EPStartXfer+0x408>
 8005df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df4:	085b      	lsrs	r3, r3, #1
 8005df6:	61bb      	str	r3, [r7, #24]
 8005df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <USB_EPStartXfer+0x3fc>
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	3301      	adds	r3, #1
 8005e06:	61bb      	str	r3, [r7, #24]
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	029b      	lsls	r3, r3, #10
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	8023      	strh	r3, [r4, #0]
 8005e12:	e029      	b.n	8005e68 <USB_EPStartXfer+0x45c>
 8005e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e16:	095b      	lsrs	r3, r3, #5
 8005e18:	61bb      	str	r3, [r7, #24]
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	f003 031f 	and.w	r3, r3, #31
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d102      	bne.n	8005e2a <USB_EPStartXfer+0x41e>
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	61bb      	str	r3, [r7, #24]
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	029b      	lsls	r3, r3, #10
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	8023      	strh	r3, [r4, #0]
 8005e3e:	e013      	b.n	8005e68 <USB_EPStartXfer+0x45c>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	785b      	ldrb	r3, [r3, #1]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d10f      	bne.n	8005e68 <USB_EPStartXfer+0x45c>
 8005e48:	687c      	ldr	r4, [r7, #4]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	441c      	add	r4, r3
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	011b      	lsls	r3, r3, #4
 8005e5a:	4423      	add	r3, r4
 8005e5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e60:	461c      	mov	r4, r3
 8005e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	8023      	strh	r3, [r4, #0]
 8005e68:	687c      	ldr	r4, [r7, #4]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	785b      	ldrb	r3, [r3, #1]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d14e      	bne.n	8005f10 <USB_EPStartXfer+0x504>
 8005e72:	687c      	ldr	r4, [r7, #4]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	441c      	add	r4, r3
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	011b      	lsls	r3, r3, #4
 8005e84:	4423      	add	r3, r4
 8005e86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e8a:	461c      	mov	r4, r3
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10e      	bne.n	8005eb0 <USB_EPStartXfer+0x4a4>
 8005e92:	8823      	ldrh	r3, [r4, #0]
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	8023      	strh	r3, [r4, #0]
 8005e9e:	8823      	ldrh	r3, [r4, #0]
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	8023      	strh	r3, [r4, #0]
 8005eae:	e043      	b.n	8005f38 <USB_EPStartXfer+0x52c>
 8005eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb2:	2b3e      	cmp	r3, #62	; 0x3e
 8005eb4:	d816      	bhi.n	8005ee4 <USB_EPStartXfer+0x4d8>
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	085b      	lsrs	r3, r3, #1
 8005eba:	617b      	str	r3, [r7, #20]
 8005ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d002      	beq.n	8005ecc <USB_EPStartXfer+0x4c0>
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	617b      	str	r3, [r7, #20]
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	029b      	lsls	r3, r3, #10
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	8023      	strh	r3, [r4, #0]
 8005ed6:	e02f      	b.n	8005f38 <USB_EPStartXfer+0x52c>
 8005ed8:	ffff80c0 	.word	0xffff80c0
 8005edc:	ffffc080 	.word	0xffffc080
 8005ee0:	ffff8080 	.word	0xffff8080
 8005ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee6:	095b      	lsrs	r3, r3, #5
 8005ee8:	617b      	str	r3, [r7, #20]
 8005eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eec:	f003 031f 	and.w	r3, r3, #31
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d102      	bne.n	8005efa <USB_EPStartXfer+0x4ee>
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	029b      	lsls	r3, r3, #10
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	8023      	strh	r3, [r4, #0]
 8005f0e:	e013      	b.n	8005f38 <USB_EPStartXfer+0x52c>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	785b      	ldrb	r3, [r3, #1]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d10f      	bne.n	8005f38 <USB_EPStartXfer+0x52c>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	441c      	add	r4, r3
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	011b      	lsls	r3, r3, #4
 8005f28:	4423      	add	r3, r4
 8005f2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f2e:	613b      	str	r3, [r7, #16]
 8005f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4e:	b29c      	uxth	r4, r3
 8005f50:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005f54:	b29c      	uxth	r4, r3
 8005f56:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005f5a:	b29c      	uxth	r4, r3
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	441a      	add	r2, r3
 8005f66:	4b04      	ldr	r3, [pc, #16]	; (8005f78 <USB_EPStartXfer+0x56c>)
 8005f68:	4323      	orrs	r3, r4
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3734      	adds	r7, #52	; 0x34
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd90      	pop	{r4, r7, pc}
 8005f78:	ffff8080 	.word	0xffff8080

08005f7c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f7c:	b490      	push	{r4, r7}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	785b      	ldrb	r3, [r3, #1]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d018      	beq.n	8005fc0 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fa4:	b29c      	uxth	r4, r3
 8005fa6:	f084 0310 	eor.w	r3, r4, #16
 8005faa:	b29c      	uxth	r4, r3
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	441a      	add	r2, r3
 8005fb6:	4b11      	ldr	r3, [pc, #68]	; (8005ffc <USB_EPSetStall+0x80>)
 8005fb8:	4323      	orrs	r3, r4
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	8013      	strh	r3, [r2, #0]
 8005fbe:	e017      	b.n	8005ff0 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd6:	b29c      	uxth	r4, r3
 8005fd8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005fdc:	b29c      	uxth	r4, r3
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	441a      	add	r2, r3
 8005fe8:	4b04      	ldr	r3, [pc, #16]	; (8005ffc <USB_EPSetStall+0x80>)
 8005fea:	4323      	orrs	r3, r4
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bc90      	pop	{r4, r7}
 8005ffa:	4770      	bx	lr
 8005ffc:	ffff8080 	.word	0xffff8080

08006000 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006000:	b490      	push	{r4, r7}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	7b1b      	ldrb	r3, [r3, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d17d      	bne.n	800610e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	785b      	ldrb	r3, [r3, #1]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d03d      	beq.n	8006096 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	b29c      	uxth	r4, r3
 8006028:	4623      	mov	r3, r4
 800602a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602e:	2b00      	cmp	r3, #0
 8006030:	d014      	beq.n	800605c <USB_EPClearStall+0x5c>
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	b29b      	uxth	r3, r3
 8006040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006048:	b29c      	uxth	r4, r3
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	441a      	add	r2, r3
 8006054:	4b31      	ldr	r3, [pc, #196]	; (800611c <USB_EPClearStall+0x11c>)
 8006056:	4323      	orrs	r3, r4
 8006058:	b29b      	uxth	r3, r3
 800605a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	78db      	ldrb	r3, [r3, #3]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d054      	beq.n	800610e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	b29b      	uxth	r3, r3
 8006072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800607a:	b29c      	uxth	r4, r3
 800607c:	f084 0320 	eor.w	r3, r4, #32
 8006080:	b29c      	uxth	r4, r3
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	441a      	add	r2, r3
 800608c:	4b24      	ldr	r3, [pc, #144]	; (8006120 <USB_EPClearStall+0x120>)
 800608e:	4323      	orrs	r3, r4
 8006090:	b29b      	uxth	r3, r3
 8006092:	8013      	strh	r3, [r2, #0]
 8006094:	e03b      	b.n	800610e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	b29c      	uxth	r4, r3
 80060a4:	4623      	mov	r3, r4
 80060a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d014      	beq.n	80060d8 <USB_EPClearStall+0xd8>
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c4:	b29c      	uxth	r4, r3
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	441a      	add	r2, r3
 80060d0:	4b14      	ldr	r3, [pc, #80]	; (8006124 <USB_EPClearStall+0x124>)
 80060d2:	4323      	orrs	r3, r4
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ee:	b29c      	uxth	r4, r3
 80060f0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80060f4:	b29c      	uxth	r4, r3
 80060f6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80060fa:	b29c      	uxth	r4, r3
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	441a      	add	r2, r3
 8006106:	4b06      	ldr	r3, [pc, #24]	; (8006120 <USB_EPClearStall+0x120>)
 8006108:	4323      	orrs	r3, r4
 800610a:	b29b      	uxth	r3, r3
 800610c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bc90      	pop	{r4, r7}
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	ffff80c0 	.word	0xffff80c0
 8006120:	ffff8080 	.word	0xffff8080
 8006124:	ffffc080 	.word	0xffffc080

08006128 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	460b      	mov	r3, r1
 8006132:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006134:	78fb      	ldrb	r3, [r7, #3]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d103      	bne.n	8006142 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2280      	movs	r2, #128	; 0x80
 800613e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	bc80      	pop	{r7}
 800614c:	4770      	bx	lr

0800614e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800614e:	b480      	push	{r7}
 8006150:	b083      	sub	sp, #12
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	bc80      	pop	{r7}
 8006160:	4770      	bx	lr

08006162 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	bc80      	pop	{r7}
 8006174:	4770      	bx	lr

08006176 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006176:	b480      	push	{r7}
 8006178:	b085      	sub	sp, #20
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006184:	b29b      	uxth	r3, r3
 8006186:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006188:	68fb      	ldr	r3, [r7, #12]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	bc80      	pop	{r7}
 8006192:	4770      	bx	lr

08006194 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bc80      	pop	{r7}
 80061a8:	4770      	bx	lr

080061aa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b08d      	sub	sp, #52	; 0x34
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	4611      	mov	r1, r2
 80061b6:	461a      	mov	r2, r3
 80061b8:	460b      	mov	r3, r1
 80061ba:	80fb      	strh	r3, [r7, #6]
 80061bc:	4613      	mov	r3, r2
 80061be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80061c0:	88bb      	ldrh	r3, [r7, #4]
 80061c2:	3301      	adds	r3, #1
 80061c4:	085b      	lsrs	r3, r3, #1
 80061c6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80061d0:	88fb      	ldrh	r3, [r7, #6]
 80061d2:	005a      	lsls	r2, r3, #1
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061dc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061e2:	e01e      	b.n	8006222 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	3301      	adds	r3, #1
 80061ee:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	021b      	lsls	r3, r3, #8
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	461a      	mov	r2, r3
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	b29a      	uxth	r2, r3
 8006206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006208:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620c:	3302      	adds	r3, #2
 800620e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006212:	3302      	adds	r3, #2
 8006214:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	3301      	adds	r3, #1
 800621a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621e:	3b01      	subs	r3, #1
 8006220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1dd      	bne.n	80061e4 <USB_WritePMA+0x3a>
  }
}
 8006228:	bf00      	nop
 800622a:	3734      	adds	r7, #52	; 0x34
 800622c:	46bd      	mov	sp, r7
 800622e:	bc80      	pop	{r7}
 8006230:	4770      	bx	lr

08006232 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006232:	b480      	push	{r7}
 8006234:	b08b      	sub	sp, #44	; 0x2c
 8006236:	af00      	add	r7, sp, #0
 8006238:	60f8      	str	r0, [r7, #12]
 800623a:	60b9      	str	r1, [r7, #8]
 800623c:	4611      	mov	r1, r2
 800623e:	461a      	mov	r2, r3
 8006240:	460b      	mov	r3, r1
 8006242:	80fb      	strh	r3, [r7, #6]
 8006244:	4613      	mov	r3, r2
 8006246:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006248:	88bb      	ldrh	r3, [r7, #4]
 800624a:	085b      	lsrs	r3, r3, #1
 800624c:	b29b      	uxth	r3, r3
 800624e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006258:	88fb      	ldrh	r3, [r7, #6]
 800625a:	005a      	lsls	r2, r3, #1
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006264:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
 800626a:	e01b      	b.n	80062a4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	b29b      	uxth	r3, r3
 8006272:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	3302      	adds	r3, #2
 8006278:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	b2da      	uxtb	r2, r3
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	3301      	adds	r3, #1
 8006286:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	0a1b      	lsrs	r3, r3, #8
 800628c:	b2da      	uxtb	r2, r3
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	3301      	adds	r3, #1
 8006296:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	3302      	adds	r3, #2
 800629c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	3b01      	subs	r3, #1
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1e0      	bne.n	800626c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80062aa:	88bb      	ldrh	r3, [r7, #4]
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d007      	beq.n	80062c6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	701a      	strb	r2, [r3, #0]
  }
}
 80062c6:	bf00      	nop
 80062c8:	372c      	adds	r7, #44	; 0x2c
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bc80      	pop	{r7}
 80062ce:	4770      	bx	lr

080062d0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	460b      	mov	r3, r1
 80062da:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80062dc:	2304      	movs	r3, #4
 80062de:	2203      	movs	r2, #3
 80062e0:	2181      	movs	r1, #129	; 0x81
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f001 fc6f 	bl	8007bc6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80062ee:	2010      	movs	r0, #16
 80062f0:	f001 fd76 	bl	8007de0 <USBD_static_malloc>
 80062f4:	4602      	mov	r2, r0
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8006306:	2302      	movs	r3, #2
 8006308:	e005      	b.n	8006316 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006310:	2200      	movs	r2, #0
 8006312:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b082      	sub	sp, #8
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	460b      	mov	r3, r1
 8006328:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800632a:	2181      	movs	r1, #129	; 0x81
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f001 fc70 	bl	8007c12 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800633e:	2b00      	cmp	r3, #0
 8006340:	d009      	beq.n	8006356 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006348:	4618      	mov	r0, r3
 800634a:	f001 fd55 	bl	8007df8 <USBD_static_free>
    pdev->pClassData = NULL;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b088      	sub	sp, #32
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006370:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006376:	2300      	movs	r3, #0
 8006378:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800638a:	2b00      	cmp	r3, #0
 800638c:	d045      	beq.n	800641a <USBD_HID_Setup+0xba>
 800638e:	2b20      	cmp	r3, #32
 8006390:	f040 80d3 	bne.w	800653a <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	785b      	ldrb	r3, [r3, #1]
 8006398:	3b02      	subs	r3, #2
 800639a:	2b09      	cmp	r3, #9
 800639c:	d835      	bhi.n	800640a <USBD_HID_Setup+0xaa>
 800639e:	a201      	add	r2, pc, #4	; (adr r2, 80063a4 <USBD_HID_Setup+0x44>)
 80063a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a4:	080063fb 	.word	0x080063fb
 80063a8:	080063db 	.word	0x080063db
 80063ac:	0800640b 	.word	0x0800640b
 80063b0:	0800640b 	.word	0x0800640b
 80063b4:	0800640b 	.word	0x0800640b
 80063b8:	0800640b 	.word	0x0800640b
 80063bc:	0800640b 	.word	0x0800640b
 80063c0:	0800640b 	.word	0x0800640b
 80063c4:	080063e9 	.word	0x080063e9
 80063c8:	080063cd 	.word	0x080063cd
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	885b      	ldrh	r3, [r3, #2]
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	461a      	mov	r2, r3
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	601a      	str	r2, [r3, #0]
          break;
 80063d8:	e01e      	b.n	8006418 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	2201      	movs	r2, #1
 80063de:	4619      	mov	r1, r3
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f001 f937 	bl	8007654 <USBD_CtlSendData>
          break;
 80063e6:	e017      	b.n	8006418 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	885b      	ldrh	r3, [r3, #2]
 80063ec:	0a1b      	lsrs	r3, r3, #8
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	461a      	mov	r2, r3
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	605a      	str	r2, [r3, #4]
          break;
 80063f8:	e00e      	b.n	8006418 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	3304      	adds	r3, #4
 80063fe:	2201      	movs	r2, #1
 8006400:	4619      	mov	r1, r3
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f001 f926 	bl	8007654 <USBD_CtlSendData>
          break;
 8006408:	e006      	b.n	8006418 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800640a:	6839      	ldr	r1, [r7, #0]
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f001 f8b7 	bl	8007580 <USBD_CtlError>
          ret = USBD_FAIL;
 8006412:	2302      	movs	r3, #2
 8006414:	75fb      	strb	r3, [r7, #23]
          break;
 8006416:	bf00      	nop
      }
      break;
 8006418:	e096      	b.n	8006548 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	785b      	ldrb	r3, [r3, #1]
 800641e:	2b0b      	cmp	r3, #11
 8006420:	f200 8083 	bhi.w	800652a <USBD_HID_Setup+0x1ca>
 8006424:	a201      	add	r2, pc, #4	; (adr r2, 800642c <USBD_HID_Setup+0xcc>)
 8006426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642a:	bf00      	nop
 800642c:	0800645d 	.word	0x0800645d
 8006430:	0800652b 	.word	0x0800652b
 8006434:	0800652b 	.word	0x0800652b
 8006438:	0800652b 	.word	0x0800652b
 800643c:	0800652b 	.word	0x0800652b
 8006440:	0800652b 	.word	0x0800652b
 8006444:	08006485 	.word	0x08006485
 8006448:	0800652b 	.word	0x0800652b
 800644c:	0800652b 	.word	0x0800652b
 8006450:	0800652b 	.word	0x0800652b
 8006454:	080064dd 	.word	0x080064dd
 8006458:	08006505 	.word	0x08006505
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006462:	2b03      	cmp	r3, #3
 8006464:	d107      	bne.n	8006476 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006466:	f107 030e 	add.w	r3, r7, #14
 800646a:	2202      	movs	r2, #2
 800646c:	4619      	mov	r1, r3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f001 f8f0 	bl	8007654 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006474:	e060      	b.n	8006538 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f001 f881 	bl	8007580 <USBD_CtlError>
            ret = USBD_FAIL;
 800647e:	2302      	movs	r3, #2
 8006480:	75fb      	strb	r3, [r7, #23]
          break;
 8006482:	e059      	b.n	8006538 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	885b      	ldrh	r3, [r3, #2]
 8006488:	0a1b      	lsrs	r3, r3, #8
 800648a:	b29b      	uxth	r3, r3
 800648c:	2b22      	cmp	r3, #34	; 0x22
 800648e:	d108      	bne.n	80064a2 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	88db      	ldrh	r3, [r3, #6]
 8006494:	2b4a      	cmp	r3, #74	; 0x4a
 8006496:	bf28      	it	cs
 8006498:	234a      	movcs	r3, #74	; 0x4a
 800649a:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 800649c:	4b2d      	ldr	r3, [pc, #180]	; (8006554 <USBD_HID_Setup+0x1f4>)
 800649e:	61bb      	str	r3, [r7, #24]
 80064a0:	e015      	b.n	80064ce <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	885b      	ldrh	r3, [r3, #2]
 80064a6:	0a1b      	lsrs	r3, r3, #8
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	2b21      	cmp	r3, #33	; 0x21
 80064ac:	d108      	bne.n	80064c0 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80064ae:	4b2a      	ldr	r3, [pc, #168]	; (8006558 <USBD_HID_Setup+0x1f8>)
 80064b0:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	88db      	ldrh	r3, [r3, #6]
 80064b6:	2b09      	cmp	r3, #9
 80064b8:	bf28      	it	cs
 80064ba:	2309      	movcs	r3, #9
 80064bc:	83fb      	strh	r3, [r7, #30]
 80064be:	e006      	b.n	80064ce <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80064c0:	6839      	ldr	r1, [r7, #0]
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f001 f85c 	bl	8007580 <USBD_CtlError>
            ret = USBD_FAIL;
 80064c8:	2302      	movs	r3, #2
 80064ca:	75fb      	strb	r3, [r7, #23]
            break;
 80064cc:	e034      	b.n	8006538 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80064ce:	8bfb      	ldrh	r3, [r7, #30]
 80064d0:	461a      	mov	r2, r3
 80064d2:	69b9      	ldr	r1, [r7, #24]
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f001 f8bd 	bl	8007654 <USBD_CtlSendData>
          break;
 80064da:	e02d      	b.n	8006538 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	d107      	bne.n	80064f6 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	3308      	adds	r3, #8
 80064ea:	2201      	movs	r2, #1
 80064ec:	4619      	mov	r1, r3
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f001 f8b0 	bl	8007654 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064f4:	e020      	b.n	8006538 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80064f6:	6839      	ldr	r1, [r7, #0]
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f001 f841 	bl	8007580 <USBD_CtlError>
            ret = USBD_FAIL;
 80064fe:	2302      	movs	r3, #2
 8006500:	75fb      	strb	r3, [r7, #23]
          break;
 8006502:	e019      	b.n	8006538 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800650a:	2b03      	cmp	r3, #3
 800650c:	d106      	bne.n	800651c <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	885b      	ldrh	r3, [r3, #2]
 8006512:	b2db      	uxtb	r3, r3
 8006514:	461a      	mov	r2, r3
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800651a:	e00d      	b.n	8006538 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800651c:	6839      	ldr	r1, [r7, #0]
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f001 f82e 	bl	8007580 <USBD_CtlError>
            ret = USBD_FAIL;
 8006524:	2302      	movs	r3, #2
 8006526:	75fb      	strb	r3, [r7, #23]
          break;
 8006528:	e006      	b.n	8006538 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f001 f827 	bl	8007580 <USBD_CtlError>
          ret = USBD_FAIL;
 8006532:	2302      	movs	r3, #2
 8006534:	75fb      	strb	r3, [r7, #23]
          break;
 8006536:	bf00      	nop
      }
      break;
 8006538:	e006      	b.n	8006548 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800653a:	6839      	ldr	r1, [r7, #0]
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f001 f81f 	bl	8007580 <USBD_CtlError>
      ret = USBD_FAIL;
 8006542:	2302      	movs	r3, #2
 8006544:	75fb      	strb	r3, [r7, #23]
      break;
 8006546:	bf00      	nop
  }

  return ret;
 8006548:	7dfb      	ldrb	r3, [r7, #23]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3720      	adds	r7, #32
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	200000c8 	.word	0x200000c8
 8006558:	200000b0 	.word	0x200000b0

0800655c <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	4613      	mov	r3, r2
 8006568:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006570:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006578:	2b03      	cmp	r3, #3
 800657a:	d10c      	bne.n	8006596 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	7b1b      	ldrb	r3, [r3, #12]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d108      	bne.n	8006596 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	2201      	movs	r2, #1
 8006588:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 800658a:	88fb      	ldrh	r3, [r7, #6]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	2181      	movs	r1, #129	; 0x81
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f001 fbdf 	bl	8007d54 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3718      	adds	r7, #24
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2222      	movs	r2, #34	; 0x22
 80065ac:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80065ae:	4b03      	ldr	r3, [pc, #12]	; (80065bc <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bc80      	pop	{r7}
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	20000044 	.word	0x20000044

080065c0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2222      	movs	r2, #34	; 0x22
 80065cc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80065ce:	4b03      	ldr	r3, [pc, #12]	; (80065dc <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bc80      	pop	{r7}
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	20000068 	.word	0x20000068

080065e0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2222      	movs	r2, #34	; 0x22
 80065ec:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80065ee:	4b03      	ldr	r3, [pc, #12]	; (80065fc <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bc80      	pop	{r7}
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	2000008c 	.word	0x2000008c

08006600 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	460b      	mov	r3, r1
 800660a:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006612:	2200      	movs	r2, #0
 8006614:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	bc80      	pop	{r7}
 8006620:	4770      	bx	lr
	...

08006624 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	220a      	movs	r2, #10
 8006630:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006632:	4b03      	ldr	r3, [pc, #12]	; (8006640 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006634:	4618      	mov	r0, r3
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	bc80      	pop	{r7}
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	200000bc 	.word	0x200000bc

08006644 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	4613      	mov	r3, r2
 8006650:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006658:	2302      	movs	r3, #2
 800665a:	e01a      	b.n	8006692 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d003      	beq.n	800667c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	79fa      	ldrb	r2, [r7, #7]
 8006688:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f001 fa38 	bl	8007b00 <USBD_LL_Init>

  return USBD_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800669a:	b480      	push	{r7}
 800669c:	b085      	sub	sp, #20
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80066a4:	2300      	movs	r3, #0
 80066a6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d006      	beq.n	80066bc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	73fb      	strb	r3, [r7, #15]
 80066ba:	e001      	b.n	80066c0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80066bc:	2302      	movs	r3, #2
 80066be:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bc80      	pop	{r7}
 80066ca:	4770      	bx	lr

080066cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f001 fa5b 	bl	8007b90 <USBD_LL_Start>

  return USBD_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bc80      	pop	{r7}
 80066f6:	4770      	bx	lr

080066f8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	460b      	mov	r3, r1
 8006702:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006704:	2302      	movs	r3, #2
 8006706:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00c      	beq.n	800672c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	78fa      	ldrb	r2, [r7, #3]
 800671c:	4611      	mov	r1, r2
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	4798      	blx	r3
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006728:	2300      	movs	r3, #0
 800672a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800672c:	7bfb      	ldrb	r3, [r7, #15]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b082      	sub	sp, #8
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	460b      	mov	r3, r1
 8006740:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	78fa      	ldrb	r2, [r7, #3]
 800674c:	4611      	mov	r1, r2
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	4798      	blx	r3

  return USBD_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800676c:	6839      	ldr	r1, [r7, #0]
 800676e:	4618      	mov	r0, r3
 8006770:	f000 feca 	bl	8007508 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006782:	461a      	mov	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006790:	f003 031f 	and.w	r3, r3, #31
 8006794:	2b01      	cmp	r3, #1
 8006796:	d00c      	beq.n	80067b2 <USBD_LL_SetupStage+0x56>
 8006798:	2b01      	cmp	r3, #1
 800679a:	d302      	bcc.n	80067a2 <USBD_LL_SetupStage+0x46>
 800679c:	2b02      	cmp	r3, #2
 800679e:	d010      	beq.n	80067c2 <USBD_LL_SetupStage+0x66>
 80067a0:	e017      	b.n	80067d2 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80067a8:	4619      	mov	r1, r3
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f9ca 	bl	8006b44 <USBD_StdDevReq>
      break;
 80067b0:	e01a      	b.n	80067e8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80067b8:	4619      	mov	r1, r3
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fa2c 	bl	8006c18 <USBD_StdItfReq>
      break;
 80067c0:	e012      	b.n	80067e8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80067c8:	4619      	mov	r1, r3
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 fa6a 	bl	8006ca4 <USBD_StdEPReq>
      break;
 80067d0:	e00a      	b.n	80067e8 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80067d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	4619      	mov	r1, r3
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f001 fa35 	bl	8007c50 <USBD_LL_StallEP>
      break;
 80067e6:	bf00      	nop
  }

  return USBD_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b086      	sub	sp, #24
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	60f8      	str	r0, [r7, #12]
 80067fa:	460b      	mov	r3, r1
 80067fc:	607a      	str	r2, [r7, #4]
 80067fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006800:	7afb      	ldrb	r3, [r7, #11]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d14b      	bne.n	800689e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800680c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006814:	2b03      	cmp	r3, #3
 8006816:	d134      	bne.n	8006882 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	68da      	ldr	r2, [r3, #12]
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	429a      	cmp	r2, r3
 8006822:	d919      	bls.n	8006858 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	68da      	ldr	r2, [r3, #12]
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	1ad2      	subs	r2, r2, r3
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800683a:	429a      	cmp	r2, r3
 800683c:	d203      	bcs.n	8006846 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006842:	b29b      	uxth	r3, r3
 8006844:	e002      	b.n	800684c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800684a:	b29b      	uxth	r3, r3
 800684c:	461a      	mov	r2, r3
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 ff2d 	bl	80076b0 <USBD_CtlContinueRx>
 8006856:	e038      	b.n	80068ca <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00a      	beq.n	800687a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800686a:	2b03      	cmp	r3, #3
 800686c:	d105      	bne.n	800687a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f000 ff2a 	bl	80076d4 <USBD_CtlSendStatus>
 8006880:	e023      	b.n	80068ca <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006888:	2b05      	cmp	r3, #5
 800688a:	d11e      	bne.n	80068ca <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006894:	2100      	movs	r1, #0
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f001 f9da 	bl	8007c50 <USBD_LL_StallEP>
 800689c:	e015      	b.n	80068ca <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00d      	beq.n	80068c6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80068b0:	2b03      	cmp	r3, #3
 80068b2:	d108      	bne.n	80068c6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	7afa      	ldrb	r2, [r7, #11]
 80068be:	4611      	mov	r1, r2
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	4798      	blx	r3
 80068c4:	e001      	b.n	80068ca <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80068c6:	2302      	movs	r3, #2
 80068c8:	e000      	b.n	80068cc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	460b      	mov	r3, r1
 80068de:	607a      	str	r2, [r7, #4]
 80068e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80068e2:	7afb      	ldrb	r3, [r7, #11]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d17f      	bne.n	80069e8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	3314      	adds	r3, #20
 80068ec:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d15c      	bne.n	80069b2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	429a      	cmp	r2, r3
 8006902:	d915      	bls.n	8006930 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	1ad2      	subs	r2, r2, r3
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	b29b      	uxth	r3, r3
 8006918:	461a      	mov	r2, r3
 800691a:	6879      	ldr	r1, [r7, #4]
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f000 feb5 	bl	800768c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006922:	2300      	movs	r3, #0
 8006924:	2200      	movs	r2, #0
 8006926:	2100      	movs	r1, #0
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f001 fa36 	bl	8007d9a <USBD_LL_PrepareReceive>
 800692e:	e04e      	b.n	80069ce <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	6912      	ldr	r2, [r2, #16]
 8006938:	fbb3 f1f2 	udiv	r1, r3, r2
 800693c:	fb02 f201 	mul.w	r2, r2, r1
 8006940:	1a9b      	subs	r3, r3, r2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d11c      	bne.n	8006980 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800694e:	429a      	cmp	r2, r3
 8006950:	d316      	bcc.n	8006980 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800695c:	429a      	cmp	r2, r3
 800695e:	d20f      	bcs.n	8006980 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006960:	2200      	movs	r2, #0
 8006962:	2100      	movs	r1, #0
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f000 fe91 	bl	800768c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006972:	2300      	movs	r3, #0
 8006974:	2200      	movs	r2, #0
 8006976:	2100      	movs	r1, #0
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f001 fa0e 	bl	8007d9a <USBD_LL_PrepareReceive>
 800697e:	e026      	b.n	80069ce <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00a      	beq.n	80069a2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006992:	2b03      	cmp	r3, #3
 8006994:	d105      	bne.n	80069a2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80069a2:	2180      	movs	r1, #128	; 0x80
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f001 f953 	bl	8007c50 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f000 fea5 	bl	80076fa <USBD_CtlReceiveStatus>
 80069b0:	e00d      	b.n	80069ce <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069b8:	2b04      	cmp	r3, #4
 80069ba:	d004      	beq.n	80069c6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d103      	bne.n	80069ce <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80069c6:	2180      	movs	r1, #128	; 0x80
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f001 f941 	bl	8007c50 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d11d      	bne.n	8006a14 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f7ff fe83 	bl	80066e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80069e6:	e015      	b.n	8006a14 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00d      	beq.n	8006a10 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d108      	bne.n	8006a10 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	7afa      	ldrb	r2, [r7, #11]
 8006a08:	4611      	mov	r1, r2
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	4798      	blx	r3
 8006a0e:	e001      	b.n	8006a14 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a10:	2302      	movs	r3, #2
 8006a12:	e000      	b.n	8006a16 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3718      	adds	r7, #24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b082      	sub	sp, #8
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a26:	2340      	movs	r3, #64	; 0x40
 8006a28:	2200      	movs	r2, #0
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 f8ca 	bl	8007bc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2240      	movs	r2, #64	; 0x40
 8006a3e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a42:	2340      	movs	r3, #64	; 0x40
 8006a44:	2200      	movs	r2, #0
 8006a46:	2180      	movs	r1, #128	; 0x80
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f001 f8bc 	bl	8007bc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2240      	movs	r2, #64	; 0x40
 8006a58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d009      	beq.n	8006a96 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	6852      	ldr	r2, [r2, #4]
 8006a8e:	b2d2      	uxtb	r2, r2
 8006a90:	4611      	mov	r1, r2
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	4798      	blx	r3
  }

  return USBD_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	78fa      	ldrb	r2, [r7, #3]
 8006ab0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bc80      	pop	{r7}
 8006abc:	4770      	bx	lr

08006abe <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b083      	sub	sp, #12
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2204      	movs	r2, #4
 8006ad6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bc80      	pop	{r7}
 8006ae4:	4770      	bx	lr

08006ae6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b083      	sub	sp, #12
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	d105      	bne.n	8006b04 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bc80      	pop	{r7}
 8006b0e:	4770      	bx	lr

08006b10 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b1e:	2b03      	cmp	r3, #3
 8006b20:	d10b      	bne.n	8006b3a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d005      	beq.n	8006b3a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b5a:	2b20      	cmp	r3, #32
 8006b5c:	d004      	beq.n	8006b68 <USBD_StdDevReq+0x24>
 8006b5e:	2b40      	cmp	r3, #64	; 0x40
 8006b60:	d002      	beq.n	8006b68 <USBD_StdDevReq+0x24>
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d008      	beq.n	8006b78 <USBD_StdDevReq+0x34>
 8006b66:	e04c      	b.n	8006c02 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	4798      	blx	r3
      break;
 8006b76:	e049      	b.n	8006c0c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	785b      	ldrb	r3, [r3, #1]
 8006b7c:	2b09      	cmp	r3, #9
 8006b7e:	d83a      	bhi.n	8006bf6 <USBD_StdDevReq+0xb2>
 8006b80:	a201      	add	r2, pc, #4	; (adr r2, 8006b88 <USBD_StdDevReq+0x44>)
 8006b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b86:	bf00      	nop
 8006b88:	08006bd9 	.word	0x08006bd9
 8006b8c:	08006bed 	.word	0x08006bed
 8006b90:	08006bf7 	.word	0x08006bf7
 8006b94:	08006be3 	.word	0x08006be3
 8006b98:	08006bf7 	.word	0x08006bf7
 8006b9c:	08006bbb 	.word	0x08006bbb
 8006ba0:	08006bb1 	.word	0x08006bb1
 8006ba4:	08006bf7 	.word	0x08006bf7
 8006ba8:	08006bcf 	.word	0x08006bcf
 8006bac:	08006bc5 	.word	0x08006bc5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006bb0:	6839      	ldr	r1, [r7, #0]
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f9d4 	bl	8006f60 <USBD_GetDescriptor>
          break;
 8006bb8:	e022      	b.n	8006c00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fb37 	bl	8007230 <USBD_SetAddress>
          break;
 8006bc2:	e01d      	b.n	8006c00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fb74 	bl	80072b4 <USBD_SetConfig>
          break;
 8006bcc:	e018      	b.n	8006c00 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fbfd 	bl	80073d0 <USBD_GetConfig>
          break;
 8006bd6:	e013      	b.n	8006c00 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fc2c 	bl	8007438 <USBD_GetStatus>
          break;
 8006be0:	e00e      	b.n	8006c00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006be2:	6839      	ldr	r1, [r7, #0]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fc5a 	bl	800749e <USBD_SetFeature>
          break;
 8006bea:	e009      	b.n	8006c00 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006bec:	6839      	ldr	r1, [r7, #0]
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fc69 	bl	80074c6 <USBD_ClrFeature>
          break;
 8006bf4:	e004      	b.n	8006c00 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fcc1 	bl	8007580 <USBD_CtlError>
          break;
 8006bfe:	bf00      	nop
      }
      break;
 8006c00:	e004      	b.n	8006c0c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006c02:	6839      	ldr	r1, [r7, #0]
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fcbb 	bl	8007580 <USBD_CtlError>
      break;
 8006c0a:	bf00      	nop
  }

  return ret;
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop

08006c18 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c2e:	2b20      	cmp	r3, #32
 8006c30:	d003      	beq.n	8006c3a <USBD_StdItfReq+0x22>
 8006c32:	2b40      	cmp	r3, #64	; 0x40
 8006c34:	d001      	beq.n	8006c3a <USBD_StdItfReq+0x22>
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d12a      	bne.n	8006c90 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c40:	3b01      	subs	r3, #1
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d81d      	bhi.n	8006c82 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	889b      	ldrh	r3, [r3, #4]
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d813      	bhi.n	8006c78 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	6839      	ldr	r1, [r7, #0]
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	4798      	blx	r3
 8006c5e:	4603      	mov	r3, r0
 8006c60:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	88db      	ldrh	r3, [r3, #6]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d110      	bne.n	8006c8c <USBD_StdItfReq+0x74>
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10d      	bne.n	8006c8c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 fd2f 	bl	80076d4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c76:	e009      	b.n	8006c8c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fc80 	bl	8007580 <USBD_CtlError>
          break;
 8006c80:	e004      	b.n	8006c8c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fc7b 	bl	8007580 <USBD_CtlError>
          break;
 8006c8a:	e000      	b.n	8006c8e <USBD_StdItfReq+0x76>
          break;
 8006c8c:	bf00      	nop
      }
      break;
 8006c8e:	e004      	b.n	8006c9a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fc74 	bl	8007580 <USBD_CtlError>
      break;
 8006c98:	bf00      	nop
  }

  return USBD_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	889b      	ldrh	r3, [r3, #4]
 8006cb6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cc0:	2b20      	cmp	r3, #32
 8006cc2:	d004      	beq.n	8006cce <USBD_StdEPReq+0x2a>
 8006cc4:	2b40      	cmp	r3, #64	; 0x40
 8006cc6:	d002      	beq.n	8006cce <USBD_StdEPReq+0x2a>
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d008      	beq.n	8006cde <USBD_StdEPReq+0x3a>
 8006ccc:	e13d      	b.n	8006f4a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	4798      	blx	r3
      break;
 8006cdc:	e13a      	b.n	8006f54 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ce6:	2b20      	cmp	r3, #32
 8006ce8:	d10a      	bne.n	8006d00 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	4798      	blx	r3
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
 8006cfe:	e12a      	b.n	8006f56 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	785b      	ldrb	r3, [r3, #1]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d03e      	beq.n	8006d86 <USBD_StdEPReq+0xe2>
 8006d08:	2b03      	cmp	r3, #3
 8006d0a:	d002      	beq.n	8006d12 <USBD_StdEPReq+0x6e>
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d070      	beq.n	8006df2 <USBD_StdEPReq+0x14e>
 8006d10:	e115      	b.n	8006f3e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d002      	beq.n	8006d22 <USBD_StdEPReq+0x7e>
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d015      	beq.n	8006d4c <USBD_StdEPReq+0xa8>
 8006d20:	e02b      	b.n	8006d7a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d22:	7bbb      	ldrb	r3, [r7, #14]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00c      	beq.n	8006d42 <USBD_StdEPReq+0x9e>
 8006d28:	7bbb      	ldrb	r3, [r7, #14]
 8006d2a:	2b80      	cmp	r3, #128	; 0x80
 8006d2c:	d009      	beq.n	8006d42 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006d2e:	7bbb      	ldrb	r3, [r7, #14]
 8006d30:	4619      	mov	r1, r3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 ff8c 	bl	8007c50 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006d38:	2180      	movs	r1, #128	; 0x80
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 ff88 	bl	8007c50 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d40:	e020      	b.n	8006d84 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 fc1b 	bl	8007580 <USBD_CtlError>
              break;
 8006d4a:	e01b      	b.n	8006d84 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	885b      	ldrh	r3, [r3, #2]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10e      	bne.n	8006d72 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006d54:	7bbb      	ldrb	r3, [r7, #14]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00b      	beq.n	8006d72 <USBD_StdEPReq+0xce>
 8006d5a:	7bbb      	ldrb	r3, [r7, #14]
 8006d5c:	2b80      	cmp	r3, #128	; 0x80
 8006d5e:	d008      	beq.n	8006d72 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	88db      	ldrh	r3, [r3, #6]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d104      	bne.n	8006d72 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006d68:	7bbb      	ldrb	r3, [r7, #14]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 ff6f 	bl	8007c50 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 fcae 	bl	80076d4 <USBD_CtlSendStatus>

              break;
 8006d78:	e004      	b.n	8006d84 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fbff 	bl	8007580 <USBD_CtlError>
              break;
 8006d82:	bf00      	nop
          }
          break;
 8006d84:	e0e0      	b.n	8006f48 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d002      	beq.n	8006d96 <USBD_StdEPReq+0xf2>
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d015      	beq.n	8006dc0 <USBD_StdEPReq+0x11c>
 8006d94:	e026      	b.n	8006de4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d96:	7bbb      	ldrb	r3, [r7, #14]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00c      	beq.n	8006db6 <USBD_StdEPReq+0x112>
 8006d9c:	7bbb      	ldrb	r3, [r7, #14]
 8006d9e:	2b80      	cmp	r3, #128	; 0x80
 8006da0:	d009      	beq.n	8006db6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006da2:	7bbb      	ldrb	r3, [r7, #14]
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 ff52 	bl	8007c50 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006dac:	2180      	movs	r1, #128	; 0x80
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 ff4e 	bl	8007c50 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006db4:	e01c      	b.n	8006df0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fbe1 	bl	8007580 <USBD_CtlError>
              break;
 8006dbe:	e017      	b.n	8006df0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	885b      	ldrh	r3, [r3, #2]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d112      	bne.n	8006dee <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d004      	beq.n	8006ddc <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006dd2:	7bbb      	ldrb	r3, [r7, #14]
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 ff59 	bl	8007c8e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fc79 	bl	80076d4 <USBD_CtlSendStatus>
              }
              break;
 8006de2:	e004      	b.n	8006dee <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fbca 	bl	8007580 <USBD_CtlError>
              break;
 8006dec:	e000      	b.n	8006df0 <USBD_StdEPReq+0x14c>
              break;
 8006dee:	bf00      	nop
          }
          break;
 8006df0:	e0aa      	b.n	8006f48 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d002      	beq.n	8006e02 <USBD_StdEPReq+0x15e>
 8006dfc:	2b03      	cmp	r3, #3
 8006dfe:	d032      	beq.n	8006e66 <USBD_StdEPReq+0x1c2>
 8006e00:	e097      	b.n	8006f32 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e02:	7bbb      	ldrb	r3, [r7, #14]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d007      	beq.n	8006e18 <USBD_StdEPReq+0x174>
 8006e08:	7bbb      	ldrb	r3, [r7, #14]
 8006e0a:	2b80      	cmp	r3, #128	; 0x80
 8006e0c:	d004      	beq.n	8006e18 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fbb5 	bl	8007580 <USBD_CtlError>
                break;
 8006e16:	e091      	b.n	8006f3c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	da0b      	bge.n	8006e38 <USBD_StdEPReq+0x194>
 8006e20:	7bbb      	ldrb	r3, [r7, #14]
 8006e22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e26:	4613      	mov	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	3310      	adds	r3, #16
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	4413      	add	r3, r2
 8006e34:	3304      	adds	r3, #4
 8006e36:	e00b      	b.n	8006e50 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e38:	7bbb      	ldrb	r3, [r7, #14]
 8006e3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e3e:	4613      	mov	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	3304      	adds	r3, #4
 8006e50:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fbf8 	bl	8007654 <USBD_CtlSendData>
              break;
 8006e64:	e06a      	b.n	8006f3c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006e66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	da11      	bge.n	8006e92 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e6e:	7bbb      	ldrb	r3, [r7, #14]
 8006e70:	f003 020f 	and.w	r2, r3, #15
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	4613      	mov	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4413      	add	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	440b      	add	r3, r1
 8006e80:	3318      	adds	r3, #24
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d117      	bne.n	8006eb8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006e88:	6839      	ldr	r1, [r7, #0]
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fb78 	bl	8007580 <USBD_CtlError>
                  break;
 8006e90:	e054      	b.n	8006f3c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e92:	7bbb      	ldrb	r3, [r7, #14]
 8006e94:	f003 020f 	and.w	r2, r3, #15
 8006e98:	6879      	ldr	r1, [r7, #4]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	440b      	add	r3, r1
 8006ea4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d104      	bne.n	8006eb8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006eae:	6839      	ldr	r1, [r7, #0]
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fb65 	bl	8007580 <USBD_CtlError>
                  break;
 8006eb6:	e041      	b.n	8006f3c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006eb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	da0b      	bge.n	8006ed8 <USBD_StdEPReq+0x234>
 8006ec0:	7bbb      	ldrb	r3, [r7, #14]
 8006ec2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	3310      	adds	r3, #16
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	e00b      	b.n	8006ef0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ed8:	7bbb      	ldrb	r3, [r7, #14]
 8006eda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ede:	4613      	mov	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	4413      	add	r3, r2
 8006eee:	3304      	adds	r3, #4
 8006ef0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006ef2:	7bbb      	ldrb	r3, [r7, #14]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <USBD_StdEPReq+0x25a>
 8006ef8:	7bbb      	ldrb	r3, [r7, #14]
 8006efa:	2b80      	cmp	r3, #128	; 0x80
 8006efc:	d103      	bne.n	8006f06 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2200      	movs	r2, #0
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	e00e      	b.n	8006f24 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006f06:	7bbb      	ldrb	r3, [r7, #14]
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fede 	bl	8007ccc <USBD_LL_IsStallEP>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	601a      	str	r2, [r3, #0]
 8006f1c:	e002      	b.n	8006f24 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2200      	movs	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2202      	movs	r2, #2
 8006f28:	4619      	mov	r1, r3
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fb92 	bl	8007654 <USBD_CtlSendData>
              break;
 8006f30:	e004      	b.n	8006f3c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006f32:	6839      	ldr	r1, [r7, #0]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fb23 	bl	8007580 <USBD_CtlError>
              break;
 8006f3a:	bf00      	nop
          }
          break;
 8006f3c:	e004      	b.n	8006f48 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fb1d 	bl	8007580 <USBD_CtlError>
          break;
 8006f46:	bf00      	nop
      }
      break;
 8006f48:	e004      	b.n	8006f54 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006f4a:	6839      	ldr	r1, [r7, #0]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fb17 	bl	8007580 <USBD_CtlError>
      break;
 8006f52:	bf00      	nop
  }

  return ret;
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
	...

08006f60 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	885b      	ldrh	r3, [r3, #2]
 8006f7a:	0a1b      	lsrs	r3, r3, #8
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	2b06      	cmp	r3, #6
 8006f82:	f200 8128 	bhi.w	80071d6 <USBD_GetDescriptor+0x276>
 8006f86:	a201      	add	r2, pc, #4	; (adr r2, 8006f8c <USBD_GetDescriptor+0x2c>)
 8006f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8c:	08006fa9 	.word	0x08006fa9
 8006f90:	08006fc1 	.word	0x08006fc1
 8006f94:	08007001 	.word	0x08007001
 8006f98:	080071d7 	.word	0x080071d7
 8006f9c:	080071d7 	.word	0x080071d7
 8006fa0:	08007177 	.word	0x08007177
 8006fa4:	080071a3 	.word	0x080071a3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	7c12      	ldrb	r2, [r2, #16]
 8006fb4:	f107 0108 	add.w	r1, r7, #8
 8006fb8:	4610      	mov	r0, r2
 8006fba:	4798      	blx	r3
 8006fbc:	60f8      	str	r0, [r7, #12]
      break;
 8006fbe:	e112      	b.n	80071e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	7c1b      	ldrb	r3, [r3, #16]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10d      	bne.n	8006fe4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd0:	f107 0208 	add.w	r2, r7, #8
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	4798      	blx	r3
 8006fd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	2202      	movs	r2, #2
 8006fe0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006fe2:	e100      	b.n	80071e6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fec:	f107 0208 	add.w	r2, r7, #8
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	4798      	blx	r3
 8006ff4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	701a      	strb	r2, [r3, #0]
      break;
 8006ffe:	e0f2      	b.n	80071e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	885b      	ldrh	r3, [r3, #2]
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b05      	cmp	r3, #5
 8007008:	f200 80ac 	bhi.w	8007164 <USBD_GetDescriptor+0x204>
 800700c:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <USBD_GetDescriptor+0xb4>)
 800700e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007012:	bf00      	nop
 8007014:	0800702d 	.word	0x0800702d
 8007018:	08007061 	.word	0x08007061
 800701c:	08007095 	.word	0x08007095
 8007020:	080070c9 	.word	0x080070c9
 8007024:	080070fd 	.word	0x080070fd
 8007028:	08007131 	.word	0x08007131
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00b      	beq.n	8007050 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	7c12      	ldrb	r2, [r2, #16]
 8007044:	f107 0108 	add.w	r1, r7, #8
 8007048:	4610      	mov	r0, r2
 800704a:	4798      	blx	r3
 800704c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800704e:	e091      	b.n	8007174 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007050:	6839      	ldr	r1, [r7, #0]
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fa94 	bl	8007580 <USBD_CtlError>
            err++;
 8007058:	7afb      	ldrb	r3, [r7, #11]
 800705a:	3301      	adds	r3, #1
 800705c:	72fb      	strb	r3, [r7, #11]
          break;
 800705e:	e089      	b.n	8007174 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00b      	beq.n	8007084 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	7c12      	ldrb	r2, [r2, #16]
 8007078:	f107 0108 	add.w	r1, r7, #8
 800707c:	4610      	mov	r0, r2
 800707e:	4798      	blx	r3
 8007080:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007082:	e077      	b.n	8007174 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007084:	6839      	ldr	r1, [r7, #0]
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fa7a 	bl	8007580 <USBD_CtlError>
            err++;
 800708c:	7afb      	ldrb	r3, [r7, #11]
 800708e:	3301      	adds	r3, #1
 8007090:	72fb      	strb	r3, [r7, #11]
          break;
 8007092:	e06f      	b.n	8007174 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00b      	beq.n	80070b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	7c12      	ldrb	r2, [r2, #16]
 80070ac:	f107 0108 	add.w	r1, r7, #8
 80070b0:	4610      	mov	r0, r2
 80070b2:	4798      	blx	r3
 80070b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070b6:	e05d      	b.n	8007174 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fa60 	bl	8007580 <USBD_CtlError>
            err++;
 80070c0:	7afb      	ldrb	r3, [r7, #11]
 80070c2:	3301      	adds	r3, #1
 80070c4:	72fb      	strb	r3, [r7, #11]
          break;
 80070c6:	e055      	b.n	8007174 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00b      	beq.n	80070ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	7c12      	ldrb	r2, [r2, #16]
 80070e0:	f107 0108 	add.w	r1, r7, #8
 80070e4:	4610      	mov	r0, r2
 80070e6:	4798      	blx	r3
 80070e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070ea:	e043      	b.n	8007174 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070ec:	6839      	ldr	r1, [r7, #0]
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fa46 	bl	8007580 <USBD_CtlError>
            err++;
 80070f4:	7afb      	ldrb	r3, [r7, #11]
 80070f6:	3301      	adds	r3, #1
 80070f8:	72fb      	strb	r3, [r7, #11]
          break;
 80070fa:	e03b      	b.n	8007174 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00b      	beq.n	8007120 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800710e:	695b      	ldr	r3, [r3, #20]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	7c12      	ldrb	r2, [r2, #16]
 8007114:	f107 0108 	add.w	r1, r7, #8
 8007118:	4610      	mov	r0, r2
 800711a:	4798      	blx	r3
 800711c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800711e:	e029      	b.n	8007174 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007120:	6839      	ldr	r1, [r7, #0]
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fa2c 	bl	8007580 <USBD_CtlError>
            err++;
 8007128:	7afb      	ldrb	r3, [r7, #11]
 800712a:	3301      	adds	r3, #1
 800712c:	72fb      	strb	r3, [r7, #11]
          break;
 800712e:	e021      	b.n	8007174 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00b      	beq.n	8007154 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	7c12      	ldrb	r2, [r2, #16]
 8007148:	f107 0108 	add.w	r1, r7, #8
 800714c:	4610      	mov	r0, r2
 800714e:	4798      	blx	r3
 8007150:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007152:	e00f      	b.n	8007174 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fa12 	bl	8007580 <USBD_CtlError>
            err++;
 800715c:	7afb      	ldrb	r3, [r7, #11]
 800715e:	3301      	adds	r3, #1
 8007160:	72fb      	strb	r3, [r7, #11]
          break;
 8007162:	e007      	b.n	8007174 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fa0a 	bl	8007580 <USBD_CtlError>
          err++;
 800716c:	7afb      	ldrb	r3, [r7, #11]
 800716e:	3301      	adds	r3, #1
 8007170:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007172:	e038      	b.n	80071e6 <USBD_GetDescriptor+0x286>
 8007174:	e037      	b.n	80071e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	7c1b      	ldrb	r3, [r3, #16]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d109      	bne.n	8007192 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007186:	f107 0208 	add.w	r2, r7, #8
 800718a:	4610      	mov	r0, r2
 800718c:	4798      	blx	r3
 800718e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007190:	e029      	b.n	80071e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f9f3 	bl	8007580 <USBD_CtlError>
        err++;
 800719a:	7afb      	ldrb	r3, [r7, #11]
 800719c:	3301      	adds	r3, #1
 800719e:	72fb      	strb	r3, [r7, #11]
      break;
 80071a0:	e021      	b.n	80071e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	7c1b      	ldrb	r3, [r3, #16]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10d      	bne.n	80071c6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b2:	f107 0208 	add.w	r2, r7, #8
 80071b6:	4610      	mov	r0, r2
 80071b8:	4798      	blx	r3
 80071ba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	3301      	adds	r3, #1
 80071c0:	2207      	movs	r2, #7
 80071c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071c4:	e00f      	b.n	80071e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f9d9 	bl	8007580 <USBD_CtlError>
        err++;
 80071ce:	7afb      	ldrb	r3, [r7, #11]
 80071d0:	3301      	adds	r3, #1
 80071d2:	72fb      	strb	r3, [r7, #11]
      break;
 80071d4:	e007      	b.n	80071e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80071d6:	6839      	ldr	r1, [r7, #0]
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f9d1 	bl	8007580 <USBD_CtlError>
      err++;
 80071de:	7afb      	ldrb	r3, [r7, #11]
 80071e0:	3301      	adds	r3, #1
 80071e2:	72fb      	strb	r3, [r7, #11]
      break;
 80071e4:	bf00      	nop
  }

  if (err != 0U)
 80071e6:	7afb      	ldrb	r3, [r7, #11]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d11c      	bne.n	8007226 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80071ec:	893b      	ldrh	r3, [r7, #8]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d011      	beq.n	8007216 <USBD_GetDescriptor+0x2b6>
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	88db      	ldrh	r3, [r3, #6]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00d      	beq.n	8007216 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	88da      	ldrh	r2, [r3, #6]
 80071fe:	893b      	ldrh	r3, [r7, #8]
 8007200:	4293      	cmp	r3, r2
 8007202:	bf28      	it	cs
 8007204:	4613      	movcs	r3, r2
 8007206:	b29b      	uxth	r3, r3
 8007208:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800720a:	893b      	ldrh	r3, [r7, #8]
 800720c:	461a      	mov	r2, r3
 800720e:	68f9      	ldr	r1, [r7, #12]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fa1f 	bl	8007654 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	88db      	ldrh	r3, [r3, #6]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d104      	bne.n	8007228 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fa58 	bl	80076d4 <USBD_CtlSendStatus>
 8007224:	e000      	b.n	8007228 <USBD_GetDescriptor+0x2c8>
    return;
 8007226:	bf00      	nop
    }
  }
}
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop

08007230 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	889b      	ldrh	r3, [r3, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d130      	bne.n	80072a4 <USBD_SetAddress+0x74>
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	88db      	ldrh	r3, [r3, #6]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d12c      	bne.n	80072a4 <USBD_SetAddress+0x74>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	885b      	ldrh	r3, [r3, #2]
 800724e:	2b7f      	cmp	r3, #127	; 0x7f
 8007250:	d828      	bhi.n	80072a4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	885b      	ldrh	r3, [r3, #2]
 8007256:	b2db      	uxtb	r3, r3
 8007258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800725c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007264:	2b03      	cmp	r3, #3
 8007266:	d104      	bne.n	8007272 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f988 	bl	8007580 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007270:	e01c      	b.n	80072ac <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	7bfa      	ldrb	r2, [r7, #15]
 8007276:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800727a:	7bfb      	ldrb	r3, [r7, #15]
 800727c:	4619      	mov	r1, r3
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fd49 	bl	8007d16 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fa25 	bl	80076d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800728a:	7bfb      	ldrb	r3, [r7, #15]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d004      	beq.n	800729a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2202      	movs	r2, #2
 8007294:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007298:	e008      	b.n	80072ac <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072a2:	e003      	b.n	80072ac <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80072a4:	6839      	ldr	r1, [r7, #0]
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f96a 	bl	8007580 <USBD_CtlError>
  }
}
 80072ac:	bf00      	nop
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	885b      	ldrh	r3, [r3, #2]
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	4b41      	ldr	r3, [pc, #260]	; (80073cc <USBD_SetConfig+0x118>)
 80072c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80072c8:	4b40      	ldr	r3, [pc, #256]	; (80073cc <USBD_SetConfig+0x118>)
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d904      	bls.n	80072da <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f954 	bl	8007580 <USBD_CtlError>
 80072d8:	e075      	b.n	80073c6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d002      	beq.n	80072ea <USBD_SetConfig+0x36>
 80072e4:	2b03      	cmp	r3, #3
 80072e6:	d023      	beq.n	8007330 <USBD_SetConfig+0x7c>
 80072e8:	e062      	b.n	80073b0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80072ea:	4b38      	ldr	r3, [pc, #224]	; (80073cc <USBD_SetConfig+0x118>)
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d01a      	beq.n	8007328 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80072f2:	4b36      	ldr	r3, [pc, #216]	; (80073cc <USBD_SetConfig+0x118>)
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	461a      	mov	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2203      	movs	r2, #3
 8007300:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007304:	4b31      	ldr	r3, [pc, #196]	; (80073cc <USBD_SetConfig+0x118>)
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	4619      	mov	r1, r3
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f7ff f9f4 	bl	80066f8 <USBD_SetClassConfig>
 8007310:	4603      	mov	r3, r0
 8007312:	2b02      	cmp	r3, #2
 8007314:	d104      	bne.n	8007320 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007316:	6839      	ldr	r1, [r7, #0]
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f931 	bl	8007580 <USBD_CtlError>
            return;
 800731e:	e052      	b.n	80073c6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f9d7 	bl	80076d4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007326:	e04e      	b.n	80073c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f9d3 	bl	80076d4 <USBD_CtlSendStatus>
        break;
 800732e:	e04a      	b.n	80073c6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007330:	4b26      	ldr	r3, [pc, #152]	; (80073cc <USBD_SetConfig+0x118>)
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d112      	bne.n	800735e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2202      	movs	r2, #2
 800733c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007340:	4b22      	ldr	r3, [pc, #136]	; (80073cc <USBD_SetConfig+0x118>)
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	461a      	mov	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800734a:	4b20      	ldr	r3, [pc, #128]	; (80073cc <USBD_SetConfig+0x118>)
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	4619      	mov	r1, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f7ff f9f0 	bl	8006736 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f9bc 	bl	80076d4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800735c:	e033      	b.n	80073c6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800735e:	4b1b      	ldr	r3, [pc, #108]	; (80073cc <USBD_SetConfig+0x118>)
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	461a      	mov	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	429a      	cmp	r2, r3
 800736a:	d01d      	beq.n	80073a8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	b2db      	uxtb	r3, r3
 8007372:	4619      	mov	r1, r3
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7ff f9de 	bl	8006736 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800737a:	4b14      	ldr	r3, [pc, #80]	; (80073cc <USBD_SetConfig+0x118>)
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	461a      	mov	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007384:	4b11      	ldr	r3, [pc, #68]	; (80073cc <USBD_SetConfig+0x118>)
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	4619      	mov	r1, r3
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7ff f9b4 	bl	80066f8 <USBD_SetClassConfig>
 8007390:	4603      	mov	r3, r0
 8007392:	2b02      	cmp	r3, #2
 8007394:	d104      	bne.n	80073a0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007396:	6839      	ldr	r1, [r7, #0]
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f8f1 	bl	8007580 <USBD_CtlError>
            return;
 800739e:	e012      	b.n	80073c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f997 	bl	80076d4 <USBD_CtlSendStatus>
        break;
 80073a6:	e00e      	b.n	80073c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f993 	bl	80076d4 <USBD_CtlSendStatus>
        break;
 80073ae:	e00a      	b.n	80073c6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80073b0:	6839      	ldr	r1, [r7, #0]
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f8e4 	bl	8007580 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80073b8:	4b04      	ldr	r3, [pc, #16]	; (80073cc <USBD_SetConfig+0x118>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	4619      	mov	r1, r3
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff f9b9 	bl	8006736 <USBD_ClrClassConfig>
        break;
 80073c4:	bf00      	nop
    }
  }
}
 80073c6:	3708      	adds	r7, #8
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	20000185 	.word	0x20000185

080073d0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	88db      	ldrh	r3, [r3, #6]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d004      	beq.n	80073ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f8cb 	bl	8007580 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80073ea:	e021      	b.n	8007430 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	db17      	blt.n	8007426 <USBD_GetConfig+0x56>
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	dd02      	ble.n	8007400 <USBD_GetConfig+0x30>
 80073fa:	2b03      	cmp	r3, #3
 80073fc:	d00b      	beq.n	8007416 <USBD_GetConfig+0x46>
 80073fe:	e012      	b.n	8007426 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	3308      	adds	r3, #8
 800740a:	2201      	movs	r2, #1
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f920 	bl	8007654 <USBD_CtlSendData>
        break;
 8007414:	e00c      	b.n	8007430 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	3304      	adds	r3, #4
 800741a:	2201      	movs	r2, #1
 800741c:	4619      	mov	r1, r3
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f918 	bl	8007654 <USBD_CtlSendData>
        break;
 8007424:	e004      	b.n	8007430 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007426:	6839      	ldr	r1, [r7, #0]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f8a9 	bl	8007580 <USBD_CtlError>
        break;
 800742e:	bf00      	nop
}
 8007430:	bf00      	nop
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007448:	3b01      	subs	r3, #1
 800744a:	2b02      	cmp	r3, #2
 800744c:	d81e      	bhi.n	800748c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	88db      	ldrh	r3, [r3, #6]
 8007452:	2b02      	cmp	r3, #2
 8007454:	d004      	beq.n	8007460 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007456:	6839      	ldr	r1, [r7, #0]
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 f891 	bl	8007580 <USBD_CtlError>
        break;
 800745e:	e01a      	b.n	8007496 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800746c:	2b00      	cmp	r3, #0
 800746e:	d005      	beq.n	800747c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f043 0202 	orr.w	r2, r3, #2
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	330c      	adds	r3, #12
 8007480:	2202      	movs	r2, #2
 8007482:	4619      	mov	r1, r3
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f8e5 	bl	8007654 <USBD_CtlSendData>
      break;
 800748a:	e004      	b.n	8007496 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f876 	bl	8007580 <USBD_CtlError>
      break;
 8007494:	bf00      	nop
  }
}
 8007496:	bf00      	nop
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b082      	sub	sp, #8
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
 80074a6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	885b      	ldrh	r3, [r3, #2]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d106      	bne.n	80074be <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f90b 	bl	80076d4 <USBD_CtlSendStatus>
  }
}
 80074be:	bf00      	nop
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b082      	sub	sp, #8
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d6:	3b01      	subs	r3, #1
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d80b      	bhi.n	80074f4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	885b      	ldrh	r3, [r3, #2]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d10c      	bne.n	80074fe <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f8f1 	bl	80076d4 <USBD_CtlSendStatus>
      }
      break;
 80074f2:	e004      	b.n	80074fe <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f842 	bl	8007580 <USBD_CtlError>
      break;
 80074fc:	e000      	b.n	8007500 <USBD_ClrFeature+0x3a>
      break;
 80074fe:	bf00      	nop
  }
}
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	781a      	ldrb	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	785a      	ldrb	r2, [r3, #1]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	3302      	adds	r3, #2
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	b29a      	uxth	r2, r3
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	3303      	adds	r3, #3
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	b29b      	uxth	r3, r3
 8007532:	021b      	lsls	r3, r3, #8
 8007534:	b29b      	uxth	r3, r3
 8007536:	4413      	add	r3, r2
 8007538:	b29a      	uxth	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	3304      	adds	r3, #4
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	b29a      	uxth	r2, r3
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	3305      	adds	r3, #5
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	b29b      	uxth	r3, r3
 800754e:	021b      	lsls	r3, r3, #8
 8007550:	b29b      	uxth	r3, r3
 8007552:	4413      	add	r3, r2
 8007554:	b29a      	uxth	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	3306      	adds	r3, #6
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	b29a      	uxth	r2, r3
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	3307      	adds	r3, #7
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	b29b      	uxth	r3, r3
 800756a:	021b      	lsls	r3, r3, #8
 800756c:	b29b      	uxth	r3, r3
 800756e:	4413      	add	r3, r2
 8007570:	b29a      	uxth	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	80da      	strh	r2, [r3, #6]

}
 8007576:	bf00      	nop
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	bc80      	pop	{r7}
 800757e:	4770      	bx	lr

08007580 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800758a:	2180      	movs	r1, #128	; 0x80
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fb5f 	bl	8007c50 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007592:	2100      	movs	r1, #0
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fb5b 	bl	8007c50 <USBD_LL_StallEP>
}
 800759a:	bf00      	nop
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b086      	sub	sp, #24
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	60f8      	str	r0, [r7, #12]
 80075aa:	60b9      	str	r1, [r7, #8]
 80075ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d032      	beq.n	800761e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 f834 	bl	8007626 <USBD_GetLen>
 80075be:	4603      	mov	r3, r0
 80075c0:	3301      	adds	r3, #1
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80075cc:	7dfb      	ldrb	r3, [r7, #23]
 80075ce:	1c5a      	adds	r2, r3, #1
 80075d0:	75fa      	strb	r2, [r7, #23]
 80075d2:	461a      	mov	r2, r3
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	4413      	add	r3, r2
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	7812      	ldrb	r2, [r2, #0]
 80075dc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80075de:	7dfb      	ldrb	r3, [r7, #23]
 80075e0:	1c5a      	adds	r2, r3, #1
 80075e2:	75fa      	strb	r2, [r7, #23]
 80075e4:	461a      	mov	r2, r3
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	4413      	add	r3, r2
 80075ea:	2203      	movs	r2, #3
 80075ec:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80075ee:	e012      	b.n	8007616 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	1c5a      	adds	r2, r3, #1
 80075f4:	60fa      	str	r2, [r7, #12]
 80075f6:	7dfa      	ldrb	r2, [r7, #23]
 80075f8:	1c51      	adds	r1, r2, #1
 80075fa:	75f9      	strb	r1, [r7, #23]
 80075fc:	4611      	mov	r1, r2
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	440a      	add	r2, r1
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007606:	7dfb      	ldrb	r3, [r7, #23]
 8007608:	1c5a      	adds	r2, r3, #1
 800760a:	75fa      	strb	r2, [r7, #23]
 800760c:	461a      	mov	r2, r3
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	4413      	add	r3, r2
 8007612:	2200      	movs	r2, #0
 8007614:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1e8      	bne.n	80075f0 <USBD_GetString+0x4e>
    }
  }
}
 800761e:	bf00      	nop
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007626:	b480      	push	{r7}
 8007628:	b085      	sub	sp, #20
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800762e:	2300      	movs	r3, #0
 8007630:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007632:	e005      	b.n	8007640 <USBD_GetLen+0x1a>
  {
    len++;
 8007634:	7bfb      	ldrb	r3, [r7, #15]
 8007636:	3301      	adds	r3, #1
 8007638:	73fb      	strb	r3, [r7, #15]
    buf++;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	3301      	adds	r3, #1
 800763e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1f5      	bne.n	8007634 <USBD_GetLen+0xe>
  }

  return len;
 8007648:	7bfb      	ldrb	r3, [r7, #15]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	bc80      	pop	{r7}
 8007652:	4770      	bx	lr

08007654 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	4613      	mov	r3, r2
 8007660:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2202      	movs	r2, #2
 8007666:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800766a:	88fa      	ldrh	r2, [r7, #6]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007670:	88fa      	ldrh	r2, [r7, #6]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007676:	88fb      	ldrh	r3, [r7, #6]
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	2100      	movs	r1, #0
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 fb69 	bl	8007d54 <USBD_LL_Transmit>

  return USBD_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	4613      	mov	r3, r2
 8007698:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800769a:	88fb      	ldrh	r3, [r7, #6]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	2100      	movs	r1, #0
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 fb57 	bl	8007d54 <USBD_LL_Transmit>

  return USBD_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	4613      	mov	r3, r2
 80076bc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076be:	88fb      	ldrh	r3, [r7, #6]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	2100      	movs	r1, #0
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f000 fb68 	bl	8007d9a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2204      	movs	r2, #4
 80076e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80076e4:	2300      	movs	r3, #0
 80076e6:	2200      	movs	r2, #0
 80076e8:	2100      	movs	r1, #0
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fb32 	bl	8007d54 <USBD_LL_Transmit>

  return USBD_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b082      	sub	sp, #8
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2205      	movs	r2, #5
 8007706:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800770a:	2300      	movs	r3, #0
 800770c:	2200      	movs	r2, #0
 800770e:	2100      	movs	r1, #0
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fb42 	bl	8007d9a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3708      	adds	r7, #8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007724:	2200      	movs	r2, #0
 8007726:	490e      	ldr	r1, [pc, #56]	; (8007760 <MX_USB_DEVICE_Init+0x40>)
 8007728:	480e      	ldr	r0, [pc, #56]	; (8007764 <MX_USB_DEVICE_Init+0x44>)
 800772a:	f7fe ff8b 	bl	8006644 <USBD_Init>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007734:	f7fa f81a 	bl	800176c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007738:	490b      	ldr	r1, [pc, #44]	; (8007768 <MX_USB_DEVICE_Init+0x48>)
 800773a:	480a      	ldr	r0, [pc, #40]	; (8007764 <MX_USB_DEVICE_Init+0x44>)
 800773c:	f7fe ffad 	bl	800669a <USBD_RegisterClass>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007746:	f7fa f811 	bl	800176c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800774a:	4806      	ldr	r0, [pc, #24]	; (8007764 <MX_USB_DEVICE_Init+0x44>)
 800774c:	f7fe ffbe 	bl	80066cc <USBD_Start>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007756:	f7fa f809 	bl	800176c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800775a:	bf00      	nop
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	20000114 	.word	0x20000114
 8007764:	20000314 	.word	0x20000314
 8007768:	2000000c 	.word	0x2000000c

0800776c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	4603      	mov	r3, r0
 8007774:	6039      	str	r1, [r7, #0]
 8007776:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	2212      	movs	r2, #18
 800777c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800777e:	4b03      	ldr	r3, [pc, #12]	; (800778c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007780:	4618      	mov	r0, r3
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	bc80      	pop	{r7}
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	20000130 	.word	0x20000130

08007790 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	4603      	mov	r3, r0
 8007798:	6039      	str	r1, [r7, #0]
 800779a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2204      	movs	r2, #4
 80077a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80077a2:	4b03      	ldr	r3, [pc, #12]	; (80077b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bc80      	pop	{r7}
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	20000144 	.word	0x20000144

080077b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	4603      	mov	r3, r0
 80077bc:	6039      	str	r1, [r7, #0]
 80077be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077c0:	79fb      	ldrb	r3, [r7, #7]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d105      	bne.n	80077d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	4907      	ldr	r1, [pc, #28]	; (80077e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80077ca:	4808      	ldr	r0, [pc, #32]	; (80077ec <USBD_FS_ProductStrDescriptor+0x38>)
 80077cc:	f7ff fee9 	bl	80075a2 <USBD_GetString>
 80077d0:	e004      	b.n	80077dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	4904      	ldr	r1, [pc, #16]	; (80077e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80077d6:	4805      	ldr	r0, [pc, #20]	; (80077ec <USBD_FS_ProductStrDescriptor+0x38>)
 80077d8:	f7ff fee3 	bl	80075a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077dc:	4b02      	ldr	r3, [pc, #8]	; (80077e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	200005d8 	.word	0x200005d8
 80077ec:	08008004 	.word	0x08008004

080077f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	4603      	mov	r3, r0
 80077f8:	6039      	str	r1, [r7, #0]
 80077fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	4904      	ldr	r1, [pc, #16]	; (8007810 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007800:	4804      	ldr	r0, [pc, #16]	; (8007814 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007802:	f7ff fece 	bl	80075a2 <USBD_GetString>
  return USBD_StrDesc;
 8007806:	4b02      	ldr	r3, [pc, #8]	; (8007810 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007808:	4618      	mov	r0, r3
 800780a:	3708      	adds	r7, #8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	200005d8 	.word	0x200005d8
 8007814:	0800801c 	.word	0x0800801c

08007818 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	4603      	mov	r3, r0
 8007820:	6039      	str	r1, [r7, #0]
 8007822:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	221a      	movs	r2, #26
 8007828:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800782a:	f000 f843 	bl	80078b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800782e:	4b02      	ldr	r3, [pc, #8]	; (8007838 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007830:	4618      	mov	r0, r3
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	20000148 	.word	0x20000148

0800783c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	4603      	mov	r3, r0
 8007844:	6039      	str	r1, [r7, #0]
 8007846:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007848:	79fb      	ldrb	r3, [r7, #7]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d105      	bne.n	800785a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	4907      	ldr	r1, [pc, #28]	; (8007870 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007852:	4808      	ldr	r0, [pc, #32]	; (8007874 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007854:	f7ff fea5 	bl	80075a2 <USBD_GetString>
 8007858:	e004      	b.n	8007864 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800785a:	683a      	ldr	r2, [r7, #0]
 800785c:	4904      	ldr	r1, [pc, #16]	; (8007870 <USBD_FS_ConfigStrDescriptor+0x34>)
 800785e:	4805      	ldr	r0, [pc, #20]	; (8007874 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007860:	f7ff fe9f 	bl	80075a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007864:	4b02      	ldr	r3, [pc, #8]	; (8007870 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007866:	4618      	mov	r0, r3
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	200005d8 	.word	0x200005d8
 8007874:	08008030 	.word	0x08008030

08007878 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	4603      	mov	r3, r0
 8007880:	6039      	str	r1, [r7, #0]
 8007882:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007884:	79fb      	ldrb	r3, [r7, #7]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d105      	bne.n	8007896 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800788a:	683a      	ldr	r2, [r7, #0]
 800788c:	4907      	ldr	r1, [pc, #28]	; (80078ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800788e:	4808      	ldr	r0, [pc, #32]	; (80078b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007890:	f7ff fe87 	bl	80075a2 <USBD_GetString>
 8007894:	e004      	b.n	80078a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	4904      	ldr	r1, [pc, #16]	; (80078ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800789a:	4805      	ldr	r0, [pc, #20]	; (80078b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800789c:	f7ff fe81 	bl	80075a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078a0:	4b02      	ldr	r3, [pc, #8]	; (80078ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	200005d8 	.word	0x200005d8
 80078b0:	0800803c 	.word	0x0800803c

080078b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80078ba:	4b0f      	ldr	r3, [pc, #60]	; (80078f8 <Get_SerialNum+0x44>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80078c0:	4b0e      	ldr	r3, [pc, #56]	; (80078fc <Get_SerialNum+0x48>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80078c6:	4b0e      	ldr	r3, [pc, #56]	; (8007900 <Get_SerialNum+0x4c>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4413      	add	r3, r2
 80078d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d009      	beq.n	80078ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80078da:	2208      	movs	r2, #8
 80078dc:	4909      	ldr	r1, [pc, #36]	; (8007904 <Get_SerialNum+0x50>)
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f000 f814 	bl	800790c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80078e4:	2204      	movs	r2, #4
 80078e6:	4908      	ldr	r1, [pc, #32]	; (8007908 <Get_SerialNum+0x54>)
 80078e8:	68b8      	ldr	r0, [r7, #8]
 80078ea:	f000 f80f 	bl	800790c <IntToUnicode>
  }
}
 80078ee:	bf00      	nop
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	1ffff7e8 	.word	0x1ffff7e8
 80078fc:	1ffff7ec 	.word	0x1ffff7ec
 8007900:	1ffff7f0 	.word	0x1ffff7f0
 8007904:	2000014a 	.word	0x2000014a
 8007908:	2000015a 	.word	0x2000015a

0800790c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800790c:	b480      	push	{r7}
 800790e:	b087      	sub	sp, #28
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	4613      	mov	r3, r2
 8007918:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800791a:	2300      	movs	r3, #0
 800791c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800791e:	2300      	movs	r3, #0
 8007920:	75fb      	strb	r3, [r7, #23]
 8007922:	e027      	b.n	8007974 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	0f1b      	lsrs	r3, r3, #28
 8007928:	2b09      	cmp	r3, #9
 800792a:	d80b      	bhi.n	8007944 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	0f1b      	lsrs	r3, r3, #28
 8007930:	b2da      	uxtb	r2, r3
 8007932:	7dfb      	ldrb	r3, [r7, #23]
 8007934:	005b      	lsls	r3, r3, #1
 8007936:	4619      	mov	r1, r3
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	440b      	add	r3, r1
 800793c:	3230      	adds	r2, #48	; 0x30
 800793e:	b2d2      	uxtb	r2, r2
 8007940:	701a      	strb	r2, [r3, #0]
 8007942:	e00a      	b.n	800795a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	0f1b      	lsrs	r3, r3, #28
 8007948:	b2da      	uxtb	r2, r3
 800794a:	7dfb      	ldrb	r3, [r7, #23]
 800794c:	005b      	lsls	r3, r3, #1
 800794e:	4619      	mov	r1, r3
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	440b      	add	r3, r1
 8007954:	3237      	adds	r2, #55	; 0x37
 8007956:	b2d2      	uxtb	r2, r2
 8007958:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	011b      	lsls	r3, r3, #4
 800795e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007960:	7dfb      	ldrb	r3, [r7, #23]
 8007962:	005b      	lsls	r3, r3, #1
 8007964:	3301      	adds	r3, #1
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	4413      	add	r3, r2
 800796a:	2200      	movs	r2, #0
 800796c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800796e:	7dfb      	ldrb	r3, [r7, #23]
 8007970:	3301      	adds	r3, #1
 8007972:	75fb      	strb	r3, [r7, #23]
 8007974:	7dfa      	ldrb	r2, [r7, #23]
 8007976:	79fb      	ldrb	r3, [r7, #7]
 8007978:	429a      	cmp	r2, r3
 800797a:	d3d3      	bcc.n	8007924 <IntToUnicode+0x18>
  }
}
 800797c:	bf00      	nop
 800797e:	371c      	adds	r7, #28
 8007980:	46bd      	mov	sp, r7
 8007982:	bc80      	pop	{r7}
 8007984:	4770      	bx	lr
	...

08007988 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a0d      	ldr	r2, [pc, #52]	; (80079cc <HAL_PCD_MspInit+0x44>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d113      	bne.n	80079c2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800799a:	4b0d      	ldr	r3, [pc, #52]	; (80079d0 <HAL_PCD_MspInit+0x48>)
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	4a0c      	ldr	r2, [pc, #48]	; (80079d0 <HAL_PCD_MspInit+0x48>)
 80079a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80079a4:	61d3      	str	r3, [r2, #28]
 80079a6:	4b0a      	ldr	r3, [pc, #40]	; (80079d0 <HAL_PCD_MspInit+0x48>)
 80079a8:	69db      	ldr	r3, [r3, #28]
 80079aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80079b2:	2200      	movs	r2, #0
 80079b4:	2100      	movs	r1, #0
 80079b6:	2014      	movs	r0, #20
 80079b8:	f7fa fefd 	bl	80027b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80079bc:	2014      	movs	r0, #20
 80079be:	f7fa ff16 	bl	80027ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80079c2:	bf00      	nop
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	40005c00 	.word	0x40005c00
 80079d0:	40021000 	.word	0x40021000

080079d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80079e8:	4619      	mov	r1, r3
 80079ea:	4610      	mov	r0, r2
 80079ec:	f7fe feb6 	bl	800675c <USBD_LL_SetupStage>
}
 80079f0:	bf00      	nop
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	460b      	mov	r3, r1
 8007a02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8007a0a:	78fb      	ldrb	r3, [r7, #3]
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	015b      	lsls	r3, r3, #5
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	78fb      	ldrb	r3, [r7, #3]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	f7fe fee9 	bl	80067f2 <USBD_LL_DataOutStage>
}
 8007a20:	bf00      	nop
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	460b      	mov	r3, r1
 8007a32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8007a3a:	78fb      	ldrb	r3, [r7, #3]
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	015b      	lsls	r3, r3, #5
 8007a40:	4413      	add	r3, r2
 8007a42:	333c      	adds	r3, #60	; 0x3c
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	78fb      	ldrb	r3, [r7, #3]
 8007a48:	4619      	mov	r1, r3
 8007a4a:	f7fe ff43 	bl	80068d4 <USBD_LL_DataInStage>
}
 8007a4e:	bf00      	nop
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b082      	sub	sp, #8
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7ff f853 	bl	8006b10 <USBD_LL_SOF>
}
 8007a6a:	bf00      	nop
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b084      	sub	sp, #16
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d001      	beq.n	8007a8a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007a86:	f7f9 fe71 	bl	800176c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007a90:	7bfa      	ldrb	r2, [r7, #15]
 8007a92:	4611      	mov	r1, r2
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7ff f803 	bl	8006aa0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7fe ffbc 	bl	8006a1e <USBD_LL_Reset>
}
 8007aa6:	bf00      	nop
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
	...

08007ab0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fe fffd 	bl	8006abe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d005      	beq.n	8007ad8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007acc:	4b04      	ldr	r3, [pc, #16]	; (8007ae0 <HAL_PCD_SuspendCallback+0x30>)
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	4a03      	ldr	r2, [pc, #12]	; (8007ae0 <HAL_PCD_SuspendCallback+0x30>)
 8007ad2:	f043 0306 	orr.w	r3, r3, #6
 8007ad6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ad8:	bf00      	nop
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	e000ed00 	.word	0xe000ed00

08007ae4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fe fff7 	bl	8006ae6 <USBD_LL_Resume>
}
 8007af8:	bf00      	nop
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007b08:	4a1f      	ldr	r2, [pc, #124]	; (8007b88 <USBD_LL_Init+0x88>)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a1d      	ldr	r2, [pc, #116]	; (8007b88 <USBD_LL_Init+0x88>)
 8007b14:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007b18:	4b1b      	ldr	r3, [pc, #108]	; (8007b88 <USBD_LL_Init+0x88>)
 8007b1a:	4a1c      	ldr	r2, [pc, #112]	; (8007b8c <USBD_LL_Init+0x8c>)
 8007b1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007b1e:	4b1a      	ldr	r3, [pc, #104]	; (8007b88 <USBD_LL_Init+0x88>)
 8007b20:	2208      	movs	r2, #8
 8007b22:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007b24:	4b18      	ldr	r3, [pc, #96]	; (8007b88 <USBD_LL_Init+0x88>)
 8007b26:	2202      	movs	r2, #2
 8007b28:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007b2a:	4b17      	ldr	r3, [pc, #92]	; (8007b88 <USBD_LL_Init+0x88>)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007b30:	4b15      	ldr	r3, [pc, #84]	; (8007b88 <USBD_LL_Init+0x88>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007b36:	4b14      	ldr	r3, [pc, #80]	; (8007b88 <USBD_LL_Init+0x88>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007b3c:	4812      	ldr	r0, [pc, #72]	; (8007b88 <USBD_LL_Init+0x88>)
 8007b3e:	f7fb fb1b 	bl	8003178 <HAL_PCD_Init>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d001      	beq.n	8007b4c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007b48:	f7f9 fe10 	bl	800176c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b52:	2318      	movs	r3, #24
 8007b54:	2200      	movs	r2, #0
 8007b56:	2100      	movs	r1, #0
 8007b58:	f7fc f9a0 	bl	8003e9c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b62:	2358      	movs	r3, #88	; 0x58
 8007b64:	2200      	movs	r2, #0
 8007b66:	2180      	movs	r1, #128	; 0x80
 8007b68:	f7fc f998 	bl	8003e9c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b76:	2200      	movs	r2, #0
 8007b78:	2181      	movs	r1, #129	; 0x81
 8007b7a:	f7fc f98f 	bl	8003e9c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	200007d8 	.word	0x200007d8
 8007b8c:	40005c00 	.word	0x40005c00

08007b90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fb fbc7 	bl	800333a <HAL_PCD_Start>
 8007bac:	4603      	mov	r3, r0
 8007bae:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bb0:	7bfb      	ldrb	r3, [r7, #15]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 f934 	bl	8007e20 <USBD_Get_USB_Status>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007bbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b084      	sub	sp, #16
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	4608      	mov	r0, r1
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	70fb      	strb	r3, [r7, #3]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	70bb      	strb	r3, [r7, #2]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007bee:	78bb      	ldrb	r3, [r7, #2]
 8007bf0:	883a      	ldrh	r2, [r7, #0]
 8007bf2:	78f9      	ldrb	r1, [r7, #3]
 8007bf4:	f7fb fcfa 	bl	80035ec <HAL_PCD_EP_Open>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 f90e 	bl	8007e20 <USBD_Get_USB_Status>
 8007c04:	4603      	mov	r3, r0
 8007c06:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007c08:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b084      	sub	sp, #16
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c2c:	78fa      	ldrb	r2, [r7, #3]
 8007c2e:	4611      	mov	r1, r2
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7fb fd3b 	bl	80036ac <HAL_PCD_EP_Close>
 8007c36:	4603      	mov	r3, r0
 8007c38:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 f8ef 	bl	8007e20 <USBD_Get_USB_Status>
 8007c42:	4603      	mov	r3, r0
 8007c44:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8007c46:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c60:	2300      	movs	r3, #0
 8007c62:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c6a:	78fa      	ldrb	r2, [r7, #3]
 8007c6c:	4611      	mov	r1, r2
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fb fdd1 	bl	8003816 <HAL_PCD_EP_SetStall>
 8007c74:	4603      	mov	r3, r0
 8007c76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f000 f8d0 	bl	8007e20 <USBD_Get_USB_Status>
 8007c80:	4603      	mov	r3, r0
 8007c82:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007c84:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b084      	sub	sp, #16
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	460b      	mov	r3, r1
 8007c98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ca8:	78fa      	ldrb	r2, [r7, #3]
 8007caa:	4611      	mov	r1, r2
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fb fe0c 	bl	80038ca <HAL_PCD_EP_ClrStall>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f000 f8b1 	bl	8007e20 <USBD_Get_USB_Status>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8007cc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cde:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007ce0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	da08      	bge.n	8007cfa <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007ce8:	78fb      	ldrb	r3, [r7, #3]
 8007cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	015b      	lsls	r3, r3, #5
 8007cf2:	4413      	add	r3, r2
 8007cf4:	332a      	adds	r3, #42	; 0x2a
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	e008      	b.n	8007d0c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007cfa:	78fb      	ldrb	r3, [r7, #3]
 8007cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	015b      	lsls	r3, r3, #5
 8007d04:	4413      	add	r3, r2
 8007d06:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007d0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3714      	adds	r7, #20
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bc80      	pop	{r7}
 8007d14:	4770      	bx	lr

08007d16 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b084      	sub	sp, #16
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	460b      	mov	r3, r1
 8007d20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d30:	78fa      	ldrb	r2, [r7, #3]
 8007d32:	4611      	mov	r1, r2
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7fb fc34 	bl	80035a2 <HAL_PCD_SetAddress>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
 8007d40:	4618      	mov	r0, r3
 8007d42:	f000 f86d 	bl	8007e20 <USBD_Get_USB_Status>
 8007d46:	4603      	mov	r3, r0
 8007d48:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007d4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	607a      	str	r2, [r7, #4]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	460b      	mov	r3, r1
 8007d62:	72fb      	strb	r3, [r7, #11]
 8007d64:	4613      	mov	r3, r2
 8007d66:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d76:	893b      	ldrh	r3, [r7, #8]
 8007d78:	7af9      	ldrb	r1, [r7, #11]
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	f7fb fd12 	bl	80037a4 <HAL_PCD_EP_Transmit>
 8007d80:	4603      	mov	r3, r0
 8007d82:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d84:	7dfb      	ldrb	r3, [r7, #23]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 f84a 	bl	8007e20 <USBD_Get_USB_Status>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007d90:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3718      	adds	r7, #24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b086      	sub	sp, #24
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	60f8      	str	r0, [r7, #12]
 8007da2:	607a      	str	r2, [r7, #4]
 8007da4:	461a      	mov	r2, r3
 8007da6:	460b      	mov	r3, r1
 8007da8:	72fb      	strb	r3, [r7, #11]
 8007daa:	4613      	mov	r3, r2
 8007dac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007db2:	2300      	movs	r3, #0
 8007db4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007dbc:	893b      	ldrh	r3, [r7, #8]
 8007dbe:	7af9      	ldrb	r1, [r7, #11]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	f7fb fcb5 	bl	8003730 <HAL_PCD_EP_Receive>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f000 f827 	bl	8007e20 <USBD_Get_USB_Status>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8007dd6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3718      	adds	r7, #24
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007de8:	4b02      	ldr	r3, [pc, #8]	; (8007df4 <USBD_static_malloc+0x14>)
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	370c      	adds	r7, #12
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bc80      	pop	{r7}
 8007df2:	4770      	bx	lr
 8007df4:	20000188 	.word	0x20000188

08007df8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]

}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bc80      	pop	{r7}
 8007e08:	4770      	bx	lr

08007e0a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	460b      	mov	r3, r1
 8007e14:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007e16:	bf00      	nop
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bc80      	pop	{r7}
 8007e1e:	4770      	bx	lr

08007e20 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	4603      	mov	r3, r0
 8007e28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e2e:	79fb      	ldrb	r3, [r7, #7]
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d817      	bhi.n	8007e64 <USBD_Get_USB_Status+0x44>
 8007e34:	a201      	add	r2, pc, #4	; (adr r2, 8007e3c <USBD_Get_USB_Status+0x1c>)
 8007e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3a:	bf00      	nop
 8007e3c:	08007e4d 	.word	0x08007e4d
 8007e40:	08007e53 	.word	0x08007e53
 8007e44:	08007e59 	.word	0x08007e59
 8007e48:	08007e5f 	.word	0x08007e5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e50:	e00b      	b.n	8007e6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e52:	2302      	movs	r3, #2
 8007e54:	73fb      	strb	r3, [r7, #15]
    break;
 8007e56:	e008      	b.n	8007e6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e5c:	e005      	b.n	8007e6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e5e:	2302      	movs	r3, #2
 8007e60:	73fb      	strb	r3, [r7, #15]
    break;
 8007e62:	e002      	b.n	8007e6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007e64:	2302      	movs	r3, #2
 8007e66:	73fb      	strb	r3, [r7, #15]
    break;
 8007e68:	bf00      	nop
  }
  return usb_status;
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bc80      	pop	{r7}
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop

08007e78 <__libc_init_array>:
 8007e78:	b570      	push	{r4, r5, r6, lr}
 8007e7a:	2500      	movs	r5, #0
 8007e7c:	4e0c      	ldr	r6, [pc, #48]	; (8007eb0 <__libc_init_array+0x38>)
 8007e7e:	4c0d      	ldr	r4, [pc, #52]	; (8007eb4 <__libc_init_array+0x3c>)
 8007e80:	1ba4      	subs	r4, r4, r6
 8007e82:	10a4      	asrs	r4, r4, #2
 8007e84:	42a5      	cmp	r5, r4
 8007e86:	d109      	bne.n	8007e9c <__libc_init_array+0x24>
 8007e88:	f000 f8a6 	bl	8007fd8 <_init>
 8007e8c:	2500      	movs	r5, #0
 8007e8e:	4e0a      	ldr	r6, [pc, #40]	; (8007eb8 <__libc_init_array+0x40>)
 8007e90:	4c0a      	ldr	r4, [pc, #40]	; (8007ebc <__libc_init_array+0x44>)
 8007e92:	1ba4      	subs	r4, r4, r6
 8007e94:	10a4      	asrs	r4, r4, #2
 8007e96:	42a5      	cmp	r5, r4
 8007e98:	d105      	bne.n	8007ea6 <__libc_init_array+0x2e>
 8007e9a:	bd70      	pop	{r4, r5, r6, pc}
 8007e9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ea0:	4798      	blx	r3
 8007ea2:	3501      	adds	r5, #1
 8007ea4:	e7ee      	b.n	8007e84 <__libc_init_array+0xc>
 8007ea6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007eaa:	4798      	blx	r3
 8007eac:	3501      	adds	r5, #1
 8007eae:	e7f2      	b.n	8007e96 <__libc_init_array+0x1e>
 8007eb0:	08008064 	.word	0x08008064
 8007eb4:	08008064 	.word	0x08008064
 8007eb8:	08008064 	.word	0x08008064
 8007ebc:	08008068 	.word	0x08008068

08007ec0 <memset>:
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	4402      	add	r2, r0
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d100      	bne.n	8007eca <memset+0xa>
 8007ec8:	4770      	bx	lr
 8007eca:	f803 1b01 	strb.w	r1, [r3], #1
 8007ece:	e7f9      	b.n	8007ec4 <memset+0x4>

08007ed0 <floor>:
 8007ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ed4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8007ed8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8007edc:	2e13      	cmp	r6, #19
 8007ede:	4607      	mov	r7, r0
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	4605      	mov	r5, r0
 8007ee6:	dc35      	bgt.n	8007f54 <floor+0x84>
 8007ee8:	2e00      	cmp	r6, #0
 8007eea:	da16      	bge.n	8007f1a <floor+0x4a>
 8007eec:	a336      	add	r3, pc, #216	; (adr r3, 8007fc8 <floor+0xf8>)
 8007eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef2:	f7f8 f933 	bl	800015c <__adddf3>
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2300      	movs	r3, #0
 8007efa:	f7f8 fd75 	bl	80009e8 <__aeabi_dcmpgt>
 8007efe:	b148      	cbz	r0, 8007f14 <floor+0x44>
 8007f00:	2c00      	cmp	r4, #0
 8007f02:	da5b      	bge.n	8007fbc <floor+0xec>
 8007f04:	2500      	movs	r5, #0
 8007f06:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007f0a:	4a31      	ldr	r2, [pc, #196]	; (8007fd0 <floor+0x100>)
 8007f0c:	433b      	orrs	r3, r7
 8007f0e:	42ab      	cmp	r3, r5
 8007f10:	bf18      	it	ne
 8007f12:	4614      	movne	r4, r2
 8007f14:	4623      	mov	r3, r4
 8007f16:	462f      	mov	r7, r5
 8007f18:	e026      	b.n	8007f68 <floor+0x98>
 8007f1a:	4a2e      	ldr	r2, [pc, #184]	; (8007fd4 <floor+0x104>)
 8007f1c:	fa42 f806 	asr.w	r8, r2, r6
 8007f20:	ea01 0208 	and.w	r2, r1, r8
 8007f24:	4302      	orrs	r2, r0
 8007f26:	d01f      	beq.n	8007f68 <floor+0x98>
 8007f28:	a327      	add	r3, pc, #156	; (adr r3, 8007fc8 <floor+0xf8>)
 8007f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2e:	f7f8 f915 	bl	800015c <__adddf3>
 8007f32:	2200      	movs	r2, #0
 8007f34:	2300      	movs	r3, #0
 8007f36:	f7f8 fd57 	bl	80009e8 <__aeabi_dcmpgt>
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	d0ea      	beq.n	8007f14 <floor+0x44>
 8007f3e:	2c00      	cmp	r4, #0
 8007f40:	bfbe      	ittt	lt
 8007f42:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007f46:	fa43 f606 	asrlt.w	r6, r3, r6
 8007f4a:	19a4      	addlt	r4, r4, r6
 8007f4c:	ea24 0408 	bic.w	r4, r4, r8
 8007f50:	2500      	movs	r5, #0
 8007f52:	e7df      	b.n	8007f14 <floor+0x44>
 8007f54:	2e33      	cmp	r6, #51	; 0x33
 8007f56:	dd0b      	ble.n	8007f70 <floor+0xa0>
 8007f58:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007f5c:	d104      	bne.n	8007f68 <floor+0x98>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	f7f8 f8fc 	bl	800015c <__adddf3>
 8007f64:	4607      	mov	r7, r0
 8007f66:	460b      	mov	r3, r1
 8007f68:	4638      	mov	r0, r7
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f74:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8007f78:	fa22 f808 	lsr.w	r8, r2, r8
 8007f7c:	ea18 0f00 	tst.w	r8, r0
 8007f80:	d0f2      	beq.n	8007f68 <floor+0x98>
 8007f82:	a311      	add	r3, pc, #68	; (adr r3, 8007fc8 <floor+0xf8>)
 8007f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f88:	f7f8 f8e8 	bl	800015c <__adddf3>
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	2300      	movs	r3, #0
 8007f90:	f7f8 fd2a 	bl	80009e8 <__aeabi_dcmpgt>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d0bd      	beq.n	8007f14 <floor+0x44>
 8007f98:	2c00      	cmp	r4, #0
 8007f9a:	da02      	bge.n	8007fa2 <floor+0xd2>
 8007f9c:	2e14      	cmp	r6, #20
 8007f9e:	d103      	bne.n	8007fa8 <floor+0xd8>
 8007fa0:	3401      	adds	r4, #1
 8007fa2:	ea25 0508 	bic.w	r5, r5, r8
 8007fa6:	e7b5      	b.n	8007f14 <floor+0x44>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007fae:	fa03 f606 	lsl.w	r6, r3, r6
 8007fb2:	4435      	add	r5, r6
 8007fb4:	42bd      	cmp	r5, r7
 8007fb6:	bf38      	it	cc
 8007fb8:	18e4      	addcc	r4, r4, r3
 8007fba:	e7f2      	b.n	8007fa2 <floor+0xd2>
 8007fbc:	2500      	movs	r5, #0
 8007fbe:	462c      	mov	r4, r5
 8007fc0:	e7a8      	b.n	8007f14 <floor+0x44>
 8007fc2:	bf00      	nop
 8007fc4:	f3af 8000 	nop.w
 8007fc8:	8800759c 	.word	0x8800759c
 8007fcc:	7e37e43c 	.word	0x7e37e43c
 8007fd0:	bff00000 	.word	0xbff00000
 8007fd4:	000fffff 	.word	0x000fffff

08007fd8 <_init>:
 8007fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fda:	bf00      	nop
 8007fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fde:	bc08      	pop	{r3}
 8007fe0:	469e      	mov	lr, r3
 8007fe2:	4770      	bx	lr

08007fe4 <_fini>:
 8007fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe6:	bf00      	nop
 8007fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fea:	bc08      	pop	{r3}
 8007fec:	469e      	mov	lr, r3
 8007fee:	4770      	bx	lr
